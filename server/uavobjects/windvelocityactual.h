/**
 ******************************************************************************
 * @addtogroup UAVObjects UAVObject set for this firmware
 * @{
 * @addtogroup WindVelocityActual WindVelocityActual
 * @brief Stores 3D wind speed estimation.
 *
 *
 * @file       windvelocityactual.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @author     Tau Labs, http://taulabs.org, Copyright (C) 2012-2013
 * @brief      Include files for the WindVelocityActual object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: windvelocityactual.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef WINDVELOCITYACTUAL_H
#define WINDVELOCITYACTUAL_H

// Object constants
#define WINDVELOCITYACTUAL_OBJID 0x6D31D2F8
#define WINDVELOCITYACTUAL_ISSINGLEINST 1
#define WINDVELOCITYACTUAL_ISSETTINGS 0
#define WINDVELOCITYACTUAL_NUMBYTES 12

// Generic interface functions
int32_t WindVelocityActualInitialize();
UAVObjHandle WindVelocityActualHandle();
void WindVelocityActualSetDefaults(UAVObjHandle obj, uint16_t instId);

// Object data
typedef struct {
    float North;
    float East;
    float Down;

} __attribute__((packed)) __attribute__((aligned(4))) WindVelocityActualData;

// Typesafe Object access functions
/**
 * @function WindVelocityActualGet(dataOut)
 * @brief Populate a WindVelocityActualData object
 * @param[out] dataOut 
 */
static inline int32_t WindVelocityActualGet(WindVelocityActualData *dataOut) { return UAVObjGetData(WindVelocityActualHandle(), dataOut); }

static inline int32_t WindVelocityActualSet(const WindVelocityActualData *dataIn) { return UAVObjSetData(WindVelocityActualHandle(), dataIn); }

static inline int32_t WindVelocityActualInstGet(uint16_t instId, WindVelocityActualData *dataOut) { return UAVObjGetInstanceData(WindVelocityActualHandle(), instId, dataOut); }

static inline int32_t WindVelocityActualInstSet(uint16_t instId, const WindVelocityActualData *dataIn) { return UAVObjSetInstanceData(WindVelocityActualHandle(), instId, dataIn); }

static inline int32_t WindVelocityActualConnectQueue(xQueueHandle queue) { return UAVObjConnectQueue(WindVelocityActualHandle(), queue, EV_MASK_ALL_UPDATES); }

static inline int32_t WindVelocityActualConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(WindVelocityActualHandle(), cb, EV_MASK_ALL_UPDATES); }

static inline uint16_t WindVelocityActualCreateInstance() { return UAVObjCreateInstance(WindVelocityActualHandle(), &WindVelocityActualSetDefaults); }

static inline void WindVelocityActualRequestUpdate() { UAVObjRequestUpdate(WindVelocityActualHandle()); }

static inline void WindVelocityActualRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(WindVelocityActualHandle(), instId); }

static inline void WindVelocityActualUpdated() { UAVObjUpdated(WindVelocityActualHandle()); }

static inline void WindVelocityActualInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(WindVelocityActualHandle(), instId); }

static inline int32_t WindVelocityActualGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(WindVelocityActualHandle(), dataOut); }

static inline int32_t WindVelocityActualSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(WindVelocityActualHandle(), dataIn); }

static inline int8_t WindVelocityActualReadOnly() { return UAVObjReadOnly(WindVelocityActualHandle()); }

static inline uint16_t WindVelocityActualGetNumInstances(){ return UAVObjGetNumInstances(WindVelocityActualHandle()); }

static inline uint32_t WindVelocityActualGetNumBytes(){ return UAVObjGetNumBytes(WindVelocityActualHandle()); }

// Field information
// Field North information
// Field East information
// Field Down information


// set/Get functions
extern void WindVelocityActualNorthSet( float *NewNorth );
extern void WindVelocityActualNorthGet( float *NewNorth );
extern void WindVelocityActualEastSet( float *NewEast );
extern void WindVelocityActualEastGet( float *NewEast );
extern void WindVelocityActualDownSet( float *NewDown );
extern void WindVelocityActualDownGet( float *NewDown );


#endif // WINDVELOCITYACTUAL_H

/**
 * @}
 * @}
 */
