/**
 ******************************************************************************
 * @addtogroup UAVObjects UAVObject set for this firmware
 * @{
 * @addtogroup AccelDesired AccelDesired
 * @brief The desired acceleration from navigation
 *
 *
 * @file       acceldesired.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @author     Tau Labs, http://taulabs.org, Copyright (C) 2012-2015
 * @brief      Include files for the AccelDesired object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: acceldesired.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef ACCELDESIRED_H
#define ACCELDESIRED_H

#include "pios_queue.h"
#include "uavoversion.h"



// Object constants
#define ACCELDESIRED_OBJID 0x3B7C5B62
#define ACCELDESIRED_ISSINGLEINST 1
#define ACCELDESIRED_ISSETTINGS 0
#define ACCELDESIRED_NUMBYTES 12

// Generic interface functions
int32_t AccelDesiredInitialize();
UAVObjHandle AccelDesiredHandle();
void AccelDesiredSetDefaults(UAVObjHandle obj, uint16_t instId);

// Object data
typedef struct {
    float North;
    float East;
    float Down;

} __attribute__((packed)) __attribute__((aligned(4))) AccelDesiredData;

// Typesafe Object access functions
/**
 * @function AccelDesiredGet(dataOut)
 * @brief Populate a AccelDesiredData object
 * @param[out] dataOut 
 */
static inline int32_t AccelDesiredGet(AccelDesiredData *dataOut) { return UAVObjGetData(AccelDesiredHandle(), dataOut); }

static inline int32_t AccelDesiredSet(const AccelDesiredData *dataIn) { return UAVObjSetData(AccelDesiredHandle(), dataIn); }

static inline int32_t AccelDesiredInstGet(uint16_t instId, AccelDesiredData *dataOut) { return UAVObjGetInstanceData(AccelDesiredHandle(), instId, dataOut); }

static inline int32_t AccelDesiredInstSet(uint16_t instId, const AccelDesiredData *dataIn) { return UAVObjSetInstanceData(AccelDesiredHandle(), instId, dataIn); }

static inline int32_t AccelDesiredConnectQueue(struct pios_queue *queue) { return UAVObjConnectQueue(AccelDesiredHandle(), queue, EV_MASK_ALL_UPDATES); }

static inline int32_t AccelDesiredConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(AccelDesiredHandle(), cb, EV_MASK_ALL_UPDATES); }

static inline uint16_t AccelDesiredCreateInstance() { return UAVObjCreateInstance(AccelDesiredHandle(), &AccelDesiredSetDefaults); }

static inline void AccelDesiredRequestUpdate() { UAVObjRequestUpdate(AccelDesiredHandle()); }

static inline void AccelDesiredRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(AccelDesiredHandle(), instId); }

static inline void AccelDesiredUpdated() { UAVObjUpdated(AccelDesiredHandle()); }

static inline void AccelDesiredInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(AccelDesiredHandle(), instId); }

static inline int32_t AccelDesiredGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(AccelDesiredHandle(), dataOut); }

static inline int32_t AccelDesiredSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(AccelDesiredHandle(), dataIn); }

static inline int8_t AccelDesiredReadOnly() { return UAVObjReadOnly(AccelDesiredHandle()); }

static inline uint16_t AccelDesiredGetNumInstances(){ return UAVObjGetNumInstances(AccelDesiredHandle()); }

static inline uint32_t AccelDesiredGetNumBytes(){ return UAVObjGetNumBytes(AccelDesiredHandle()); }

// Field information
// Field North information
// Field East information
// Field Down information


// set/Get functions
extern void AccelDesiredNorthSet( float *NewNorth );
extern void AccelDesiredNorthGet( float *NewNorth );
extern void AccelDesiredEastSet( float *NewEast );
extern void AccelDesiredEastGet( float *NewEast );
extern void AccelDesiredDownSet( float *NewDown );
extern void AccelDesiredDownGet( float *NewDown );


#endif // ACCELDESIRED_H

/**
 * @}
 * @}
 */
