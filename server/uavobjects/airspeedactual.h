/**
 ******************************************************************************
 * @addtogroup UAVObjects UAVObject set for this firmware
 * @{
 * @addtogroup AirspeedActual AirspeedActual
 * @brief UAVO for true airspeed, calibrated airspeed, angle of attack, and angle of slip
 *
 *
 * @file       airspeedactual.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @author     Tau Labs, http://taulabs.org, Copyright (C) 2012-2013
 * @brief      Include files for the AirspeedActual object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: airspeedactual.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef AIRSPEEDACTUAL_H
#define AIRSPEEDACTUAL_H

// Object constants
#define AIRSPEEDACTUAL_OBJID 0x133A3280
#define AIRSPEEDACTUAL_ISSINGLEINST 1
#define AIRSPEEDACTUAL_ISSETTINGS 0
#define AIRSPEEDACTUAL_NUMBYTES 16

// Generic interface functions
int32_t AirspeedActualInitialize();
UAVObjHandle AirspeedActualHandle();
void AirspeedActualSetDefaults(UAVObjHandle obj, uint16_t instId);

// Object data
typedef struct {
    float TrueAirspeed;
    float CalibratedAirspeed;
    float alpha;
    float beta;

} __attribute__((packed)) __attribute__((aligned(4))) AirspeedActualData;

// Typesafe Object access functions
/**
 * @function AirspeedActualGet(dataOut)
 * @brief Populate a AirspeedActualData object
 * @param[out] dataOut 
 */
static inline int32_t AirspeedActualGet(AirspeedActualData *dataOut) { return UAVObjGetData(AirspeedActualHandle(), dataOut); }

static inline int32_t AirspeedActualSet(const AirspeedActualData *dataIn) { return UAVObjSetData(AirspeedActualHandle(), dataIn); }

static inline int32_t AirspeedActualInstGet(uint16_t instId, AirspeedActualData *dataOut) { return UAVObjGetInstanceData(AirspeedActualHandle(), instId, dataOut); }

static inline int32_t AirspeedActualInstSet(uint16_t instId, const AirspeedActualData *dataIn) { return UAVObjSetInstanceData(AirspeedActualHandle(), instId, dataIn); }

static inline int32_t AirspeedActualConnectQueue(xQueueHandle queue) { return UAVObjConnectQueue(AirspeedActualHandle(), queue, EV_MASK_ALL_UPDATES); }

static inline int32_t AirspeedActualConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(AirspeedActualHandle(), cb, EV_MASK_ALL_UPDATES); }

static inline uint16_t AirspeedActualCreateInstance() { return UAVObjCreateInstance(AirspeedActualHandle(), &AirspeedActualSetDefaults); }

static inline void AirspeedActualRequestUpdate() { UAVObjRequestUpdate(AirspeedActualHandle()); }

static inline void AirspeedActualRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(AirspeedActualHandle(), instId); }

static inline void AirspeedActualUpdated() { UAVObjUpdated(AirspeedActualHandle()); }

static inline void AirspeedActualInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(AirspeedActualHandle(), instId); }

static inline int32_t AirspeedActualGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(AirspeedActualHandle(), dataOut); }

static inline int32_t AirspeedActualSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(AirspeedActualHandle(), dataIn); }

static inline int8_t AirspeedActualReadOnly() { return UAVObjReadOnly(AirspeedActualHandle()); }

static inline uint16_t AirspeedActualGetNumInstances(){ return UAVObjGetNumInstances(AirspeedActualHandle()); }

static inline uint32_t AirspeedActualGetNumBytes(){ return UAVObjGetNumBytes(AirspeedActualHandle()); }

// Field information
// Field TrueAirspeed information
// Field CalibratedAirspeed information
// Field alpha information
// Field beta information


// set/Get functions
extern void AirspeedActualTrueAirspeedSet( float *NewTrueAirspeed );
extern void AirspeedActualTrueAirspeedGet( float *NewTrueAirspeed );
extern void AirspeedActualCalibratedAirspeedSet( float *NewCalibratedAirspeed );
extern void AirspeedActualCalibratedAirspeedGet( float *NewCalibratedAirspeed );
extern void AirspeedActualalphaSet( float *Newalpha );
extern void AirspeedActualalphaGet( float *Newalpha );
extern void AirspeedActualbetaSet( float *Newbeta );
extern void AirspeedActualbetaGet( float *Newbeta );


#endif // AIRSPEEDACTUAL_H

/**
 * @}
 * @}
 */
