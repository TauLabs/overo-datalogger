/**
 ******************************************************************************
 * @addtogroup UAVObjects UAVObject set for this firmware
 * @{
 * @addtogroup NEDPosition NEDPosition
 * @brief Contains the current position relative to @ref HomeLocation
 *
 *
 * @file       nedposition.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @author     Tau Labs, http://taulabs.org, Copyright (C) 2012-2013
 * @brief      Include files for the NEDPosition object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: nedposition.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef NEDPOSITION_H
#define NEDPOSITION_H

// Object constants
#define NEDPOSITION_OBJID 0x1FB15A00
#define NEDPOSITION_ISSINGLEINST 1
#define NEDPOSITION_ISSETTINGS 0
#define NEDPOSITION_NUMBYTES 12

// Generic interface functions
int32_t NEDPositionInitialize();
UAVObjHandle NEDPositionHandle();
void NEDPositionSetDefaults(UAVObjHandle obj, uint16_t instId);

// Object data
typedef struct {
    float North;
    float East;
    float Down;

} __attribute__((packed)) __attribute__((aligned(4))) NEDPositionData;

// Typesafe Object access functions
/**
 * @function NEDPositionGet(dataOut)
 * @brief Populate a NEDPositionData object
 * @param[out] dataOut 
 */
static inline int32_t NEDPositionGet(NEDPositionData *dataOut) { return UAVObjGetData(NEDPositionHandle(), dataOut); }

static inline int32_t NEDPositionSet(const NEDPositionData *dataIn) { return UAVObjSetData(NEDPositionHandle(), dataIn); }

static inline int32_t NEDPositionInstGet(uint16_t instId, NEDPositionData *dataOut) { return UAVObjGetInstanceData(NEDPositionHandle(), instId, dataOut); }

static inline int32_t NEDPositionInstSet(uint16_t instId, const NEDPositionData *dataIn) { return UAVObjSetInstanceData(NEDPositionHandle(), instId, dataIn); }

static inline int32_t NEDPositionConnectQueue(xQueueHandle queue) { return UAVObjConnectQueue(NEDPositionHandle(), queue, EV_MASK_ALL_UPDATES); }

static inline int32_t NEDPositionConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(NEDPositionHandle(), cb, EV_MASK_ALL_UPDATES); }

static inline uint16_t NEDPositionCreateInstance() { return UAVObjCreateInstance(NEDPositionHandle(), &NEDPositionSetDefaults); }

static inline void NEDPositionRequestUpdate() { UAVObjRequestUpdate(NEDPositionHandle()); }

static inline void NEDPositionRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(NEDPositionHandle(), instId); }

static inline void NEDPositionUpdated() { UAVObjUpdated(NEDPositionHandle()); }

static inline void NEDPositionInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(NEDPositionHandle(), instId); }

static inline int32_t NEDPositionGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(NEDPositionHandle(), dataOut); }

static inline int32_t NEDPositionSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(NEDPositionHandle(), dataIn); }

static inline int8_t NEDPositionReadOnly() { return UAVObjReadOnly(NEDPositionHandle()); }

static inline uint16_t NEDPositionGetNumInstances(){ return UAVObjGetNumInstances(NEDPositionHandle()); }

static inline uint32_t NEDPositionGetNumBytes(){ return UAVObjGetNumBytes(NEDPositionHandle()); }

// Field information
// Field North information
// Field East information
// Field Down information


// set/Get functions
extern void NEDPositionNorthSet( float *NewNorth );
extern void NEDPositionNorthGet( float *NewNorth );
extern void NEDPositionEastSet( float *NewEast );
extern void NEDPositionEastGet( float *NewEast );
extern void NEDPositionDownSet( float *NewDown );
extern void NEDPositionDownGet( float *NewDown );


#endif // NEDPOSITION_H

/**
 * @}
 * @}
 */
