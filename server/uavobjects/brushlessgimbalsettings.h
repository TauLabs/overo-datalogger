/**
 ******************************************************************************
 * @addtogroup UAVObjects UAVObject set for this firmware
 * @{
 * @addtogroup BrushlessGimbalSettings BrushlessGimbalSettings
 * @brief Settings for the @ref BrushlessGimbal module
 *
 *
 * @file       brushlessgimbalsettings.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @author     Tau Labs, http://taulabs.org, Copyright (C) 2012-2013
 * @brief      Include files for the BrushlessGimbalSettings object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: brushlessgimbalsettings.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef BRUSHLESSGIMBALSETTINGS_H
#define BRUSHLESSGIMBALSETTINGS_H

// Object constants
#define BRUSHLESSGIMBALSETTINGS_OBJID 0x89EE9146
#define BRUSHLESSGIMBALSETTINGS_ISSINGLEINST 1
#define BRUSHLESSGIMBALSETTINGS_ISSETTINGS 1
#define BRUSHLESSGIMBALSETTINGS_NUMBYTES 27

// Generic interface functions
int32_t BrushlessGimbalSettingsInitialize();
UAVObjHandle BrushlessGimbalSettingsHandle();
void BrushlessGimbalSettingsSetDefaults(UAVObjHandle obj, uint16_t instId);

// Object data
typedef struct {
    float Damping[3];
    uint16_t MaxDPS[3];
    uint16_t SlewLimit[3];
    uint8_t PowerScale[3];

} __attribute__((packed)) __attribute__((aligned(4))) BrushlessGimbalSettingsData;

// Typesafe Object access functions
/**
 * @function BrushlessGimbalSettingsGet(dataOut)
 * @brief Populate a BrushlessGimbalSettingsData object
 * @param[out] dataOut 
 */
static inline int32_t BrushlessGimbalSettingsGet(BrushlessGimbalSettingsData *dataOut) { return UAVObjGetData(BrushlessGimbalSettingsHandle(), dataOut); }

static inline int32_t BrushlessGimbalSettingsSet(const BrushlessGimbalSettingsData *dataIn) { return UAVObjSetData(BrushlessGimbalSettingsHandle(), dataIn); }

static inline int32_t BrushlessGimbalSettingsInstGet(uint16_t instId, BrushlessGimbalSettingsData *dataOut) { return UAVObjGetInstanceData(BrushlessGimbalSettingsHandle(), instId, dataOut); }

static inline int32_t BrushlessGimbalSettingsInstSet(uint16_t instId, const BrushlessGimbalSettingsData *dataIn) { return UAVObjSetInstanceData(BrushlessGimbalSettingsHandle(), instId, dataIn); }

static inline int32_t BrushlessGimbalSettingsConnectQueue(xQueueHandle queue) { return UAVObjConnectQueue(BrushlessGimbalSettingsHandle(), queue, EV_MASK_ALL_UPDATES); }

static inline int32_t BrushlessGimbalSettingsConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(BrushlessGimbalSettingsHandle(), cb, EV_MASK_ALL_UPDATES); }

static inline uint16_t BrushlessGimbalSettingsCreateInstance() { return UAVObjCreateInstance(BrushlessGimbalSettingsHandle(), &BrushlessGimbalSettingsSetDefaults); }

static inline void BrushlessGimbalSettingsRequestUpdate() { UAVObjRequestUpdate(BrushlessGimbalSettingsHandle()); }

static inline void BrushlessGimbalSettingsRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(BrushlessGimbalSettingsHandle(), instId); }

static inline void BrushlessGimbalSettingsUpdated() { UAVObjUpdated(BrushlessGimbalSettingsHandle()); }

static inline void BrushlessGimbalSettingsInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(BrushlessGimbalSettingsHandle(), instId); }

static inline int32_t BrushlessGimbalSettingsGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(BrushlessGimbalSettingsHandle(), dataOut); }

static inline int32_t BrushlessGimbalSettingsSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(BrushlessGimbalSettingsHandle(), dataIn); }

static inline int8_t BrushlessGimbalSettingsReadOnly() { return UAVObjReadOnly(BrushlessGimbalSettingsHandle()); }

static inline uint16_t BrushlessGimbalSettingsGetNumInstances(){ return UAVObjGetNumInstances(BrushlessGimbalSettingsHandle()); }

static inline uint32_t BrushlessGimbalSettingsGetNumBytes(){ return UAVObjGetNumBytes(BrushlessGimbalSettingsHandle()); }

// Field information
// Field Damping information
/* Array element names for field Damping */
typedef enum { BRUSHLESSGIMBALSETTINGS_DAMPING_ROLL=0, BRUSHLESSGIMBALSETTINGS_DAMPING_PITCH=1, BRUSHLESSGIMBALSETTINGS_DAMPING_YAW=2 } __attribute__((packed)) BrushlessGimbalSettingsDampingElem;
/* Number of elements for field Damping */
#define BRUSHLESSGIMBALSETTINGS_DAMPING_NUMELEM 3
// Field MaxDPS information
/* Array element names for field MaxDPS */
typedef enum { BRUSHLESSGIMBALSETTINGS_MAXDPS_ROLL=0, BRUSHLESSGIMBALSETTINGS_MAXDPS_PITCH=1, BRUSHLESSGIMBALSETTINGS_MAXDPS_YAW=2 } __attribute__((packed)) BrushlessGimbalSettingsMaxDPSElem;
/* Number of elements for field MaxDPS */
#define BRUSHLESSGIMBALSETTINGS_MAXDPS_NUMELEM 3
// Field SlewLimit information
/* Array element names for field SlewLimit */
typedef enum { BRUSHLESSGIMBALSETTINGS_SLEWLIMIT_ROLL=0, BRUSHLESSGIMBALSETTINGS_SLEWLIMIT_PITCH=1, BRUSHLESSGIMBALSETTINGS_SLEWLIMIT_YAW=2 } __attribute__((packed)) BrushlessGimbalSettingsSlewLimitElem;
/* Number of elements for field SlewLimit */
#define BRUSHLESSGIMBALSETTINGS_SLEWLIMIT_NUMELEM 3
// Field PowerScale information
/* Array element names for field PowerScale */
typedef enum { BRUSHLESSGIMBALSETTINGS_POWERSCALE_ROLL=0, BRUSHLESSGIMBALSETTINGS_POWERSCALE_PITCH=1, BRUSHLESSGIMBALSETTINGS_POWERSCALE_YAW=2 } __attribute__((packed)) BrushlessGimbalSettingsPowerScaleElem;
/* Number of elements for field PowerScale */
#define BRUSHLESSGIMBALSETTINGS_POWERSCALE_NUMELEM 3


// set/Get functions
extern void BrushlessGimbalSettingsDampingSet( float *NewDamping );
extern void BrushlessGimbalSettingsDampingGet( float *NewDamping );
extern void BrushlessGimbalSettingsMaxDPSSet( uint16_t *NewMaxDPS );
extern void BrushlessGimbalSettingsMaxDPSGet( uint16_t *NewMaxDPS );
extern void BrushlessGimbalSettingsSlewLimitSet( uint16_t *NewSlewLimit );
extern void BrushlessGimbalSettingsSlewLimitGet( uint16_t *NewSlewLimit );
extern void BrushlessGimbalSettingsPowerScaleSet( uint8_t *NewPowerScale );
extern void BrushlessGimbalSettingsPowerScaleGet( uint8_t *NewPowerScale );


#endif // BRUSHLESSGIMBALSETTINGS_H

/**
 * @}
 * @}
 */
