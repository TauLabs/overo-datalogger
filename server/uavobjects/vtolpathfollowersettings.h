/**
 ******************************************************************************
 * @addtogroup UAVObjects OpenPilot UAVObjects
 * @{ 
 * @addtogroup VtolPathFollowerSettings VtolPathFollowerSettings 
 * @brief Settings for the @ref VtolPathFollowerModule
 *
 * Autogenerated files and functions for VtolPathFollowerSettings Object
 
 * @{ 
 *
 * @file       vtolpathfollowersettings.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @author     PhoenixPilot, http://github.com/PhoenixPilot, Copyright (C) 2012
 * @brief      Implementation of the VtolPathFollowerSettings object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: vtolpathfollowersettings.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef VTOLPATHFOLLOWERSETTINGS_H
#define VTOLPATHFOLLOWERSETTINGS_H

// Object constants
#define VTOLPATHFOLLOWERSETTINGS_OBJID 0xAD46C8E6
#define VTOLPATHFOLLOWERSETTINGS_ISSINGLEINST 1
#define VTOLPATHFOLLOWERSETTINGS_ISSETTINGS 1
#define VTOLPATHFOLLOWERSETTINGS_NUMBYTES 87

// Generic interface functions
int32_t VtolPathFollowerSettingsInitialize();
UAVObjHandle VtolPathFollowerSettingsHandle();
void VtolPathFollowerSettingsSetDefaults(UAVObjHandle obj, uint16_t instId);

// Object data
typedef struct {
    float HorizontalPosPI[3];
    float HorizontalVelPID[4];
    float VerticalPosPI[3];
    float VerticalVelPID[4];
    float VelocityFeedforward;
    float MaxRollPitch;
    int32_t UpdatePeriod;
    float LandingRate;
    float TakeoffRate;
    float HoverThrottle;
    uint16_t HorizontalVelMax;
    uint16_t VerticalVelMax;
    uint8_t GuidanceMode;
    uint8_t ThrottleControl;
    uint8_t YawMode;

} __attribute__((packed)) __attribute__((aligned(4))) VtolPathFollowerSettingsData;

// Typesafe Object access functions
/**
 * @function VtolPathFollowerSettingsGet(dataOut)
 * @brief Populate a VtolPathFollowerSettingsData object
 * @param[out] dataOut 
 */
static inline int32_t VtolPathFollowerSettingsGet(VtolPathFollowerSettingsData *dataOut) { return UAVObjGetData(VtolPathFollowerSettingsHandle(), dataOut); }

static inline int32_t VtolPathFollowerSettingsSet(const VtolPathFollowerSettingsData *dataIn) { return UAVObjSetData(VtolPathFollowerSettingsHandle(), dataIn); }

static inline int32_t VtolPathFollowerSettingsInstGet(uint16_t instId, VtolPathFollowerSettingsData *dataOut) { return UAVObjGetInstanceData(VtolPathFollowerSettingsHandle(), instId, dataOut); }

static inline int32_t VtolPathFollowerSettingsInstSet(uint16_t instId, const VtolPathFollowerSettingsData *dataIn) { return UAVObjSetInstanceData(VtolPathFollowerSettingsHandle(), instId, dataIn); }

static inline int32_t VtolPathFollowerSettingsConnectQueue(xQueueHandle queue) { return UAVObjConnectQueue(VtolPathFollowerSettingsHandle(), queue, EV_MASK_ALL_UPDATES); }

static inline int32_t VtolPathFollowerSettingsConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(VtolPathFollowerSettingsHandle(), cb, EV_MASK_ALL_UPDATES); }

static inline uint16_t VtolPathFollowerSettingsCreateInstance() { return UAVObjCreateInstance(VtolPathFollowerSettingsHandle(), &VtolPathFollowerSettingsSetDefaults); }

static inline void VtolPathFollowerSettingsRequestUpdate() { UAVObjRequestUpdate(VtolPathFollowerSettingsHandle()); }

static inline void VtolPathFollowerSettingsRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(VtolPathFollowerSettingsHandle(), instId); }

static inline void VtolPathFollowerSettingsUpdated() { UAVObjUpdated(VtolPathFollowerSettingsHandle()); }

static inline void VtolPathFollowerSettingsInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(VtolPathFollowerSettingsHandle(), instId); }

static inline int32_t VtolPathFollowerSettingsGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(VtolPathFollowerSettingsHandle(), dataOut); }

static inline int32_t VtolPathFollowerSettingsSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(VtolPathFollowerSettingsHandle(), dataIn); }

static inline int8_t VtolPathFollowerSettingsReadOnly() { return UAVObjReadOnly(VtolPathFollowerSettingsHandle()); }

// Field information
// Field HorizontalPosPI information
/* Array element names for field HorizontalPosPI */
typedef enum { VTOLPATHFOLLOWERSETTINGS_HORIZONTALPOSPI_KP=0, VTOLPATHFOLLOWERSETTINGS_HORIZONTALPOSPI_KI=1, VTOLPATHFOLLOWERSETTINGS_HORIZONTALPOSPI_ILIMIT=2 } VtolPathFollowerSettingsHorizontalPosPIElem;
/* Number of elements for field HorizontalPosPI */
#define VTOLPATHFOLLOWERSETTINGS_HORIZONTALPOSPI_NUMELEM 3
// Field HorizontalVelPID information
/* Array element names for field HorizontalVelPID */
typedef enum { VTOLPATHFOLLOWERSETTINGS_HORIZONTALVELPID_KP=0, VTOLPATHFOLLOWERSETTINGS_HORIZONTALVELPID_KI=1, VTOLPATHFOLLOWERSETTINGS_HORIZONTALVELPID_KD=2, VTOLPATHFOLLOWERSETTINGS_HORIZONTALVELPID_ILIMIT=3 } VtolPathFollowerSettingsHorizontalVelPIDElem;
/* Number of elements for field HorizontalVelPID */
#define VTOLPATHFOLLOWERSETTINGS_HORIZONTALVELPID_NUMELEM 4
// Field VerticalPosPI information
/* Array element names for field VerticalPosPI */
typedef enum { VTOLPATHFOLLOWERSETTINGS_VERTICALPOSPI_KP=0, VTOLPATHFOLLOWERSETTINGS_VERTICALPOSPI_KI=1, VTOLPATHFOLLOWERSETTINGS_VERTICALPOSPI_ILIMIT=2 } VtolPathFollowerSettingsVerticalPosPIElem;
/* Number of elements for field VerticalPosPI */
#define VTOLPATHFOLLOWERSETTINGS_VERTICALPOSPI_NUMELEM 3
// Field VerticalVelPID information
/* Array element names for field VerticalVelPID */
typedef enum { VTOLPATHFOLLOWERSETTINGS_VERTICALVELPID_KP=0, VTOLPATHFOLLOWERSETTINGS_VERTICALVELPID_KI=1, VTOLPATHFOLLOWERSETTINGS_VERTICALVELPID_KD=2, VTOLPATHFOLLOWERSETTINGS_VERTICALVELPID_ILIMIT=3 } VtolPathFollowerSettingsVerticalVelPIDElem;
/* Number of elements for field VerticalVelPID */
#define VTOLPATHFOLLOWERSETTINGS_VERTICALVELPID_NUMELEM 4
// Field VelocityFeedforward information
// Field MaxRollPitch information
// Field UpdatePeriod information
// Field LandingRate information
// Field TakeoffRate information
// Field HoverThrottle information
// Field HorizontalVelMax information
// Field VerticalVelMax information
// Field GuidanceMode information
/* Enumeration options for field GuidanceMode */
typedef enum { VTOLPATHFOLLOWERSETTINGS_GUIDANCEMODE_DUAL_LOOP=0, VTOLPATHFOLLOWERSETTINGS_GUIDANCEMODE_VELOCITY_CONTROL=1 } VtolPathFollowerSettingsGuidanceModeOptions;
// Field ThrottleControl information
/* Enumeration options for field ThrottleControl */
typedef enum { VTOLPATHFOLLOWERSETTINGS_THROTTLECONTROL_FALSE=0, VTOLPATHFOLLOWERSETTINGS_THROTTLECONTROL_TRUE=1 } VtolPathFollowerSettingsThrottleControlOptions;
// Field YawMode information
/* Enumeration options for field YawMode */
typedef enum { VTOLPATHFOLLOWERSETTINGS_YAWMODE_RATE=0, VTOLPATHFOLLOWERSETTINGS_YAWMODE_AXISLOCK=1, VTOLPATHFOLLOWERSETTINGS_YAWMODE_ATTITUDE=2, VTOLPATHFOLLOWERSETTINGS_YAWMODE_POI=3 } VtolPathFollowerSettingsYawModeOptions;


// set/Get functions
extern void VtolPathFollowerSettingsHorizontalPosPISet( float *NewHorizontalPosPI );
extern void VtolPathFollowerSettingsHorizontalPosPIGet( float *NewHorizontalPosPI );
extern void VtolPathFollowerSettingsHorizontalVelPIDSet( float *NewHorizontalVelPID );
extern void VtolPathFollowerSettingsHorizontalVelPIDGet( float *NewHorizontalVelPID );
extern void VtolPathFollowerSettingsVerticalPosPISet( float *NewVerticalPosPI );
extern void VtolPathFollowerSettingsVerticalPosPIGet( float *NewVerticalPosPI );
extern void VtolPathFollowerSettingsVerticalVelPIDSet( float *NewVerticalVelPID );
extern void VtolPathFollowerSettingsVerticalVelPIDGet( float *NewVerticalVelPID );
extern void VtolPathFollowerSettingsVelocityFeedforwardSet( float *NewVelocityFeedforward );
extern void VtolPathFollowerSettingsVelocityFeedforwardGet( float *NewVelocityFeedforward );
extern void VtolPathFollowerSettingsMaxRollPitchSet( float *NewMaxRollPitch );
extern void VtolPathFollowerSettingsMaxRollPitchGet( float *NewMaxRollPitch );
extern void VtolPathFollowerSettingsUpdatePeriodSet( int32_t *NewUpdatePeriod );
extern void VtolPathFollowerSettingsUpdatePeriodGet( int32_t *NewUpdatePeriod );
extern void VtolPathFollowerSettingsLandingRateSet( float *NewLandingRate );
extern void VtolPathFollowerSettingsLandingRateGet( float *NewLandingRate );
extern void VtolPathFollowerSettingsTakeoffRateSet( float *NewTakeoffRate );
extern void VtolPathFollowerSettingsTakeoffRateGet( float *NewTakeoffRate );
extern void VtolPathFollowerSettingsHoverThrottleSet( float *NewHoverThrottle );
extern void VtolPathFollowerSettingsHoverThrottleGet( float *NewHoverThrottle );
extern void VtolPathFollowerSettingsHorizontalVelMaxSet( uint16_t *NewHorizontalVelMax );
extern void VtolPathFollowerSettingsHorizontalVelMaxGet( uint16_t *NewHorizontalVelMax );
extern void VtolPathFollowerSettingsVerticalVelMaxSet( uint16_t *NewVerticalVelMax );
extern void VtolPathFollowerSettingsVerticalVelMaxGet( uint16_t *NewVerticalVelMax );
extern void VtolPathFollowerSettingsGuidanceModeSet( uint8_t *NewGuidanceMode );
extern void VtolPathFollowerSettingsGuidanceModeGet( uint8_t *NewGuidanceMode );
extern void VtolPathFollowerSettingsThrottleControlSet( uint8_t *NewThrottleControl );
extern void VtolPathFollowerSettingsThrottleControlGet( uint8_t *NewThrottleControl );
extern void VtolPathFollowerSettingsYawModeSet( uint8_t *NewYawMode );
extern void VtolPathFollowerSettingsYawModeGet( uint8_t *NewYawMode );


#endif // VTOLPATHFOLLOWERSETTINGS_H

/**
 * @}
 * @}
 */
