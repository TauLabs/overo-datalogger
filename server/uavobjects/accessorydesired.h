/**
 ******************************************************************************
 * @addtogroup UAVObjects UAVObject set for this firmware
 * @{
 * @addtogroup AccessoryDesired AccessoryDesired
 * @brief Desired Auxillary actuator settings.  Comes from @ref ManualControlModule.
 *
 *
 * @file       accessorydesired.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @author     Tau Labs, http://taulabs.org, Copyright (C) 2012-2013
 * @brief      Include files for the AccessoryDesired object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: accessorydesired.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef ACCESSORYDESIRED_H
#define ACCESSORYDESIRED_H

// Object constants
#define ACCESSORYDESIRED_OBJID 0xC409985A
#define ACCESSORYDESIRED_ISSINGLEINST 0
#define ACCESSORYDESIRED_ISSETTINGS 0
#define ACCESSORYDESIRED_NUMBYTES 4

// Generic interface functions
int32_t AccessoryDesiredInitialize();
UAVObjHandle AccessoryDesiredHandle();
void AccessoryDesiredSetDefaults(UAVObjHandle obj, uint16_t instId);

// Object data
typedef struct {
    float AccessoryVal;

} __attribute__((packed)) __attribute__((aligned(4))) AccessoryDesiredData;

// Typesafe Object access functions
/**
 * @function AccessoryDesiredGet(dataOut)
 * @brief Populate a AccessoryDesiredData object
 * @param[out] dataOut 
 */
static inline int32_t AccessoryDesiredGet(AccessoryDesiredData *dataOut) { return UAVObjGetData(AccessoryDesiredHandle(), dataOut); }

static inline int32_t AccessoryDesiredSet(const AccessoryDesiredData *dataIn) { return UAVObjSetData(AccessoryDesiredHandle(), dataIn); }

static inline int32_t AccessoryDesiredInstGet(uint16_t instId, AccessoryDesiredData *dataOut) { return UAVObjGetInstanceData(AccessoryDesiredHandle(), instId, dataOut); }

static inline int32_t AccessoryDesiredInstSet(uint16_t instId, const AccessoryDesiredData *dataIn) { return UAVObjSetInstanceData(AccessoryDesiredHandle(), instId, dataIn); }

static inline int32_t AccessoryDesiredConnectQueue(xQueueHandle queue) { return UAVObjConnectQueue(AccessoryDesiredHandle(), queue, EV_MASK_ALL_UPDATES); }

static inline int32_t AccessoryDesiredConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(AccessoryDesiredHandle(), cb, EV_MASK_ALL_UPDATES); }

static inline uint16_t AccessoryDesiredCreateInstance() { return UAVObjCreateInstance(AccessoryDesiredHandle(), &AccessoryDesiredSetDefaults); }

static inline void AccessoryDesiredRequestUpdate() { UAVObjRequestUpdate(AccessoryDesiredHandle()); }

static inline void AccessoryDesiredRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(AccessoryDesiredHandle(), instId); }

static inline void AccessoryDesiredUpdated() { UAVObjUpdated(AccessoryDesiredHandle()); }

static inline void AccessoryDesiredInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(AccessoryDesiredHandle(), instId); }

static inline int32_t AccessoryDesiredGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(AccessoryDesiredHandle(), dataOut); }

static inline int32_t AccessoryDesiredSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(AccessoryDesiredHandle(), dataIn); }

static inline int8_t AccessoryDesiredReadOnly() { return UAVObjReadOnly(AccessoryDesiredHandle()); }

static inline uint16_t AccessoryDesiredGetNumInstances(){ return UAVObjGetNumInstances(AccessoryDesiredHandle()); }

static inline uint32_t AccessoryDesiredGetNumBytes(){ return UAVObjGetNumBytes(AccessoryDesiredHandle()); }

// Field information
// Field AccessoryVal information


// set/Get functions
extern void AccessoryDesiredAccessoryValSet( float *NewAccessoryVal );
extern void AccessoryDesiredAccessoryValGet( float *NewAccessoryVal );


#endif // ACCESSORYDESIRED_H

/**
 * @}
 * @}
 */
