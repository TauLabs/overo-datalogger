/**
 ******************************************************************************
 * @addtogroup UAVObjects UAVObject set for this firmware
 * @{
 * @addtogroup HwQuanton HwQuanton
 * @brief Selection of optional hardware configurations.
 *
 *
 * @file       hwquanton.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @author     Tau Labs, http://taulabs.org, Copyright (C) 2012-2013
 * @brief      Include files for the HwQuanton object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: hwquanton.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef HWQUANTON_H
#define HWQUANTON_H

// Object constants
#define HWQUANTON_OBJID 0x6D5B8FAE
#define HWQUANTON_ISSINGLEINST 1
#define HWQUANTON_ISSETTINGS 1
#define HWQUANTON_NUMBYTES 15

// Generic interface functions
int32_t HwQuantonInitialize();
UAVObjHandle HwQuantonHandle();
void HwQuantonSetDefaults(UAVObjHandle obj, uint16_t instId);

// Object data
typedef struct {
    uint8_t RcvrPort;
    uint8_t Uart1;
    uint8_t Uart2;
    uint8_t Uart3;
    uint8_t Uart4;
    uint8_t Uart5;
    uint8_t USB_HIDPort;
    uint8_t USB_VCPPort;
    uint8_t DSMxBind;
    uint8_t GyroRange;
    uint8_t AccelRange;
    uint8_t MPU6000Rate;
    uint8_t MPU6000DLPF;
    uint8_t Magnetometer;
    uint8_t ExtMagOrientation;

} __attribute__((packed)) __attribute__((aligned(4))) HwQuantonData;

// Typesafe Object access functions
/**
 * @function HwQuantonGet(dataOut)
 * @brief Populate a HwQuantonData object
 * @param[out] dataOut 
 */
static inline int32_t HwQuantonGet(HwQuantonData *dataOut) { return UAVObjGetData(HwQuantonHandle(), dataOut); }

static inline int32_t HwQuantonSet(const HwQuantonData *dataIn) { return UAVObjSetData(HwQuantonHandle(), dataIn); }

static inline int32_t HwQuantonInstGet(uint16_t instId, HwQuantonData *dataOut) { return UAVObjGetInstanceData(HwQuantonHandle(), instId, dataOut); }

static inline int32_t HwQuantonInstSet(uint16_t instId, const HwQuantonData *dataIn) { return UAVObjSetInstanceData(HwQuantonHandle(), instId, dataIn); }

static inline int32_t HwQuantonConnectQueue(xQueueHandle queue) { return UAVObjConnectQueue(HwQuantonHandle(), queue, EV_MASK_ALL_UPDATES); }

static inline int32_t HwQuantonConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(HwQuantonHandle(), cb, EV_MASK_ALL_UPDATES); }

static inline uint16_t HwQuantonCreateInstance() { return UAVObjCreateInstance(HwQuantonHandle(), &HwQuantonSetDefaults); }

static inline void HwQuantonRequestUpdate() { UAVObjRequestUpdate(HwQuantonHandle()); }

static inline void HwQuantonRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(HwQuantonHandle(), instId); }

static inline void HwQuantonUpdated() { UAVObjUpdated(HwQuantonHandle()); }

static inline void HwQuantonInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(HwQuantonHandle(), instId); }

static inline int32_t HwQuantonGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(HwQuantonHandle(), dataOut); }

static inline int32_t HwQuantonSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(HwQuantonHandle(), dataIn); }

static inline int8_t HwQuantonReadOnly() { return UAVObjReadOnly(HwQuantonHandle()); }

static inline uint16_t HwQuantonGetNumInstances(){ return UAVObjGetNumInstances(HwQuantonHandle()); }

static inline uint32_t HwQuantonGetNumBytes(){ return UAVObjGetNumBytes(HwQuantonHandle()); }

// Field information
// Field RcvrPort information
/* Enumeration options for field RcvrPort */
typedef enum { HWQUANTON_RCVRPORT_DISABLED=0, HWQUANTON_RCVRPORT_PWM=1, HWQUANTON_RCVRPORT_PWMADC=2, HWQUANTON_RCVRPORT_PPM=3, HWQUANTON_RCVRPORT_PPMADC=4, HWQUANTON_RCVRPORT_PPMPWM=5, HWQUANTON_RCVRPORT_PPMPWMADC=6, HWQUANTON_RCVRPORT_PPMOUTPUTS=7, HWQUANTON_RCVRPORT_PPMOUTPUTSADC=8, HWQUANTON_RCVRPORT_OUTPUTS=9, HWQUANTON_RCVRPORT_OUTPUTSADC=10 }  __attribute__((packed)) HwQuantonRcvrPortOptions;
// Field Uart1 information
/* Enumeration options for field Uart1 */
typedef enum { HWQUANTON_UART1_DISABLED=0, HWQUANTON_UART1_TELEMETRY=1, HWQUANTON_UART1_GPS=2, HWQUANTON_UART1_I2C=3, HWQUANTON_UART1_DSM2=4, HWQUANTON_UART1_DSMX10BIT=5, HWQUANTON_UART1_DSMX11BIT=6, HWQUANTON_UART1_DEBUGCONSOLE=7, HWQUANTON_UART1_COMBRIDGE=8, HWQUANTON_UART1_MAVLINKTX=9, HWQUANTON_UART1_MAVLINKTX_GPS_RX=10, HWQUANTON_UART1_HOTTSUMD=11, HWQUANTON_UART1_HOTTSUMH=12, HWQUANTON_UART1_HOTTTELEMETRY=13, HWQUANTON_UART1_FRSKYSENSORHUB=14, HWQUANTON_UART1_LIGHTTELEMETRYTX=15, HWQUANTON_UART1_PICOC=16, HWQUANTON_UART1_FRSKYSPORTTELEMETRY=17 }  __attribute__((packed)) HwQuantonUart1Options;
// Field Uart2 information
/* Enumeration options for field Uart2 */
typedef enum { HWQUANTON_UART2_DISABLED=0, HWQUANTON_UART2_TELEMETRY=1, HWQUANTON_UART2_GPS=2, HWQUANTON_UART2_SBUS=3, HWQUANTON_UART2_DSM2=4, HWQUANTON_UART2_DSMX10BIT=5, HWQUANTON_UART2_DSMX11BIT=6, HWQUANTON_UART2_DEBUGCONSOLE=7, HWQUANTON_UART2_COMBRIDGE=8, HWQUANTON_UART2_MAVLINKTX=9, HWQUANTON_UART2_MAVLINKTX_GPS_RX=10, HWQUANTON_UART2_HOTTSUMD=11, HWQUANTON_UART2_HOTTSUMH=12, HWQUANTON_UART2_HOTTTELEMETRY=13, HWQUANTON_UART2_FRSKYSENSORHUB=14, HWQUANTON_UART2_LIGHTTELEMETRYTX=15, HWQUANTON_UART2_PICOC=16, HWQUANTON_UART2_FRSKYSPORTTELEMETRY=17 }  __attribute__((packed)) HwQuantonUart2Options;
// Field Uart3 information
/* Enumeration options for field Uart3 */
typedef enum { HWQUANTON_UART3_DISABLED=0, HWQUANTON_UART3_TELEMETRY=1, HWQUANTON_UART3_GPS=2, HWQUANTON_UART3_I2C=3, HWQUANTON_UART3_DSM2=4, HWQUANTON_UART3_DSMX10BIT=5, HWQUANTON_UART3_DSMX11BIT=6, HWQUANTON_UART3_DEBUGCONSOLE=7, HWQUANTON_UART3_COMBRIDGE=8, HWQUANTON_UART3_MAVLINKTX=9, HWQUANTON_UART3_MAVLINKTX_GPS_RX=10, HWQUANTON_UART3_HOTTSUMD=11, HWQUANTON_UART3_HOTTSUMH=12, HWQUANTON_UART3_HOTTTELEMETRY=13, HWQUANTON_UART3_FRSKYSENSORHUB=14, HWQUANTON_UART3_LIGHTTELEMETRYTX=15, HWQUANTON_UART3_PICOC=16, HWQUANTON_UART3_FRSKYSPORTTELEMETRY=17 }  __attribute__((packed)) HwQuantonUart3Options;
// Field Uart4 information
/* Enumeration options for field Uart4 */
typedef enum { HWQUANTON_UART4_DISABLED=0, HWQUANTON_UART4_TELEMETRY=1, HWQUANTON_UART4_GPS=2, HWQUANTON_UART4_DSM2=3, HWQUANTON_UART4_DSMX10BIT=4, HWQUANTON_UART4_DSMX11BIT=5, HWQUANTON_UART4_DEBUGCONSOLE=6, HWQUANTON_UART4_COMBRIDGE=7, HWQUANTON_UART4_MAVLINKTX=8, HWQUANTON_UART4_MAVLINKTX_GPS_RX=9, HWQUANTON_UART4_HOTTSUMD=10, HWQUANTON_UART4_HOTTSUMH=11, HWQUANTON_UART4_HOTTTELEMETRY=12, HWQUANTON_UART4_LIGHTTELEMETRYTX=13, HWQUANTON_UART4_FRSKYSENSORHUB=14, HWQUANTON_UART4_PICOC=15, HWQUANTON_UART4_FRSKYSPORTTELEMETRY=16 }  __attribute__((packed)) HwQuantonUart4Options;
// Field Uart5 information
/* Enumeration options for field Uart5 */
typedef enum { HWQUANTON_UART5_DISABLED=0, HWQUANTON_UART5_TELEMETRY=1, HWQUANTON_UART5_GPS=2, HWQUANTON_UART5_DSM2=3, HWQUANTON_UART5_DSMX10BIT=4, HWQUANTON_UART5_DSMX11BIT=5, HWQUANTON_UART5_DEBUGCONSOLE=6, HWQUANTON_UART5_COMBRIDGE=7, HWQUANTON_UART5_MAVLINKTX=8, HWQUANTON_UART5_MAVLINKTX_GPS_RX=9, HWQUANTON_UART5_HOTTSUMD=10, HWQUANTON_UART5_HOTTSUMH=11, HWQUANTON_UART5_HOTTTELEMETRY=12, HWQUANTON_UART5_FRSKYSENSORHUB=13, HWQUANTON_UART5_LIGHTTELEMETRYTX=14, HWQUANTON_UART5_PICOC=15, HWQUANTON_UART5_FRSKYSPORTTELEMETRY=16 }  __attribute__((packed)) HwQuantonUart5Options;
// Field USB_HIDPort information
/* Enumeration options for field USB_HIDPort */
typedef enum { HWQUANTON_USB_HIDPORT_USBTELEMETRY=0, HWQUANTON_USB_HIDPORT_RCTRANSMITTER=1, HWQUANTON_USB_HIDPORT_DISABLED=2 }  __attribute__((packed)) HwQuantonUSB_HIDPortOptions;
// Field USB_VCPPort information
/* Enumeration options for field USB_VCPPort */
typedef enum { HWQUANTON_USB_VCPPORT_USBTELEMETRY=0, HWQUANTON_USB_VCPPORT_COMBRIDGE=1, HWQUANTON_USB_VCPPORT_DEBUGCONSOLE=2, HWQUANTON_USB_VCPPORT_PICOC=3, HWQUANTON_USB_VCPPORT_DISABLED=4 }  __attribute__((packed)) HwQuantonUSB_VCPPortOptions;
// Field DSMxBind information
// Field GyroRange information
/* Enumeration options for field GyroRange */
typedef enum { HWQUANTON_GYRORANGE_250=0, HWQUANTON_GYRORANGE_500=1, HWQUANTON_GYRORANGE_1000=2, HWQUANTON_GYRORANGE_2000=3 }  __attribute__((packed)) HwQuantonGyroRangeOptions;
// Field AccelRange information
/* Enumeration options for field AccelRange */
typedef enum { HWQUANTON_ACCELRANGE_2G=0, HWQUANTON_ACCELRANGE_4G=1, HWQUANTON_ACCELRANGE_8G=2, HWQUANTON_ACCELRANGE_16G=3 }  __attribute__((packed)) HwQuantonAccelRangeOptions;
// Field MPU6000Rate information
/* Enumeration options for field MPU6000Rate */
typedef enum { HWQUANTON_MPU6000RATE_200=0, HWQUANTON_MPU6000RATE_333=1, HWQUANTON_MPU6000RATE_500=2, HWQUANTON_MPU6000RATE_666=3, HWQUANTON_MPU6000RATE_1000=4, HWQUANTON_MPU6000RATE_2000=5, HWQUANTON_MPU6000RATE_4000=6, HWQUANTON_MPU6000RATE_8000=7 }  __attribute__((packed)) HwQuantonMPU6000RateOptions;
// Field MPU6000DLPF information
/* Enumeration options for field MPU6000DLPF */
typedef enum { HWQUANTON_MPU6000DLPF_256=0, HWQUANTON_MPU6000DLPF_188=1, HWQUANTON_MPU6000DLPF_98=2, HWQUANTON_MPU6000DLPF_42=3, HWQUANTON_MPU6000DLPF_20=4, HWQUANTON_MPU6000DLPF_10=5, HWQUANTON_MPU6000DLPF_5=6 }  __attribute__((packed)) HwQuantonMPU6000DLPFOptions;
// Field Magnetometer information
/* Enumeration options for field Magnetometer */
typedef enum { HWQUANTON_MAGNETOMETER_DISABLED=0, HWQUANTON_MAGNETOMETER_INTERNAL=1, HWQUANTON_MAGNETOMETER_EXTERNALI2CUART1=2, HWQUANTON_MAGNETOMETER_EXTERNALI2CUART3=3 }  __attribute__((packed)) HwQuantonMagnetometerOptions;
// Field ExtMagOrientation information
/* Enumeration options for field ExtMagOrientation */
typedef enum { HWQUANTON_EXTMAGORIENTATION_TOP0DEGCW=0, HWQUANTON_EXTMAGORIENTATION_TOP90DEGCW=1, HWQUANTON_EXTMAGORIENTATION_TOP180DEGCW=2, HWQUANTON_EXTMAGORIENTATION_TOP270DEGCW=3, HWQUANTON_EXTMAGORIENTATION_BOTTOM0DEGCW=4, HWQUANTON_EXTMAGORIENTATION_BOTTOM90DEGCW=5, HWQUANTON_EXTMAGORIENTATION_BOTTOM180DEGCW=6, HWQUANTON_EXTMAGORIENTATION_BOTTOM270DEGCW=7 }  __attribute__((packed)) HwQuantonExtMagOrientationOptions;


// set/Get functions
extern void HwQuantonRcvrPortSet( uint8_t *NewRcvrPort );
extern void HwQuantonRcvrPortGet( uint8_t *NewRcvrPort );
extern void HwQuantonUart1Set( uint8_t *NewUart1 );
extern void HwQuantonUart1Get( uint8_t *NewUart1 );
extern void HwQuantonUart2Set( uint8_t *NewUart2 );
extern void HwQuantonUart2Get( uint8_t *NewUart2 );
extern void HwQuantonUart3Set( uint8_t *NewUart3 );
extern void HwQuantonUart3Get( uint8_t *NewUart3 );
extern void HwQuantonUart4Set( uint8_t *NewUart4 );
extern void HwQuantonUart4Get( uint8_t *NewUart4 );
extern void HwQuantonUart5Set( uint8_t *NewUart5 );
extern void HwQuantonUart5Get( uint8_t *NewUart5 );
extern void HwQuantonUSB_HIDPortSet( uint8_t *NewUSB_HIDPort );
extern void HwQuantonUSB_HIDPortGet( uint8_t *NewUSB_HIDPort );
extern void HwQuantonUSB_VCPPortSet( uint8_t *NewUSB_VCPPort );
extern void HwQuantonUSB_VCPPortGet( uint8_t *NewUSB_VCPPort );
extern void HwQuantonDSMxBindSet( uint8_t *NewDSMxBind );
extern void HwQuantonDSMxBindGet( uint8_t *NewDSMxBind );
extern void HwQuantonGyroRangeSet( uint8_t *NewGyroRange );
extern void HwQuantonGyroRangeGet( uint8_t *NewGyroRange );
extern void HwQuantonAccelRangeSet( uint8_t *NewAccelRange );
extern void HwQuantonAccelRangeGet( uint8_t *NewAccelRange );
extern void HwQuantonMPU6000RateSet( uint8_t *NewMPU6000Rate );
extern void HwQuantonMPU6000RateGet( uint8_t *NewMPU6000Rate );
extern void HwQuantonMPU6000DLPFSet( uint8_t *NewMPU6000DLPF );
extern void HwQuantonMPU6000DLPFGet( uint8_t *NewMPU6000DLPF );
extern void HwQuantonMagnetometerSet( uint8_t *NewMagnetometer );
extern void HwQuantonMagnetometerGet( uint8_t *NewMagnetometer );
extern void HwQuantonExtMagOrientationSet( uint8_t *NewExtMagOrientation );
extern void HwQuantonExtMagOrientationGet( uint8_t *NewExtMagOrientation );


#endif // HWQUANTON_H

/**
 * @}
 * @}
 */
