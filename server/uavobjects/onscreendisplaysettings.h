/**
 ******************************************************************************
 * @addtogroup UAVObjects UAVObject set for this firmware
 * @{
 * @addtogroup OnScreenDisplaySettings OnScreenDisplaySettings
 * @brief On Sreen Display Settings
 *
 *
 * @file       onscreendisplaysettings.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @author     Tau Labs, http://taulabs.org, Copyright (C) 2012-2013
 * @brief      Include files for the OnScreenDisplaySettings object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: onscreendisplaysettings.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef ONSCREENDISPLAYSETTINGS_H
#define ONSCREENDISPLAYSETTINGS_H

// Object constants
#define ONSCREENDISPLAYSETTINGS_OBJID 0x3B5C4D04
#define ONSCREENDISPLAYSETTINGS_ISSINGLEINST 1
#define ONSCREENDISPLAYSETTINGS_ISSETTINGS 1
#define ONSCREENDISPLAYSETTINGS_NUMBYTES 16

// Generic interface functions
int32_t OnScreenDisplaySettingsInitialize();
UAVObjHandle OnScreenDisplaySettingsHandle();
void OnScreenDisplaySettingsSetDefaults(UAVObjHandle obj, uint16_t instId);

// Object data
typedef struct {
    uint8_t OSDEnabled;
    uint8_t Units;
    uint8_t PALWhite;
    uint8_t PALBlack;
    uint8_t NTSCWhite;
    uint8_t NTSCBlack;
    int8_t XOffset;
    int8_t YOffset;
    int8_t NumPages;
    uint8_t PageSwitch;
    uint8_t PageConfig[6];

} __attribute__((packed)) __attribute__((aligned(4))) OnScreenDisplaySettingsData;

// Typesafe Object access functions
/**
 * @function OnScreenDisplaySettingsGet(dataOut)
 * @brief Populate a OnScreenDisplaySettingsData object
 * @param[out] dataOut 
 */
static inline int32_t OnScreenDisplaySettingsGet(OnScreenDisplaySettingsData *dataOut) { return UAVObjGetData(OnScreenDisplaySettingsHandle(), dataOut); }

static inline int32_t OnScreenDisplaySettingsSet(const OnScreenDisplaySettingsData *dataIn) { return UAVObjSetData(OnScreenDisplaySettingsHandle(), dataIn); }

static inline int32_t OnScreenDisplaySettingsInstGet(uint16_t instId, OnScreenDisplaySettingsData *dataOut) { return UAVObjGetInstanceData(OnScreenDisplaySettingsHandle(), instId, dataOut); }

static inline int32_t OnScreenDisplaySettingsInstSet(uint16_t instId, const OnScreenDisplaySettingsData *dataIn) { return UAVObjSetInstanceData(OnScreenDisplaySettingsHandle(), instId, dataIn); }

static inline int32_t OnScreenDisplaySettingsConnectQueue(xQueueHandle queue) { return UAVObjConnectQueue(OnScreenDisplaySettingsHandle(), queue, EV_MASK_ALL_UPDATES); }

static inline int32_t OnScreenDisplaySettingsConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(OnScreenDisplaySettingsHandle(), cb, EV_MASK_ALL_UPDATES); }

static inline uint16_t OnScreenDisplaySettingsCreateInstance() { return UAVObjCreateInstance(OnScreenDisplaySettingsHandle(), &OnScreenDisplaySettingsSetDefaults); }

static inline void OnScreenDisplaySettingsRequestUpdate() { UAVObjRequestUpdate(OnScreenDisplaySettingsHandle()); }

static inline void OnScreenDisplaySettingsRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(OnScreenDisplaySettingsHandle(), instId); }

static inline void OnScreenDisplaySettingsUpdated() { UAVObjUpdated(OnScreenDisplaySettingsHandle()); }

static inline void OnScreenDisplaySettingsInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(OnScreenDisplaySettingsHandle(), instId); }

static inline int32_t OnScreenDisplaySettingsGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(OnScreenDisplaySettingsHandle(), dataOut); }

static inline int32_t OnScreenDisplaySettingsSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(OnScreenDisplaySettingsHandle(), dataIn); }

static inline int8_t OnScreenDisplaySettingsReadOnly() { return UAVObjReadOnly(OnScreenDisplaySettingsHandle()); }

static inline uint16_t OnScreenDisplaySettingsGetNumInstances(){ return UAVObjGetNumInstances(OnScreenDisplaySettingsHandle()); }

static inline uint32_t OnScreenDisplaySettingsGetNumBytes(){ return UAVObjGetNumBytes(OnScreenDisplaySettingsHandle()); }

// Field information
// Field OSDEnabled information
/* Enumeration options for field OSDEnabled */
typedef enum { ONSCREENDISPLAYSETTINGS_OSDENABLED_DISABLED=0, ONSCREENDISPLAYSETTINGS_OSDENABLED_ENABLED=1 }  __attribute__((packed)) OnScreenDisplaySettingsOSDEnabledOptions;
// Field Units information
/* Enumeration options for field Units */
typedef enum { ONSCREENDISPLAYSETTINGS_UNITS_METRIC=0, ONSCREENDISPLAYSETTINGS_UNITS_IMPERIAL=1 }  __attribute__((packed)) OnScreenDisplaySettingsUnitsOptions;
// Field PALWhite information
// Field PALBlack information
// Field NTSCWhite information
// Field NTSCBlack information
// Field XOffset information
// Field YOffset information
// Field NumPages information
// Field PageSwitch information
/* Enumeration options for field PageSwitch */
typedef enum { ONSCREENDISPLAYSETTINGS_PAGESWITCH_ACCESSORY0=0, ONSCREENDISPLAYSETTINGS_PAGESWITCH_ACCESSORY1=1, ONSCREENDISPLAYSETTINGS_PAGESWITCH_ACCESSORY2=2 }  __attribute__((packed)) OnScreenDisplaySettingsPageSwitchOptions;
// Field PageConfig information
/* Enumeration options for field PageConfig */
typedef enum { ONSCREENDISPLAYSETTINGS_PAGECONFIG_CUSTOM1=0, ONSCREENDISPLAYSETTINGS_PAGECONFIG_CUSTOM2=1, ONSCREENDISPLAYSETTINGS_PAGECONFIG_CUSTOM3=2, ONSCREENDISPLAYSETTINGS_PAGECONFIG_CUSTOM4=3, ONSCREENDISPLAYSETTINGS_PAGECONFIG_OFF=4 }  __attribute__((packed)) OnScreenDisplaySettingsPageConfigOptions;
/* Number of elements for field PageConfig */
#define ONSCREENDISPLAYSETTINGS_PAGECONFIG_NUMELEM 6


// set/Get functions
extern void OnScreenDisplaySettingsOSDEnabledSet( uint8_t *NewOSDEnabled );
extern void OnScreenDisplaySettingsOSDEnabledGet( uint8_t *NewOSDEnabled );
extern void OnScreenDisplaySettingsUnitsSet( uint8_t *NewUnits );
extern void OnScreenDisplaySettingsUnitsGet( uint8_t *NewUnits );
extern void OnScreenDisplaySettingsPALWhiteSet( uint8_t *NewPALWhite );
extern void OnScreenDisplaySettingsPALWhiteGet( uint8_t *NewPALWhite );
extern void OnScreenDisplaySettingsPALBlackSet( uint8_t *NewPALBlack );
extern void OnScreenDisplaySettingsPALBlackGet( uint8_t *NewPALBlack );
extern void OnScreenDisplaySettingsNTSCWhiteSet( uint8_t *NewNTSCWhite );
extern void OnScreenDisplaySettingsNTSCWhiteGet( uint8_t *NewNTSCWhite );
extern void OnScreenDisplaySettingsNTSCBlackSet( uint8_t *NewNTSCBlack );
extern void OnScreenDisplaySettingsNTSCBlackGet( uint8_t *NewNTSCBlack );
extern void OnScreenDisplaySettingsXOffsetSet( int8_t *NewXOffset );
extern void OnScreenDisplaySettingsXOffsetGet( int8_t *NewXOffset );
extern void OnScreenDisplaySettingsYOffsetSet( int8_t *NewYOffset );
extern void OnScreenDisplaySettingsYOffsetGet( int8_t *NewYOffset );
extern void OnScreenDisplaySettingsNumPagesSet( int8_t *NewNumPages );
extern void OnScreenDisplaySettingsNumPagesGet( int8_t *NewNumPages );
extern void OnScreenDisplaySettingsPageSwitchSet( uint8_t *NewPageSwitch );
extern void OnScreenDisplaySettingsPageSwitchGet( uint8_t *NewPageSwitch );
extern void OnScreenDisplaySettingsPageConfigSet( uint8_t *NewPageConfig );
extern void OnScreenDisplaySettingsPageConfigGet( uint8_t *NewPageConfig );


#endif // ONSCREENDISPLAYSETTINGS_H

/**
 * @}
 * @}
 */
