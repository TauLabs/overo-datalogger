/**
 ******************************************************************************
 * @addtogroup UAVObjects UAVObject set for this firmware
 * @{
 * @addtogroup MWRateSettings MWRateSettings
 * @brief PID settings used by the MWRate stabilization settings
 *
 *
 * @file       mwratesettings.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @author     Tau Labs, http://taulabs.org, Copyright (C) 2012-2015
 * @brief      Include files for the MWRateSettings object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: mwratesettings.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef MWRATESETTINGS_H
#define MWRATESETTINGS_H

#include "pios_queue.h"
#include "uavoversion.h"



// Object constants
#define MWRATESETTINGS_OBJID 0xBD3B5F28
#define MWRATESETTINGS_ISSINGLEINST 1
#define MWRATESETTINGS_ISSETTINGS 1
#define MWRATESETTINGS_NUMBYTES 54

// Generic interface functions
int32_t MWRateSettingsInitialize();
UAVObjHandle MWRateSettingsHandle();
void MWRateSettingsSetDefaults(UAVObjHandle obj, uint16_t instId);

// Object data
typedef struct {
    float RollRatePID[4];
    float PitchRatePID[4];
    float YawRatePID[4];
    float DerivativeGamma;
    uint8_t RollPitchRate;
    uint8_t YawRate;

} __attribute__((packed)) __attribute__((aligned(4))) MWRateSettingsData;

// Typesafe Object access functions
/**
 * @function MWRateSettingsGet(dataOut)
 * @brief Populate a MWRateSettingsData object
 * @param[out] dataOut 
 */
static inline int32_t MWRateSettingsGet(MWRateSettingsData *dataOut) { return UAVObjGetData(MWRateSettingsHandle(), dataOut); }

static inline int32_t MWRateSettingsSet(const MWRateSettingsData *dataIn) { return UAVObjSetData(MWRateSettingsHandle(), dataIn); }

static inline int32_t MWRateSettingsInstGet(uint16_t instId, MWRateSettingsData *dataOut) { return UAVObjGetInstanceData(MWRateSettingsHandle(), instId, dataOut); }

static inline int32_t MWRateSettingsInstSet(uint16_t instId, const MWRateSettingsData *dataIn) { return UAVObjSetInstanceData(MWRateSettingsHandle(), instId, dataIn); }

static inline int32_t MWRateSettingsConnectQueue(struct pios_queue *queue) { return UAVObjConnectQueue(MWRateSettingsHandle(), queue, EV_MASK_ALL_UPDATES); }

static inline int32_t MWRateSettingsConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(MWRateSettingsHandle(), cb, EV_MASK_ALL_UPDATES); }

static inline uint16_t MWRateSettingsCreateInstance() { return UAVObjCreateInstance(MWRateSettingsHandle(), &MWRateSettingsSetDefaults); }

static inline void MWRateSettingsRequestUpdate() { UAVObjRequestUpdate(MWRateSettingsHandle()); }

static inline void MWRateSettingsRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(MWRateSettingsHandle(), instId); }

static inline void MWRateSettingsUpdated() { UAVObjUpdated(MWRateSettingsHandle()); }

static inline void MWRateSettingsInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(MWRateSettingsHandle(), instId); }

static inline int32_t MWRateSettingsGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(MWRateSettingsHandle(), dataOut); }

static inline int32_t MWRateSettingsSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(MWRateSettingsHandle(), dataIn); }

static inline int8_t MWRateSettingsReadOnly() { return UAVObjReadOnly(MWRateSettingsHandle()); }

static inline uint16_t MWRateSettingsGetNumInstances(){ return UAVObjGetNumInstances(MWRateSettingsHandle()); }

static inline uint32_t MWRateSettingsGetNumBytes(){ return UAVObjGetNumBytes(MWRateSettingsHandle()); }

// Field information
// Field RollRatePID information
/* Array element names for field RollRatePID */
typedef enum { MWRATESETTINGS_ROLLRATEPID_KP=0, MWRATESETTINGS_ROLLRATEPID_KI=1, MWRATESETTINGS_ROLLRATEPID_KD=2, MWRATESETTINGS_ROLLRATEPID_ILIMIT=3 } __attribute__((packed)) MWRateSettingsRollRatePIDElem;
/* Number of elements for field RollRatePID */
#define MWRATESETTINGS_ROLLRATEPID_NUMELEM 4
// Field PitchRatePID information
/* Array element names for field PitchRatePID */
typedef enum { MWRATESETTINGS_PITCHRATEPID_KP=0, MWRATESETTINGS_PITCHRATEPID_KI=1, MWRATESETTINGS_PITCHRATEPID_KD=2, MWRATESETTINGS_PITCHRATEPID_ILIMIT=3 } __attribute__((packed)) MWRateSettingsPitchRatePIDElem;
/* Number of elements for field PitchRatePID */
#define MWRATESETTINGS_PITCHRATEPID_NUMELEM 4
// Field YawRatePID information
/* Array element names for field YawRatePID */
typedef enum { MWRATESETTINGS_YAWRATEPID_KP=0, MWRATESETTINGS_YAWRATEPID_KI=1, MWRATESETTINGS_YAWRATEPID_KD=2, MWRATESETTINGS_YAWRATEPID_ILIMIT=3 } __attribute__((packed)) MWRateSettingsYawRatePIDElem;
/* Number of elements for field YawRatePID */
#define MWRATESETTINGS_YAWRATEPID_NUMELEM 4
// Field DerivativeGamma information
// Field RollPitchRate information
// Field YawRate information


// set/Get functions
extern void MWRateSettingsRollRatePIDSet( float *NewRollRatePID );
extern void MWRateSettingsRollRatePIDGet( float *NewRollRatePID );
extern void MWRateSettingsPitchRatePIDSet( float *NewPitchRatePID );
extern void MWRateSettingsPitchRatePIDGet( float *NewPitchRatePID );
extern void MWRateSettingsYawRatePIDSet( float *NewYawRatePID );
extern void MWRateSettingsYawRatePIDGet( float *NewYawRatePID );
extern void MWRateSettingsDerivativeGammaSet( float *NewDerivativeGamma );
extern void MWRateSettingsDerivativeGammaGet( float *NewDerivativeGamma );
extern void MWRateSettingsRollPitchRateSet( uint8_t *NewRollPitchRate );
extern void MWRateSettingsRollPitchRateGet( uint8_t *NewRollPitchRate );
extern void MWRateSettingsYawRateSet( uint8_t *NewYawRate );
extern void MWRateSettingsYawRateGet( uint8_t *NewYawRate );


#endif // MWRATESETTINGS_H

/**
 * @}
 * @}
 */
