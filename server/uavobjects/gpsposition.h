/**
 ******************************************************************************
 * @addtogroup UAVObjects UAVObject set for this firmware
 * @{
 * @addtogroup GPSPosition GPSPosition
 * @brief Raw GPS data from @ref GPSModule.  Should only be used by @ref AHRSCommsModule.
 *
 *
 * @file       gpsposition.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @author     Tau Labs, http://taulabs.org, Copyright (C) 2012-2013
 * @brief      Include files for the GPSPosition object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: gpsposition.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef GPSPOSITION_H
#define GPSPOSITION_H

// Object constants
#define GPSPOSITION_OBJID 0x40BCC84E
#define GPSPOSITION_ISSINGLEINST 1
#define GPSPOSITION_ISSETTINGS 0
#define GPSPOSITION_NUMBYTES 38

// Generic interface functions
int32_t GPSPositionInitialize();
UAVObjHandle GPSPositionHandle();
void GPSPositionSetDefaults(UAVObjHandle obj, uint16_t instId);

// Object data
typedef struct {
    int32_t Latitude;
    int32_t Longitude;
    float Altitude;
    float GeoidSeparation;
    float Heading;
    float Groundspeed;
    float PDOP;
    float HDOP;
    float VDOP;
    uint8_t Status;
    int8_t Satellites;

} __attribute__((packed)) __attribute__((aligned(4))) GPSPositionData;

// Typesafe Object access functions
/**
 * @function GPSPositionGet(dataOut)
 * @brief Populate a GPSPositionData object
 * @param[out] dataOut 
 */
static inline int32_t GPSPositionGet(GPSPositionData *dataOut) { return UAVObjGetData(GPSPositionHandle(), dataOut); }

static inline int32_t GPSPositionSet(const GPSPositionData *dataIn) { return UAVObjSetData(GPSPositionHandle(), dataIn); }

static inline int32_t GPSPositionInstGet(uint16_t instId, GPSPositionData *dataOut) { return UAVObjGetInstanceData(GPSPositionHandle(), instId, dataOut); }

static inline int32_t GPSPositionInstSet(uint16_t instId, const GPSPositionData *dataIn) { return UAVObjSetInstanceData(GPSPositionHandle(), instId, dataIn); }

static inline int32_t GPSPositionConnectQueue(xQueueHandle queue) { return UAVObjConnectQueue(GPSPositionHandle(), queue, EV_MASK_ALL_UPDATES); }

static inline int32_t GPSPositionConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(GPSPositionHandle(), cb, EV_MASK_ALL_UPDATES); }

static inline uint16_t GPSPositionCreateInstance() { return UAVObjCreateInstance(GPSPositionHandle(), &GPSPositionSetDefaults); }

static inline void GPSPositionRequestUpdate() { UAVObjRequestUpdate(GPSPositionHandle()); }

static inline void GPSPositionRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(GPSPositionHandle(), instId); }

static inline void GPSPositionUpdated() { UAVObjUpdated(GPSPositionHandle()); }

static inline void GPSPositionInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(GPSPositionHandle(), instId); }

static inline int32_t GPSPositionGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(GPSPositionHandle(), dataOut); }

static inline int32_t GPSPositionSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(GPSPositionHandle(), dataIn); }

static inline int8_t GPSPositionReadOnly() { return UAVObjReadOnly(GPSPositionHandle()); }

static inline uint16_t GPSPositionGetNumInstances(){ return UAVObjGetNumInstances(GPSPositionHandle()); }

static inline uint32_t GPSPositionGetNumBytes(){ return UAVObjGetNumBytes(GPSPositionHandle()); }

// Field information
// Field Latitude information
// Field Longitude information
// Field Altitude information
// Field GeoidSeparation information
// Field Heading information
// Field Groundspeed information
// Field PDOP information
// Field HDOP information
// Field VDOP information
// Field Status information
/* Enumeration options for field Status */
typedef enum { GPSPOSITION_STATUS_NOGPS=0, GPSPOSITION_STATUS_NOFIX=1, GPSPOSITION_STATUS_FIX2D=2, GPSPOSITION_STATUS_FIX3D=3, GPSPOSITION_STATUS_DIFF3D=4 }  __attribute__((packed)) GPSPositionStatusOptions;
// Field Satellites information


// set/Get functions
extern void GPSPositionLatitudeSet( int32_t *NewLatitude );
extern void GPSPositionLatitudeGet( int32_t *NewLatitude );
extern void GPSPositionLongitudeSet( int32_t *NewLongitude );
extern void GPSPositionLongitudeGet( int32_t *NewLongitude );
extern void GPSPositionAltitudeSet( float *NewAltitude );
extern void GPSPositionAltitudeGet( float *NewAltitude );
extern void GPSPositionGeoidSeparationSet( float *NewGeoidSeparation );
extern void GPSPositionGeoidSeparationGet( float *NewGeoidSeparation );
extern void GPSPositionHeadingSet( float *NewHeading );
extern void GPSPositionHeadingGet( float *NewHeading );
extern void GPSPositionGroundspeedSet( float *NewGroundspeed );
extern void GPSPositionGroundspeedGet( float *NewGroundspeed );
extern void GPSPositionPDOPSet( float *NewPDOP );
extern void GPSPositionPDOPGet( float *NewPDOP );
extern void GPSPositionHDOPSet( float *NewHDOP );
extern void GPSPositionHDOPGet( float *NewHDOP );
extern void GPSPositionVDOPSet( float *NewVDOP );
extern void GPSPositionVDOPGet( float *NewVDOP );
extern void GPSPositionStatusSet( uint8_t *NewStatus );
extern void GPSPositionStatusGet( uint8_t *NewStatus );
extern void GPSPositionSatellitesSet( int8_t *NewSatellites );
extern void GPSPositionSatellitesGet( int8_t *NewSatellites );


#endif // GPSPOSITION_H

/**
 * @}
 * @}
 */
