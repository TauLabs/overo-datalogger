/**
 ******************************************************************************
 * @addtogroup UAVObjects UAVObject set for this firmware
 * @{
 * @addtogroup HwTauLink HwTauLink
 * @brief TauLink configurations options.
 *
 *
 * @file       hwtaulink.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @author     Tau Labs, http://taulabs.org, Copyright (C) 2012-2015
 * @brief      Include files for the HwTauLink object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: hwtaulink.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef HWTAULINK_H
#define HWTAULINK_H

#include "pios_queue.h"
#include "uavoversion.h"

#include <hwshared.h>


// Object constants
#define HWTAULINK_OBJID 0x86145E56
#define HWTAULINK_ISSINGLEINST 1
#define HWTAULINK_ISSETTINGS 1
#define HWTAULINK_NUMBYTES 15

// Generic interface functions
int32_t HwTauLinkInitialize();
UAVObjHandle HwTauLinkHandle();
void HwTauLinkSetDefaults(UAVObjHandle obj, uint16_t instId);

// Object data
typedef struct {
    uint32_t CoordID;
    uint8_t Radio;
    uint8_t MainPort;
    uint8_t BTPort;
    uint8_t PPMPort;
    uint8_t VCPPort;
    uint8_t ComSpeed;
    uint8_t MaxRfSpeed;
    uint8_t MaxRfPower;
    uint8_t RfBand;
    uint8_t MinChannel;
    uint8_t MaxChannel;

} __attribute__((packed)) __attribute__((aligned(4))) HwTauLinkData;

// Typesafe Object access functions
/**
 * @function HwTauLinkGet(dataOut)
 * @brief Populate a HwTauLinkData object
 * @param[out] dataOut 
 */
static inline int32_t HwTauLinkGet(HwTauLinkData *dataOut) { return UAVObjGetData(HwTauLinkHandle(), dataOut); }

static inline int32_t HwTauLinkSet(const HwTauLinkData *dataIn) { return UAVObjSetData(HwTauLinkHandle(), dataIn); }

static inline int32_t HwTauLinkInstGet(uint16_t instId, HwTauLinkData *dataOut) { return UAVObjGetInstanceData(HwTauLinkHandle(), instId, dataOut); }

static inline int32_t HwTauLinkInstSet(uint16_t instId, const HwTauLinkData *dataIn) { return UAVObjSetInstanceData(HwTauLinkHandle(), instId, dataIn); }

static inline int32_t HwTauLinkConnectQueue(struct pios_queue *queue) { return UAVObjConnectQueue(HwTauLinkHandle(), queue, EV_MASK_ALL_UPDATES); }

static inline int32_t HwTauLinkConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(HwTauLinkHandle(), cb, EV_MASK_ALL_UPDATES); }

static inline uint16_t HwTauLinkCreateInstance() { return UAVObjCreateInstance(HwTauLinkHandle(), &HwTauLinkSetDefaults); }

static inline void HwTauLinkRequestUpdate() { UAVObjRequestUpdate(HwTauLinkHandle()); }

static inline void HwTauLinkRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(HwTauLinkHandle(), instId); }

static inline void HwTauLinkUpdated() { UAVObjUpdated(HwTauLinkHandle()); }

static inline void HwTauLinkInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(HwTauLinkHandle(), instId); }

static inline int32_t HwTauLinkGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(HwTauLinkHandle(), dataOut); }

static inline int32_t HwTauLinkSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(HwTauLinkHandle(), dataIn); }

static inline int8_t HwTauLinkReadOnly() { return UAVObjReadOnly(HwTauLinkHandle()); }

static inline uint16_t HwTauLinkGetNumInstances(){ return UAVObjGetNumInstances(HwTauLinkHandle()); }

static inline uint32_t HwTauLinkGetNumBytes(){ return UAVObjGetNumBytes(HwTauLinkHandle()); }

// Field information
// Field CoordID information
// Field Radio information
/* Enumeration options for field Radio */
typedef enum { HWTAULINK_RADIO_DISABLED=HWSHARED_RADIOPORT_DISABLED, HWTAULINK_RADIO_TELEM=HWSHARED_RADIOPORT_TELEM, HWTAULINK_RADIO_TELEMPPM=HWSHARED_RADIOPORT_TELEMPPM, HWTAULINK_RADIO_PPM=HWSHARED_RADIOPORT_PPM, HWTAULINK_RADIO_DONTSWITCHONCHILDENUMS=255 }  __attribute__((packed)) HwTauLinkRadioOptions;
/* Max value of any option in topmost parent RadioPort of field Radio */
#define HWTAULINK_RADIO_GLOBAL_MAXOPTVAL 4
/* Max value of any option in field Radio */
#define HWTAULINK_RADIO_MAXOPTVAL 3
/* Ensure field Radio contains valid data */
static inline bool HwTauLinkRadioIsValid( uint8_t CurrentRadio ) { return CurrentRadio < HWTAULINK_RADIO_MAXOPTVAL; }
// Field MainPort information
/* Enumeration options for field MainPort */
typedef enum { HWTAULINK_MAINPORT_DISABLED=HWSHARED_PORTTYPES_DISABLED, HWTAULINK_MAINPORT_GPS=HWSHARED_PORTTYPES_GPS, HWTAULINK_MAINPORT_TELEMETRY=HWSHARED_PORTTYPES_TELEMETRY, HWTAULINK_MAINPORT_COMBRIDGE=HWSHARED_PORTTYPES_COMBRIDGE, HWTAULINK_MAINPORT_DONTSWITCHONCHILDENUMS=255 }  __attribute__((packed)) HwTauLinkMainPortOptions;
/* Max value of any option in topmost parent PortTypes of field MainPort */
#define HWTAULINK_MAINPORT_GLOBAL_MAXOPTVAL 20
/* Max value of any option in field MainPort */
#define HWTAULINK_MAINPORT_MAXOPTVAL 6
/* Ensure field MainPort contains valid data */
static inline bool HwTauLinkMainPortIsValid( uint8_t CurrentMainPort ) { return CurrentMainPort < HWTAULINK_MAINPORT_MAXOPTVAL; }
// Field BTPort information
/* Enumeration options for field BTPort */
typedef enum { HWTAULINK_BTPORT_DISABLED=0, HWTAULINK_BTPORT_TELEMETRY=1, HWTAULINK_BTPORT_COMBRIDGE=2 }  __attribute__((packed)) HwTauLinkBTPortOptions;
/* Max value of any option in topmost parent BTPort of field BTPort */
#define HWTAULINK_BTPORT_GLOBAL_MAXOPTVAL 2
/* Max value of any option in field BTPort */
#define HWTAULINK_BTPORT_MAXOPTVAL 2
/* Ensure field BTPort contains valid data */
static inline bool HwTauLinkBTPortIsValid( uint8_t CurrentBTPort ) { return CurrentBTPort < HWTAULINK_BTPORT_MAXOPTVAL; }
// Field PPMPort information
/* Enumeration options for field PPMPort */
typedef enum { HWTAULINK_PPMPORT_DISABLED=0, HWTAULINK_PPMPORT_PPM=1, HWTAULINK_PPMPORT_SPORT=2, HWTAULINK_PPMPORT_PPMSPORT=3 }  __attribute__((packed)) HwTauLinkPPMPortOptions;
/* Max value of any option in topmost parent PPMPort of field PPMPort */
#define HWTAULINK_PPMPORT_GLOBAL_MAXOPTVAL 3
/* Max value of any option in field PPMPort */
#define HWTAULINK_PPMPORT_MAXOPTVAL 3
/* Ensure field PPMPort contains valid data */
static inline bool HwTauLinkPPMPortIsValid( uint8_t CurrentPPMPort ) { return CurrentPPMPort < HWTAULINK_PPMPORT_MAXOPTVAL; }
// Field VCPPort information
/* Enumeration options for field VCPPort */
typedef enum { HWTAULINK_VCPPORT_USBTELEMETRY=HWSHARED_USB_VCPPORT_USBTELEMETRY, HWTAULINK_VCPPORT_COMBRIDGE=HWSHARED_USB_VCPPORT_COMBRIDGE, HWTAULINK_VCPPORT_DEBUGCONSOLE=HWSHARED_USB_VCPPORT_DEBUGCONSOLE, HWTAULINK_VCPPORT_PICOC=HWSHARED_USB_VCPPORT_PICOC, HWTAULINK_VCPPORT_DISABLED=HWSHARED_USB_VCPPORT_DISABLED, HWTAULINK_VCPPORT_DONTSWITCHONCHILDENUMS=255 }  __attribute__((packed)) HwTauLinkVCPPortOptions;
/* Max value of any option in topmost parent USB_VCPPort of field VCPPort */
#define HWTAULINK_VCPPORT_GLOBAL_MAXOPTVAL 4
/* Max value of any option in field VCPPort */
#define HWTAULINK_VCPPORT_MAXOPTVAL 4
/* Ensure field VCPPort contains valid data */
static inline bool HwTauLinkVCPPortIsValid( uint8_t CurrentVCPPort ) { return CurrentVCPPort < HWTAULINK_VCPPORT_MAXOPTVAL; }
// Field ComSpeed information
/* Enumeration options for field ComSpeed */
typedef enum { HWTAULINK_COMSPEED_4800=0, HWTAULINK_COMSPEED_9600=1, HWTAULINK_COMSPEED_19200=2, HWTAULINK_COMSPEED_38400=3, HWTAULINK_COMSPEED_57600=4, HWTAULINK_COMSPEED_115200=5 }  __attribute__((packed)) HwTauLinkComSpeedOptions;
/* Max value of any option in topmost parent ComSpeed of field ComSpeed */
#define HWTAULINK_COMSPEED_GLOBAL_MAXOPTVAL 5
/* Max value of any option in field ComSpeed */
#define HWTAULINK_COMSPEED_MAXOPTVAL 5
/* Ensure field ComSpeed contains valid data */
static inline bool HwTauLinkComSpeedIsValid( uint8_t CurrentComSpeed ) { return CurrentComSpeed < HWTAULINK_COMSPEED_MAXOPTVAL; }
// Field MaxRfSpeed information
/* Enumeration options for field MaxRfSpeed */
typedef enum { HWTAULINK_MAXRFSPEED_9600=HWSHARED_MAXRFSPEED_9600, HWTAULINK_MAXRFSPEED_19200=HWSHARED_MAXRFSPEED_19200, HWTAULINK_MAXRFSPEED_32000=HWSHARED_MAXRFSPEED_32000, HWTAULINK_MAXRFSPEED_64000=HWSHARED_MAXRFSPEED_64000, HWTAULINK_MAXRFSPEED_100000=HWSHARED_MAXRFSPEED_100000, HWTAULINK_MAXRFSPEED_192000=HWSHARED_MAXRFSPEED_192000, HWTAULINK_MAXRFSPEED_DONTSWITCHONCHILDENUMS=255 }  __attribute__((packed)) HwTauLinkMaxRfSpeedOptions;
/* Max value of any option in topmost parent MaxRfSpeed of field MaxRfSpeed */
#define HWTAULINK_MAXRFSPEED_GLOBAL_MAXOPTVAL 5
/* Max value of any option in field MaxRfSpeed */
#define HWTAULINK_MAXRFSPEED_MAXOPTVAL 5
/* Ensure field MaxRfSpeed contains valid data */
static inline bool HwTauLinkMaxRfSpeedIsValid( uint8_t CurrentMaxRfSpeed ) { return CurrentMaxRfSpeed < HWTAULINK_MAXRFSPEED_MAXOPTVAL; }
// Field MaxRfPower information
/* Enumeration options for field MaxRfPower */
typedef enum { HWTAULINK_MAXRFPOWER_0=HWSHARED_MAXRFPOWER_0, HWTAULINK_MAXRFPOWER_125=HWSHARED_MAXRFPOWER_125, HWTAULINK_MAXRFPOWER_16=HWSHARED_MAXRFPOWER_16, HWTAULINK_MAXRFPOWER_316=HWSHARED_MAXRFPOWER_316, HWTAULINK_MAXRFPOWER_63=HWSHARED_MAXRFPOWER_63, HWTAULINK_MAXRFPOWER_126=HWSHARED_MAXRFPOWER_126, HWTAULINK_MAXRFPOWER_25=HWSHARED_MAXRFPOWER_25, HWTAULINK_MAXRFPOWER_50=HWSHARED_MAXRFPOWER_50, HWTAULINK_MAXRFPOWER_100=HWSHARED_MAXRFPOWER_100, HWTAULINK_MAXRFPOWER_DONTSWITCHONCHILDENUMS=255 }  __attribute__((packed)) HwTauLinkMaxRfPowerOptions;
/* Max value of any option in topmost parent MaxRfPower of field MaxRfPower */
#define HWTAULINK_MAXRFPOWER_GLOBAL_MAXOPTVAL 8
/* Max value of any option in field MaxRfPower */
#define HWTAULINK_MAXRFPOWER_MAXOPTVAL 8
/* Ensure field MaxRfPower contains valid data */
static inline bool HwTauLinkMaxRfPowerIsValid( uint8_t CurrentMaxRfPower ) { return CurrentMaxRfPower < HWTAULINK_MAXRFPOWER_MAXOPTVAL; }
// Field RfBand information
/* Enumeration options for field RfBand */
typedef enum { HWTAULINK_RFBAND_BOARDDEFAULT=HWSHARED_RFBAND_BOARDDEFAULT, HWTAULINK_RFBAND_433=HWSHARED_RFBAND_433, HWTAULINK_RFBAND_868=HWSHARED_RFBAND_868, HWTAULINK_RFBAND_915=HWSHARED_RFBAND_915, HWTAULINK_RFBAND_DONTSWITCHONCHILDENUMS=255 }  __attribute__((packed)) HwTauLinkRfBandOptions;
/* Max value of any option in topmost parent RfBand of field RfBand */
#define HWTAULINK_RFBAND_GLOBAL_MAXOPTVAL 3
/* Max value of any option in field RfBand */
#define HWTAULINK_RFBAND_MAXOPTVAL 3
/* Ensure field RfBand contains valid data */
static inline bool HwTauLinkRfBandIsValid( uint8_t CurrentRfBand ) { return CurrentRfBand < HWTAULINK_RFBAND_MAXOPTVAL; }
// Field MinChannel information
// Field MaxChannel information


// set/Get functions
extern void HwTauLinkCoordIDSet( uint32_t *NewCoordID );
extern void HwTauLinkCoordIDGet( uint32_t *NewCoordID );
extern void HwTauLinkRadioSet( uint8_t *NewRadio );
extern void HwTauLinkRadioGet( uint8_t *NewRadio );
extern void HwTauLinkMainPortSet( uint8_t *NewMainPort );
extern void HwTauLinkMainPortGet( uint8_t *NewMainPort );
extern void HwTauLinkBTPortSet( uint8_t *NewBTPort );
extern void HwTauLinkBTPortGet( uint8_t *NewBTPort );
extern void HwTauLinkPPMPortSet( uint8_t *NewPPMPort );
extern void HwTauLinkPPMPortGet( uint8_t *NewPPMPort );
extern void HwTauLinkVCPPortSet( uint8_t *NewVCPPort );
extern void HwTauLinkVCPPortGet( uint8_t *NewVCPPort );
extern void HwTauLinkComSpeedSet( uint8_t *NewComSpeed );
extern void HwTauLinkComSpeedGet( uint8_t *NewComSpeed );
extern void HwTauLinkMaxRfSpeedSet( uint8_t *NewMaxRfSpeed );
extern void HwTauLinkMaxRfSpeedGet( uint8_t *NewMaxRfSpeed );
extern void HwTauLinkMaxRfPowerSet( uint8_t *NewMaxRfPower );
extern void HwTauLinkMaxRfPowerGet( uint8_t *NewMaxRfPower );
extern void HwTauLinkRfBandSet( uint8_t *NewRfBand );
extern void HwTauLinkRfBandGet( uint8_t *NewRfBand );
extern void HwTauLinkMinChannelSet( uint8_t *NewMinChannel );
extern void HwTauLinkMinChannelGet( uint8_t *NewMinChannel );
extern void HwTauLinkMaxChannelSet( uint8_t *NewMaxChannel );
extern void HwTauLinkMaxChannelGet( uint8_t *NewMaxChannel );


#endif // HWTAULINK_H

/**
 * @}
 * @}
 */
