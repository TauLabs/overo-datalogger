/**
 ******************************************************************************
 * @addtogroup UAVObjects UAVObject set for this firmware
 * @{
 * @addtogroup INSSettings INSSettings
 * @brief Settings for the INS to control the algorithm and what is updated
 *
 *
 * @file       inssettings.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @author     Tau Labs, http://taulabs.org, Copyright (C) 2012-2015
 * @brief      Include files for the INSSettings object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: inssettings.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef INSSETTINGS_H
#define INSSETTINGS_H

#include "pios_queue.h"
#include "uavoversion.h"



// Object constants
#define INSSETTINGS_OBJID 0x60BC503A
#define INSSETTINGS_ISSINGLEINST 1
#define INSSETTINGS_ISSETTINGS 1
#define INSSETTINGS_NUMBYTES 62

// Generic interface functions
int32_t INSSettingsInitialize();
UAVObjHandle INSSettingsHandle();
void INSSettingsSetDefaults(UAVObjHandle obj, uint16_t instId);

// Object data
typedef struct {
    float AccelVar[3];
    float GyroVar[3];
    float MagVar[3];
    float GpsVar[3];
    float BaroVar;
    float MagBiasNullingRate;
    float MinRNAVPDOP;
    uint8_t ComputeGyroBias;
    uint8_t MinRNAVSatellites;

} __attribute__((packed)) __attribute__((aligned(4))) INSSettingsData;

// Typesafe Object access functions
/**
 * @function INSSettingsGet(dataOut)
 * @brief Populate a INSSettingsData object
 * @param[out] dataOut 
 */
static inline int32_t INSSettingsGet(INSSettingsData *dataOut) { return UAVObjGetData(INSSettingsHandle(), dataOut); }

static inline int32_t INSSettingsSet(const INSSettingsData *dataIn) { return UAVObjSetData(INSSettingsHandle(), dataIn); }

static inline int32_t INSSettingsInstGet(uint16_t instId, INSSettingsData *dataOut) { return UAVObjGetInstanceData(INSSettingsHandle(), instId, dataOut); }

static inline int32_t INSSettingsInstSet(uint16_t instId, const INSSettingsData *dataIn) { return UAVObjSetInstanceData(INSSettingsHandle(), instId, dataIn); }

static inline int32_t INSSettingsConnectQueue(struct pios_queue *queue) { return UAVObjConnectQueue(INSSettingsHandle(), queue, EV_MASK_ALL_UPDATES); }

static inline int32_t INSSettingsConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(INSSettingsHandle(), cb, EV_MASK_ALL_UPDATES); }

static inline uint16_t INSSettingsCreateInstance() { return UAVObjCreateInstance(INSSettingsHandle(), &INSSettingsSetDefaults); }

static inline void INSSettingsRequestUpdate() { UAVObjRequestUpdate(INSSettingsHandle()); }

static inline void INSSettingsRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(INSSettingsHandle(), instId); }

static inline void INSSettingsUpdated() { UAVObjUpdated(INSSettingsHandle()); }

static inline void INSSettingsInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(INSSettingsHandle(), instId); }

static inline int32_t INSSettingsGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(INSSettingsHandle(), dataOut); }

static inline int32_t INSSettingsSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(INSSettingsHandle(), dataIn); }

static inline int8_t INSSettingsReadOnly() { return UAVObjReadOnly(INSSettingsHandle()); }

static inline uint16_t INSSettingsGetNumInstances(){ return UAVObjGetNumInstances(INSSettingsHandle()); }

static inline uint32_t INSSettingsGetNumBytes(){ return UAVObjGetNumBytes(INSSettingsHandle()); }

// Field information
// Field AccelVar information
/* Array element names for field AccelVar */
typedef enum { INSSETTINGS_ACCELVAR_X=0, INSSETTINGS_ACCELVAR_Y=1, INSSETTINGS_ACCELVAR_Z=2 } __attribute__((packed)) INSSettingsAccelVarElem;
/* Number of elements for field AccelVar */
#define INSSETTINGS_ACCELVAR_NUMELEM 3
// Field GyroVar information
/* Array element names for field GyroVar */
typedef enum { INSSETTINGS_GYROVAR_X=0, INSSETTINGS_GYROVAR_Y=1, INSSETTINGS_GYROVAR_Z=2 } __attribute__((packed)) INSSettingsGyroVarElem;
/* Number of elements for field GyroVar */
#define INSSETTINGS_GYROVAR_NUMELEM 3
// Field MagVar information
/* Array element names for field MagVar */
typedef enum { INSSETTINGS_MAGVAR_X=0, INSSETTINGS_MAGVAR_Y=1, INSSETTINGS_MAGVAR_Z=2 } __attribute__((packed)) INSSettingsMagVarElem;
/* Number of elements for field MagVar */
#define INSSETTINGS_MAGVAR_NUMELEM 3
// Field GpsVar information
/* Array element names for field GpsVar */
typedef enum { INSSETTINGS_GPSVAR_POS=0, INSSETTINGS_GPSVAR_VEL=1, INSSETTINGS_GPSVAR_VERTPOS=2 } __attribute__((packed)) INSSettingsGpsVarElem;
/* Number of elements for field GpsVar */
#define INSSETTINGS_GPSVAR_NUMELEM 3
// Field BaroVar information
// Field MagBiasNullingRate information
// Field MinRNAVPDOP information
// Field ComputeGyroBias information
/* Enumeration options for field ComputeGyroBias */
typedef enum { INSSETTINGS_COMPUTEGYROBIAS_FALSE=0, INSSETTINGS_COMPUTEGYROBIAS_TRUE=1 }  __attribute__((packed)) INSSettingsComputeGyroBiasOptions;
/* Max value of any option in topmost parent ComputeGyroBias of field ComputeGyroBias */
#define INSSETTINGS_COMPUTEGYROBIAS_GLOBAL_MAXOPTVAL 1
/* Max value of any option in field ComputeGyroBias */
#define INSSETTINGS_COMPUTEGYROBIAS_MAXOPTVAL 1
/* Ensure field ComputeGyroBias contains valid data */
static inline bool INSSettingsComputeGyroBiasIsValid( uint8_t CurrentComputeGyroBias ) { return CurrentComputeGyroBias < INSSETTINGS_COMPUTEGYROBIAS_MAXOPTVAL; }
// Field MinRNAVSatellites information


// set/Get functions
extern void INSSettingsAccelVarSet( float *NewAccelVar );
extern void INSSettingsAccelVarGet( float *NewAccelVar );
extern void INSSettingsGyroVarSet( float *NewGyroVar );
extern void INSSettingsGyroVarGet( float *NewGyroVar );
extern void INSSettingsMagVarSet( float *NewMagVar );
extern void INSSettingsMagVarGet( float *NewMagVar );
extern void INSSettingsGpsVarSet( float *NewGpsVar );
extern void INSSettingsGpsVarGet( float *NewGpsVar );
extern void INSSettingsBaroVarSet( float *NewBaroVar );
extern void INSSettingsBaroVarGet( float *NewBaroVar );
extern void INSSettingsMagBiasNullingRateSet( float *NewMagBiasNullingRate );
extern void INSSettingsMagBiasNullingRateGet( float *NewMagBiasNullingRate );
extern void INSSettingsMinRNAVPDOPSet( float *NewMinRNAVPDOP );
extern void INSSettingsMinRNAVPDOPGet( float *NewMinRNAVPDOP );
extern void INSSettingsComputeGyroBiasSet( uint8_t *NewComputeGyroBias );
extern void INSSettingsComputeGyroBiasGet( uint8_t *NewComputeGyroBias );
extern void INSSettingsMinRNAVSatellitesSet( uint8_t *NewMinRNAVSatellites );
extern void INSSettingsMinRNAVSatellitesGet( uint8_t *NewMinRNAVSatellites );


#endif // INSSETTINGS_H

/**
 * @}
 * @}
 */
