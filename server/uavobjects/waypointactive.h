/**
 ******************************************************************************
 * @addtogroup UAVObjects UAVObject set for this firmware
 * @{
 * @addtogroup WaypointActive WaypointActive
 * @brief Indicates the currently active waypoint
 *
 *
 * @file       waypointactive.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @author     Tau Labs, http://taulabs.org, Copyright (C) 2012-2013
 * @brief      Include files for the WaypointActive object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: waypointactive.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef WAYPOINTACTIVE_H
#define WAYPOINTACTIVE_H

// Object constants
#define WAYPOINTACTIVE_OBJID 0x1EA5B19C
#define WAYPOINTACTIVE_ISSINGLEINST 1
#define WAYPOINTACTIVE_ISSETTINGS 0
#define WAYPOINTACTIVE_NUMBYTES 2

// Generic interface functions
int32_t WaypointActiveInitialize();
UAVObjHandle WaypointActiveHandle();
void WaypointActiveSetDefaults(UAVObjHandle obj, uint16_t instId);

// Object data
typedef struct {
    int16_t Index;

} __attribute__((packed)) __attribute__((aligned(4))) WaypointActiveData;

// Typesafe Object access functions
/**
 * @function WaypointActiveGet(dataOut)
 * @brief Populate a WaypointActiveData object
 * @param[out] dataOut 
 */
static inline int32_t WaypointActiveGet(WaypointActiveData *dataOut) { return UAVObjGetData(WaypointActiveHandle(), dataOut); }

static inline int32_t WaypointActiveSet(const WaypointActiveData *dataIn) { return UAVObjSetData(WaypointActiveHandle(), dataIn); }

static inline int32_t WaypointActiveInstGet(uint16_t instId, WaypointActiveData *dataOut) { return UAVObjGetInstanceData(WaypointActiveHandle(), instId, dataOut); }

static inline int32_t WaypointActiveInstSet(uint16_t instId, const WaypointActiveData *dataIn) { return UAVObjSetInstanceData(WaypointActiveHandle(), instId, dataIn); }

static inline int32_t WaypointActiveConnectQueue(xQueueHandle queue) { return UAVObjConnectQueue(WaypointActiveHandle(), queue, EV_MASK_ALL_UPDATES); }

static inline int32_t WaypointActiveConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(WaypointActiveHandle(), cb, EV_MASK_ALL_UPDATES); }

static inline uint16_t WaypointActiveCreateInstance() { return UAVObjCreateInstance(WaypointActiveHandle(), &WaypointActiveSetDefaults); }

static inline void WaypointActiveRequestUpdate() { UAVObjRequestUpdate(WaypointActiveHandle()); }

static inline void WaypointActiveRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(WaypointActiveHandle(), instId); }

static inline void WaypointActiveUpdated() { UAVObjUpdated(WaypointActiveHandle()); }

static inline void WaypointActiveInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(WaypointActiveHandle(), instId); }

static inline int32_t WaypointActiveGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(WaypointActiveHandle(), dataOut); }

static inline int32_t WaypointActiveSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(WaypointActiveHandle(), dataIn); }

static inline int8_t WaypointActiveReadOnly() { return UAVObjReadOnly(WaypointActiveHandle()); }

static inline uint16_t WaypointActiveGetNumInstances(){ return UAVObjGetNumInstances(WaypointActiveHandle()); }

static inline uint32_t WaypointActiveGetNumBytes(){ return UAVObjGetNumBytes(WaypointActiveHandle()); }

// Field information
// Field Index information


// set/Get functions
extern void WaypointActiveIndexSet( int16_t *NewIndex );
extern void WaypointActiveIndexGet( int16_t *NewIndex );


#endif // WAYPOINTACTIVE_H

/**
 * @}
 * @}
 */
