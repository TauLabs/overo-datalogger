/**
 ******************************************************************************
 * @addtogroup UAVObjects UAVObject set for this firmware
 * @{
 * @addtogroup FlightBatteryState FlightBatteryState
 * @brief Battery status information.
 *
 *
 * @file       flightbatterystate.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @author     Tau Labs, http://taulabs.org, Copyright (C) 2012-2015
 * @brief      Include files for the FlightBatteryState object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: flightbatterystate.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef FLIGHTBATTERYSTATE_H
#define FLIGHTBATTERYSTATE_H

#include "pios_queue.h"
#include "uavoversion.h"



// Object constants
#define FLIGHTBATTERYSTATE_OBJID 0xD2083596
#define FLIGHTBATTERYSTATE_ISSINGLEINST 1
#define FLIGHTBATTERYSTATE_ISSETTINGS 0
#define FLIGHTBATTERYSTATE_NUMBYTES 28

// Generic interface functions
int32_t FlightBatteryStateInitialize();
UAVObjHandle FlightBatteryStateHandle();
void FlightBatteryStateSetDefaults(UAVObjHandle obj, uint16_t instId);

// Object data
typedef struct {
    float Voltage;
    float Current;
    float BoardSupplyVoltage;
    float PeakCurrent;
    float AvgCurrent;
    float ConsumedEnergy;
    float EstimatedFlightTime;

} __attribute__((packed)) __attribute__((aligned(4))) FlightBatteryStateData;

// Typesafe Object access functions
/**
 * @function FlightBatteryStateGet(dataOut)
 * @brief Populate a FlightBatteryStateData object
 * @param[out] dataOut 
 */
static inline int32_t FlightBatteryStateGet(FlightBatteryStateData *dataOut) { return UAVObjGetData(FlightBatteryStateHandle(), dataOut); }

static inline int32_t FlightBatteryStateSet(const FlightBatteryStateData *dataIn) { return UAVObjSetData(FlightBatteryStateHandle(), dataIn); }

static inline int32_t FlightBatteryStateInstGet(uint16_t instId, FlightBatteryStateData *dataOut) { return UAVObjGetInstanceData(FlightBatteryStateHandle(), instId, dataOut); }

static inline int32_t FlightBatteryStateInstSet(uint16_t instId, const FlightBatteryStateData *dataIn) { return UAVObjSetInstanceData(FlightBatteryStateHandle(), instId, dataIn); }

static inline int32_t FlightBatteryStateConnectQueue(struct pios_queue *queue) { return UAVObjConnectQueue(FlightBatteryStateHandle(), queue, EV_MASK_ALL_UPDATES); }

static inline int32_t FlightBatteryStateConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(FlightBatteryStateHandle(), cb, EV_MASK_ALL_UPDATES); }

static inline uint16_t FlightBatteryStateCreateInstance() { return UAVObjCreateInstance(FlightBatteryStateHandle(), &FlightBatteryStateSetDefaults); }

static inline void FlightBatteryStateRequestUpdate() { UAVObjRequestUpdate(FlightBatteryStateHandle()); }

static inline void FlightBatteryStateRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(FlightBatteryStateHandle(), instId); }

static inline void FlightBatteryStateUpdated() { UAVObjUpdated(FlightBatteryStateHandle()); }

static inline void FlightBatteryStateInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(FlightBatteryStateHandle(), instId); }

static inline int32_t FlightBatteryStateGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(FlightBatteryStateHandle(), dataOut); }

static inline int32_t FlightBatteryStateSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(FlightBatteryStateHandle(), dataIn); }

static inline int8_t FlightBatteryStateReadOnly() { return UAVObjReadOnly(FlightBatteryStateHandle()); }

static inline uint16_t FlightBatteryStateGetNumInstances(){ return UAVObjGetNumInstances(FlightBatteryStateHandle()); }

static inline uint32_t FlightBatteryStateGetNumBytes(){ return UAVObjGetNumBytes(FlightBatteryStateHandle()); }

// Field information
// Field Voltage information
// Field Current information
// Field BoardSupplyVoltage information
// Field PeakCurrent information
// Field AvgCurrent information
// Field ConsumedEnergy information
// Field EstimatedFlightTime information


// set/Get functions
extern void FlightBatteryStateVoltageSet( float *NewVoltage );
extern void FlightBatteryStateVoltageGet( float *NewVoltage );
extern void FlightBatteryStateCurrentSet( float *NewCurrent );
extern void FlightBatteryStateCurrentGet( float *NewCurrent );
extern void FlightBatteryStateBoardSupplyVoltageSet( float *NewBoardSupplyVoltage );
extern void FlightBatteryStateBoardSupplyVoltageGet( float *NewBoardSupplyVoltage );
extern void FlightBatteryStatePeakCurrentSet( float *NewPeakCurrent );
extern void FlightBatteryStatePeakCurrentGet( float *NewPeakCurrent );
extern void FlightBatteryStateAvgCurrentSet( float *NewAvgCurrent );
extern void FlightBatteryStateAvgCurrentGet( float *NewAvgCurrent );
extern void FlightBatteryStateConsumedEnergySet( float *NewConsumedEnergy );
extern void FlightBatteryStateConsumedEnergyGet( float *NewConsumedEnergy );
extern void FlightBatteryStateEstimatedFlightTimeSet( float *NewEstimatedFlightTime );
extern void FlightBatteryStateEstimatedFlightTimeGet( float *NewEstimatedFlightTime );


#endif // FLIGHTBATTERYSTATE_H

/**
 * @}
 * @}
 */
