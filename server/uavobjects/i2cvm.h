/**
 ******************************************************************************
 * @addtogroup UAVObjects UAVObject set for this firmware
 * @{
 * @addtogroup I2CVM I2CVM
 * @brief Snapshot of the register and RAM state of the I2C Virtual Machine
 *
 *
 * @file       i2cvm.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @author     Tau Labs, http://taulabs.org, Copyright (C) 2012-2013
 * @brief      Include files for the I2CVM object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: i2cvm.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef I2CVM_H
#define I2CVM_H

// Object constants
#define I2CVM_OBJID 0x2A6A5146
#define I2CVM_ISSINGLEINST 1
#define I2CVM_ISSETTINGS 0
#define I2CVM_NUMBYTES 38

// Generic interface functions
int32_t I2CVMInitialize();
UAVObjHandle I2CVMHandle();
void I2CVMSetDefaults(UAVObjHandle obj, uint16_t instId);

// Object data
typedef struct {
    int32_t r0;
    int32_t r1;
    int32_t r2;
    int32_t r3;
    int32_t r4;
    int32_t r5;
    int32_t r6;
    uint16_t pc;
    uint8_t ram[8];

} __attribute__((packed)) __attribute__((aligned(4))) I2CVMData;

// Typesafe Object access functions
/**
 * @function I2CVMGet(dataOut)
 * @brief Populate a I2CVMData object
 * @param[out] dataOut 
 */
static inline int32_t I2CVMGet(I2CVMData *dataOut) { return UAVObjGetData(I2CVMHandle(), dataOut); }

static inline int32_t I2CVMSet(const I2CVMData *dataIn) { return UAVObjSetData(I2CVMHandle(), dataIn); }

static inline int32_t I2CVMInstGet(uint16_t instId, I2CVMData *dataOut) { return UAVObjGetInstanceData(I2CVMHandle(), instId, dataOut); }

static inline int32_t I2CVMInstSet(uint16_t instId, const I2CVMData *dataIn) { return UAVObjSetInstanceData(I2CVMHandle(), instId, dataIn); }

static inline int32_t I2CVMConnectQueue(xQueueHandle queue) { return UAVObjConnectQueue(I2CVMHandle(), queue, EV_MASK_ALL_UPDATES); }

static inline int32_t I2CVMConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(I2CVMHandle(), cb, EV_MASK_ALL_UPDATES); }

static inline uint16_t I2CVMCreateInstance() { return UAVObjCreateInstance(I2CVMHandle(), &I2CVMSetDefaults); }

static inline void I2CVMRequestUpdate() { UAVObjRequestUpdate(I2CVMHandle()); }

static inline void I2CVMRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(I2CVMHandle(), instId); }

static inline void I2CVMUpdated() { UAVObjUpdated(I2CVMHandle()); }

static inline void I2CVMInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(I2CVMHandle(), instId); }

static inline int32_t I2CVMGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(I2CVMHandle(), dataOut); }

static inline int32_t I2CVMSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(I2CVMHandle(), dataIn); }

static inline int8_t I2CVMReadOnly() { return UAVObjReadOnly(I2CVMHandle()); }

static inline uint16_t I2CVMGetNumInstances(){ return UAVObjGetNumInstances(I2CVMHandle()); }

static inline uint32_t I2CVMGetNumBytes(){ return UAVObjGetNumBytes(I2CVMHandle()); }

// Field information
// Field r0 information
// Field r1 information
// Field r2 information
// Field r3 information
// Field r4 information
// Field r5 information
// Field r6 information
// Field pc information
// Field ram information
/* Number of elements for field ram */
#define I2CVM_RAM_NUMELEM 8


// set/Get functions
extern void I2CVMr0Set( int32_t *Newr0 );
extern void I2CVMr0Get( int32_t *Newr0 );
extern void I2CVMr1Set( int32_t *Newr1 );
extern void I2CVMr1Get( int32_t *Newr1 );
extern void I2CVMr2Set( int32_t *Newr2 );
extern void I2CVMr2Get( int32_t *Newr2 );
extern void I2CVMr3Set( int32_t *Newr3 );
extern void I2CVMr3Get( int32_t *Newr3 );
extern void I2CVMr4Set( int32_t *Newr4 );
extern void I2CVMr4Get( int32_t *Newr4 );
extern void I2CVMr5Set( int32_t *Newr5 );
extern void I2CVMr5Get( int32_t *Newr5 );
extern void I2CVMr6Set( int32_t *Newr6 );
extern void I2CVMr6Get( int32_t *Newr6 );
extern void I2CVMpcSet( uint16_t *Newpc );
extern void I2CVMpcGet( uint16_t *Newpc );
extern void I2CVMramSet( uint8_t *Newram );
extern void I2CVMramGet( uint8_t *Newram );


#endif // I2CVM_H

/**
 * @}
 * @}
 */
