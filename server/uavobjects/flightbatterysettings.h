/**
 ******************************************************************************
 * @addtogroup UAVObjects UAVObject set for this firmware
 * @{
 * @addtogroup FlightBatterySettings FlightBatterySettings
 * @brief Flight Battery configuration.
 *
 *
 * @file       flightbatterysettings.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @author     Tau Labs, http://taulabs.org, Copyright (C) 2012-2015
 * @brief      Include files for the FlightBatterySettings object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: flightbatterysettings.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef FLIGHTBATTERYSETTINGS_H
#define FLIGHTBATTERYSETTINGS_H

#include "pios_queue.h"
#include "uavoversion.h"



// Object constants
#define FLIGHTBATTERYSETTINGS_OBJID 0x391F094C
#define FLIGHTBATTERYSETTINGS_ISSINGLEINST 1
#define FLIGHTBATTERYSETTINGS_ISSETTINGS 1
#define FLIGHTBATTERYSETTINGS_NUMBYTES 33

// Generic interface functions
int32_t FlightBatterySettingsInitialize();
UAVObjHandle FlightBatterySettingsHandle();
void FlightBatterySettingsSetDefaults(UAVObjHandle obj, uint16_t instId);

// Object data
typedef struct {
    uint32_t Capacity;
    float VoltageThresholds[2];
    float SensorCalibrationFactor[2];
    float SensorCalibrationOffset[2];
    uint8_t CurrentPin;
    uint8_t VoltagePin;
    uint8_t NbCells;
    uint8_t FlightTimeThresholds[2];

} __attribute__((packed)) __attribute__((aligned(4))) FlightBatterySettingsData;

// Typesafe Object access functions
/**
 * @function FlightBatterySettingsGet(dataOut)
 * @brief Populate a FlightBatterySettingsData object
 * @param[out] dataOut 
 */
static inline int32_t FlightBatterySettingsGet(FlightBatterySettingsData *dataOut) { return UAVObjGetData(FlightBatterySettingsHandle(), dataOut); }

static inline int32_t FlightBatterySettingsSet(const FlightBatterySettingsData *dataIn) { return UAVObjSetData(FlightBatterySettingsHandle(), dataIn); }

static inline int32_t FlightBatterySettingsInstGet(uint16_t instId, FlightBatterySettingsData *dataOut) { return UAVObjGetInstanceData(FlightBatterySettingsHandle(), instId, dataOut); }

static inline int32_t FlightBatterySettingsInstSet(uint16_t instId, const FlightBatterySettingsData *dataIn) { return UAVObjSetInstanceData(FlightBatterySettingsHandle(), instId, dataIn); }

static inline int32_t FlightBatterySettingsConnectQueue(struct pios_queue *queue) { return UAVObjConnectQueue(FlightBatterySettingsHandle(), queue, EV_MASK_ALL_UPDATES); }

static inline int32_t FlightBatterySettingsConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(FlightBatterySettingsHandle(), cb, EV_MASK_ALL_UPDATES); }

static inline uint16_t FlightBatterySettingsCreateInstance() { return UAVObjCreateInstance(FlightBatterySettingsHandle(), &FlightBatterySettingsSetDefaults); }

static inline void FlightBatterySettingsRequestUpdate() { UAVObjRequestUpdate(FlightBatterySettingsHandle()); }

static inline void FlightBatterySettingsRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(FlightBatterySettingsHandle(), instId); }

static inline void FlightBatterySettingsUpdated() { UAVObjUpdated(FlightBatterySettingsHandle()); }

static inline void FlightBatterySettingsInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(FlightBatterySettingsHandle(), instId); }

static inline int32_t FlightBatterySettingsGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(FlightBatterySettingsHandle(), dataOut); }

static inline int32_t FlightBatterySettingsSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(FlightBatterySettingsHandle(), dataIn); }

static inline int8_t FlightBatterySettingsReadOnly() { return UAVObjReadOnly(FlightBatterySettingsHandle()); }

static inline uint16_t FlightBatterySettingsGetNumInstances(){ return UAVObjGetNumInstances(FlightBatterySettingsHandle()); }

static inline uint32_t FlightBatterySettingsGetNumBytes(){ return UAVObjGetNumBytes(FlightBatterySettingsHandle()); }

// Field information
// Field Capacity information
// Field VoltageThresholds information
/* Array element names for field VoltageThresholds */
typedef enum { FLIGHTBATTERYSETTINGS_VOLTAGETHRESHOLDS_WARNING=0, FLIGHTBATTERYSETTINGS_VOLTAGETHRESHOLDS_ALARM=1 } __attribute__((packed)) FlightBatterySettingsVoltageThresholdsElem;
/* Number of elements for field VoltageThresholds */
#define FLIGHTBATTERYSETTINGS_VOLTAGETHRESHOLDS_NUMELEM 2
// Field SensorCalibrationFactor information
/* Array element names for field SensorCalibrationFactor */
typedef enum { FLIGHTBATTERYSETTINGS_SENSORCALIBRATIONFACTOR_VOLTAGE=0, FLIGHTBATTERYSETTINGS_SENSORCALIBRATIONFACTOR_CURRENT=1 } __attribute__((packed)) FlightBatterySettingsSensorCalibrationFactorElem;
/* Number of elements for field SensorCalibrationFactor */
#define FLIGHTBATTERYSETTINGS_SENSORCALIBRATIONFACTOR_NUMELEM 2
// Field SensorCalibrationOffset information
/* Array element names for field SensorCalibrationOffset */
typedef enum { FLIGHTBATTERYSETTINGS_SENSORCALIBRATIONOFFSET_VOLTAGE=0, FLIGHTBATTERYSETTINGS_SENSORCALIBRATIONOFFSET_CURRENT=1 } __attribute__((packed)) FlightBatterySettingsSensorCalibrationOffsetElem;
/* Number of elements for field SensorCalibrationOffset */
#define FLIGHTBATTERYSETTINGS_SENSORCALIBRATIONOFFSET_NUMELEM 2
// Field CurrentPin information
/* Enumeration options for field CurrentPin */
typedef enum { FLIGHTBATTERYSETTINGS_CURRENTPIN_ADC0=0, FLIGHTBATTERYSETTINGS_CURRENTPIN_ADC1=1, FLIGHTBATTERYSETTINGS_CURRENTPIN_ADC2=2, FLIGHTBATTERYSETTINGS_CURRENTPIN_ADC3=3, FLIGHTBATTERYSETTINGS_CURRENTPIN_ADC4=4, FLIGHTBATTERYSETTINGS_CURRENTPIN_ADC5=5, FLIGHTBATTERYSETTINGS_CURRENTPIN_ADC6=6, FLIGHTBATTERYSETTINGS_CURRENTPIN_ADC7=7, FLIGHTBATTERYSETTINGS_CURRENTPIN_ADC8=8, FLIGHTBATTERYSETTINGS_CURRENTPIN_NONE=9 }  __attribute__((packed)) FlightBatterySettingsCurrentPinOptions;
/* Max value of any option in topmost parent CurrentPin of field CurrentPin */
#define FLIGHTBATTERYSETTINGS_CURRENTPIN_GLOBAL_MAXOPTVAL 9
/* Max value of any option in field CurrentPin */
#define FLIGHTBATTERYSETTINGS_CURRENTPIN_MAXOPTVAL 9
/* Ensure field CurrentPin contains valid data */
static inline bool FlightBatterySettingsCurrentPinIsValid( uint8_t CurrentCurrentPin ) { return CurrentCurrentPin < FLIGHTBATTERYSETTINGS_CURRENTPIN_MAXOPTVAL; }
// Field VoltagePin information
/* Enumeration options for field VoltagePin */
typedef enum { FLIGHTBATTERYSETTINGS_VOLTAGEPIN_ADC0=0, FLIGHTBATTERYSETTINGS_VOLTAGEPIN_ADC1=1, FLIGHTBATTERYSETTINGS_VOLTAGEPIN_ADC2=2, FLIGHTBATTERYSETTINGS_VOLTAGEPIN_ADC3=3, FLIGHTBATTERYSETTINGS_VOLTAGEPIN_ADC4=4, FLIGHTBATTERYSETTINGS_VOLTAGEPIN_ADC5=5, FLIGHTBATTERYSETTINGS_VOLTAGEPIN_ADC6=6, FLIGHTBATTERYSETTINGS_VOLTAGEPIN_ADC7=7, FLIGHTBATTERYSETTINGS_VOLTAGEPIN_ADC8=8, FLIGHTBATTERYSETTINGS_VOLTAGEPIN_NONE=9 }  __attribute__((packed)) FlightBatterySettingsVoltagePinOptions;
/* Max value of any option in topmost parent VoltagePin of field VoltagePin */
#define FLIGHTBATTERYSETTINGS_VOLTAGEPIN_GLOBAL_MAXOPTVAL 9
/* Max value of any option in field VoltagePin */
#define FLIGHTBATTERYSETTINGS_VOLTAGEPIN_MAXOPTVAL 9
/* Ensure field VoltagePin contains valid data */
static inline bool FlightBatterySettingsVoltagePinIsValid( uint8_t CurrentVoltagePin ) { return CurrentVoltagePin < FLIGHTBATTERYSETTINGS_VOLTAGEPIN_MAXOPTVAL; }
// Field NbCells information
// Field FlightTimeThresholds information
/* Array element names for field FlightTimeThresholds */
typedef enum { FLIGHTBATTERYSETTINGS_FLIGHTTIMETHRESHOLDS_WARNING=0, FLIGHTBATTERYSETTINGS_FLIGHTTIMETHRESHOLDS_ALARM=1 } __attribute__((packed)) FlightBatterySettingsFlightTimeThresholdsElem;
/* Number of elements for field FlightTimeThresholds */
#define FLIGHTBATTERYSETTINGS_FLIGHTTIMETHRESHOLDS_NUMELEM 2


// set/Get functions
extern void FlightBatterySettingsCapacitySet( uint32_t *NewCapacity );
extern void FlightBatterySettingsCapacityGet( uint32_t *NewCapacity );
extern void FlightBatterySettingsVoltageThresholdsSet( float *NewVoltageThresholds );
extern void FlightBatterySettingsVoltageThresholdsGet( float *NewVoltageThresholds );
extern void FlightBatterySettingsSensorCalibrationFactorSet( float *NewSensorCalibrationFactor );
extern void FlightBatterySettingsSensorCalibrationFactorGet( float *NewSensorCalibrationFactor );
extern void FlightBatterySettingsSensorCalibrationOffsetSet( float *NewSensorCalibrationOffset );
extern void FlightBatterySettingsSensorCalibrationOffsetGet( float *NewSensorCalibrationOffset );
extern void FlightBatterySettingsCurrentPinSet( uint8_t *NewCurrentPin );
extern void FlightBatterySettingsCurrentPinGet( uint8_t *NewCurrentPin );
extern void FlightBatterySettingsVoltagePinSet( uint8_t *NewVoltagePin );
extern void FlightBatterySettingsVoltagePinGet( uint8_t *NewVoltagePin );
extern void FlightBatterySettingsNbCellsSet( uint8_t *NewNbCells );
extern void FlightBatterySettingsNbCellsGet( uint8_t *NewNbCells );
extern void FlightBatterySettingsFlightTimeThresholdsSet( uint8_t *NewFlightTimeThresholds );
extern void FlightBatterySettingsFlightTimeThresholdsGet( uint8_t *NewFlightTimeThresholds );


#endif // FLIGHTBATTERYSETTINGS_H

/**
 * @}
 * @}
 */
