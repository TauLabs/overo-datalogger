/**
 ******************************************************************************
 * @addtogroup UAVObjects UAVObject set for this firmware
 * @{
 * @addtogroup VelocityActual VelocityActual
 * @brief Updated by @ref AHRSCommsModule and used within @ref GuidanceModule for velocity control
 *
 *
 * @file       velocityactual.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @author     Tau Labs, http://taulabs.org, Copyright (C) 2012-2015
 * @brief      Include files for the VelocityActual object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: velocityactual.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef VELOCITYACTUAL_H
#define VELOCITYACTUAL_H

#include "pios_queue.h"
#include "uavoversion.h"



// Object constants
#define VELOCITYACTUAL_OBJID 0x5A08F61A
#define VELOCITYACTUAL_ISSINGLEINST 1
#define VELOCITYACTUAL_ISSETTINGS 0
#define VELOCITYACTUAL_NUMBYTES 12

// Generic interface functions
int32_t VelocityActualInitialize();
UAVObjHandle VelocityActualHandle();
void VelocityActualSetDefaults(UAVObjHandle obj, uint16_t instId);

// Object data
typedef struct {
    float North;
    float East;
    float Down;

} __attribute__((packed)) __attribute__((aligned(4))) VelocityActualData;

// Typesafe Object access functions
/**
 * @function VelocityActualGet(dataOut)
 * @brief Populate a VelocityActualData object
 * @param[out] dataOut 
 */
static inline int32_t VelocityActualGet(VelocityActualData *dataOut) { return UAVObjGetData(VelocityActualHandle(), dataOut); }

static inline int32_t VelocityActualSet(const VelocityActualData *dataIn) { return UAVObjSetData(VelocityActualHandle(), dataIn); }

static inline int32_t VelocityActualInstGet(uint16_t instId, VelocityActualData *dataOut) { return UAVObjGetInstanceData(VelocityActualHandle(), instId, dataOut); }

static inline int32_t VelocityActualInstSet(uint16_t instId, const VelocityActualData *dataIn) { return UAVObjSetInstanceData(VelocityActualHandle(), instId, dataIn); }

static inline int32_t VelocityActualConnectQueue(struct pios_queue *queue) { return UAVObjConnectQueue(VelocityActualHandle(), queue, EV_MASK_ALL_UPDATES); }

static inline int32_t VelocityActualConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(VelocityActualHandle(), cb, EV_MASK_ALL_UPDATES); }

static inline uint16_t VelocityActualCreateInstance() { return UAVObjCreateInstance(VelocityActualHandle(), &VelocityActualSetDefaults); }

static inline void VelocityActualRequestUpdate() { UAVObjRequestUpdate(VelocityActualHandle()); }

static inline void VelocityActualRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(VelocityActualHandle(), instId); }

static inline void VelocityActualUpdated() { UAVObjUpdated(VelocityActualHandle()); }

static inline void VelocityActualInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(VelocityActualHandle(), instId); }

static inline int32_t VelocityActualGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(VelocityActualHandle(), dataOut); }

static inline int32_t VelocityActualSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(VelocityActualHandle(), dataIn); }

static inline int8_t VelocityActualReadOnly() { return UAVObjReadOnly(VelocityActualHandle()); }

static inline uint16_t VelocityActualGetNumInstances(){ return UAVObjGetNumInstances(VelocityActualHandle()); }

static inline uint32_t VelocityActualGetNumBytes(){ return UAVObjGetNumBytes(VelocityActualHandle()); }

// Field information
// Field North information
// Field East information
// Field Down information


// set/Get functions
extern void VelocityActualNorthSet( float *NewNorth );
extern void VelocityActualNorthGet( float *NewNorth );
extern void VelocityActualEastSet( float *NewEast );
extern void VelocityActualEastGet( float *NewEast );
extern void VelocityActualDownSet( float *NewDown );
extern void VelocityActualDownGet( float *NewDown );


#endif // VELOCITYACTUAL_H

/**
 * @}
 * @}
 */
