/**
 ******************************************************************************
 * @addtogroup UAVObjects UAVObject set for this firmware
 * @{
 * @addtogroup VibrationAnalysisOutput VibrationAnalysisOutput
 * @brief FFT output from @VibrationTest module.
 *
 *
 * @file       vibrationanalysisoutput.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @author     Tau Labs, http://taulabs.org, Copyright (C) 2012-2015
 * @brief      Include files for the VibrationAnalysisOutput object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: vibrationanalysisoutput.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef VIBRATIONANALYSISOUTPUT_H
#define VIBRATIONANALYSISOUTPUT_H

#include "pios_queue.h"
#include "uavoversion.h"



// Object constants
#define VIBRATIONANALYSISOUTPUT_OBJID 0xD02B0A44
#define VIBRATIONANALYSISOUTPUT_ISSINGLEINST 0
#define VIBRATIONANALYSISOUTPUT_ISSETTINGS 0
#define VIBRATIONANALYSISOUTPUT_NUMBYTES 12

// Generic interface functions
int32_t VibrationAnalysisOutputInitialize();
UAVObjHandle VibrationAnalysisOutputHandle();
void VibrationAnalysisOutputSetDefaults(UAVObjHandle obj, uint16_t instId);

// Object data
typedef struct {
    float x;
    float y;
    float z;

} __attribute__((packed)) __attribute__((aligned(4))) VibrationAnalysisOutputData;

// Typesafe Object access functions
/**
 * @function VibrationAnalysisOutputGet(dataOut)
 * @brief Populate a VibrationAnalysisOutputData object
 * @param[out] dataOut 
 */
static inline int32_t VibrationAnalysisOutputGet(VibrationAnalysisOutputData *dataOut) { return UAVObjGetData(VibrationAnalysisOutputHandle(), dataOut); }

static inline int32_t VibrationAnalysisOutputSet(const VibrationAnalysisOutputData *dataIn) { return UAVObjSetData(VibrationAnalysisOutputHandle(), dataIn); }

static inline int32_t VibrationAnalysisOutputInstGet(uint16_t instId, VibrationAnalysisOutputData *dataOut) { return UAVObjGetInstanceData(VibrationAnalysisOutputHandle(), instId, dataOut); }

static inline int32_t VibrationAnalysisOutputInstSet(uint16_t instId, const VibrationAnalysisOutputData *dataIn) { return UAVObjSetInstanceData(VibrationAnalysisOutputHandle(), instId, dataIn); }

static inline int32_t VibrationAnalysisOutputConnectQueue(struct pios_queue *queue) { return UAVObjConnectQueue(VibrationAnalysisOutputHandle(), queue, EV_MASK_ALL_UPDATES); }

static inline int32_t VibrationAnalysisOutputConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(VibrationAnalysisOutputHandle(), cb, EV_MASK_ALL_UPDATES); }

static inline uint16_t VibrationAnalysisOutputCreateInstance() { return UAVObjCreateInstance(VibrationAnalysisOutputHandle(), &VibrationAnalysisOutputSetDefaults); }

static inline void VibrationAnalysisOutputRequestUpdate() { UAVObjRequestUpdate(VibrationAnalysisOutputHandle()); }

static inline void VibrationAnalysisOutputRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(VibrationAnalysisOutputHandle(), instId); }

static inline void VibrationAnalysisOutputUpdated() { UAVObjUpdated(VibrationAnalysisOutputHandle()); }

static inline void VibrationAnalysisOutputInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(VibrationAnalysisOutputHandle(), instId); }

static inline int32_t VibrationAnalysisOutputGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(VibrationAnalysisOutputHandle(), dataOut); }

static inline int32_t VibrationAnalysisOutputSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(VibrationAnalysisOutputHandle(), dataIn); }

static inline int8_t VibrationAnalysisOutputReadOnly() { return UAVObjReadOnly(VibrationAnalysisOutputHandle()); }

static inline uint16_t VibrationAnalysisOutputGetNumInstances(){ return UAVObjGetNumInstances(VibrationAnalysisOutputHandle()); }

static inline uint32_t VibrationAnalysisOutputGetNumBytes(){ return UAVObjGetNumBytes(VibrationAnalysisOutputHandle()); }

// Field information
// Field x information
// Field y information
// Field z information


// set/Get functions
extern void VibrationAnalysisOutputxSet( float *Newx );
extern void VibrationAnalysisOutputxGet( float *Newx );
extern void VibrationAnalysisOutputySet( float *Newy );
extern void VibrationAnalysisOutputyGet( float *Newy );
extern void VibrationAnalysisOutputzSet( float *Newz );
extern void VibrationAnalysisOutputzGet( float *Newz );


#endif // VIBRATIONANALYSISOUTPUT_H

/**
 * @}
 * @}
 */
