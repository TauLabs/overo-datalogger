/**
 ******************************************************************************
 * @addtogroup UAVObjects UAVObject set for this firmware
 * @{
 * @addtogroup HwRevoMini HwRevoMini
 * @brief Selection of optional hardware configurations.
 *
 *
 * @file       hwrevomini.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @author     Tau Labs, http://taulabs.org, Copyright (C) 2012-2015
 * @brief      Include files for the HwRevoMini object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: hwrevomini.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef HWREVOMINI_H
#define HWREVOMINI_H

#include "pios_queue.h"
#include "uavoversion.h"

#include <hwshared.h>


// Object constants
#define HWREVOMINI_OBJID 0x56AEFE54
#define HWREVOMINI_ISSINGLEINST 1
#define HWREVOMINI_ISSETTINGS 1
#define HWREVOMINI_NUMBYTES 21

// Generic interface functions
int32_t HwRevoMiniInitialize();
UAVObjHandle HwRevoMiniHandle();
void HwRevoMiniSetDefaults(UAVObjHandle obj, uint16_t instId);

// Object data
typedef struct {
    uint32_t CoordID;
    uint8_t RcvrPort;
    uint8_t MainPort;
    uint8_t FlexiPort;
    uint8_t USB_HIDPort;
    uint8_t USB_VCPPort;
    uint8_t DSMxMode;
    uint8_t Radio;
    uint8_t MaxRfSpeed;
    uint8_t MaxRfPower;
    uint8_t RfBand;
    uint8_t MinChannel;
    uint8_t MaxChannel;
    uint8_t ChannelSet;
    uint8_t GyroRange;
    uint8_t AccelRange;
    uint8_t MPU6000Rate;
    uint8_t MPU6000DLPF;

} __attribute__((packed)) __attribute__((aligned(4))) HwRevoMiniData;

// Typesafe Object access functions
/**
 * @function HwRevoMiniGet(dataOut)
 * @brief Populate a HwRevoMiniData object
 * @param[out] dataOut 
 */
static inline int32_t HwRevoMiniGet(HwRevoMiniData *dataOut) { return UAVObjGetData(HwRevoMiniHandle(), dataOut); }

static inline int32_t HwRevoMiniSet(const HwRevoMiniData *dataIn) { return UAVObjSetData(HwRevoMiniHandle(), dataIn); }

static inline int32_t HwRevoMiniInstGet(uint16_t instId, HwRevoMiniData *dataOut) { return UAVObjGetInstanceData(HwRevoMiniHandle(), instId, dataOut); }

static inline int32_t HwRevoMiniInstSet(uint16_t instId, const HwRevoMiniData *dataIn) { return UAVObjSetInstanceData(HwRevoMiniHandle(), instId, dataIn); }

static inline int32_t HwRevoMiniConnectQueue(struct pios_queue *queue) { return UAVObjConnectQueue(HwRevoMiniHandle(), queue, EV_MASK_ALL_UPDATES); }

static inline int32_t HwRevoMiniConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(HwRevoMiniHandle(), cb, EV_MASK_ALL_UPDATES); }

static inline uint16_t HwRevoMiniCreateInstance() { return UAVObjCreateInstance(HwRevoMiniHandle(), &HwRevoMiniSetDefaults); }

static inline void HwRevoMiniRequestUpdate() { UAVObjRequestUpdate(HwRevoMiniHandle()); }

static inline void HwRevoMiniRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(HwRevoMiniHandle(), instId); }

static inline void HwRevoMiniUpdated() { UAVObjUpdated(HwRevoMiniHandle()); }

static inline void HwRevoMiniInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(HwRevoMiniHandle(), instId); }

static inline int32_t HwRevoMiniGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(HwRevoMiniHandle(), dataOut); }

static inline int32_t HwRevoMiniSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(HwRevoMiniHandle(), dataIn); }

static inline int8_t HwRevoMiniReadOnly() { return UAVObjReadOnly(HwRevoMiniHandle()); }

static inline uint16_t HwRevoMiniGetNumInstances(){ return UAVObjGetNumInstances(HwRevoMiniHandle()); }

static inline uint32_t HwRevoMiniGetNumBytes(){ return UAVObjGetNumBytes(HwRevoMiniHandle()); }

// Field information
// Field CoordID information
// Field RcvrPort information
/* Enumeration options for field RcvrPort */
typedef enum { HWREVOMINI_RCVRPORT_DISABLED=0, HWREVOMINI_RCVRPORT_PWM=1, HWREVOMINI_RCVRPORT_PPM=2, HWREVOMINI_RCVRPORT_PPMPWM=3, HWREVOMINI_RCVRPORT_PPMOUTPUTS=4, HWREVOMINI_RCVRPORT_OUTPUTS=5 }  __attribute__((packed)) HwRevoMiniRcvrPortOptions;
/* Max value of any option in topmost parent RcvrPort of field RcvrPort */
#define HWREVOMINI_RCVRPORT_GLOBAL_MAXOPTVAL 5
/* Max value of any option in field RcvrPort */
#define HWREVOMINI_RCVRPORT_MAXOPTVAL 5
/* Ensure field RcvrPort contains valid data */
static inline bool HwRevoMiniRcvrPortIsValid( uint8_t CurrentRcvrPort ) { return CurrentRcvrPort < HWREVOMINI_RCVRPORT_MAXOPTVAL; }
// Field MainPort information
/* Enumeration options for field MainPort */
typedef enum { HWREVOMINI_MAINPORT_DISABLED=HWSHARED_PORTTYPES_DISABLED, HWREVOMINI_MAINPORT_TELEMETRY=HWSHARED_PORTTYPES_TELEMETRY, HWREVOMINI_MAINPORT_GPS=HWSHARED_PORTTYPES_GPS, HWREVOMINI_MAINPORT_SBUS=HWSHARED_PORTTYPES_SBUS, HWREVOMINI_MAINPORT_DSM=HWSHARED_PORTTYPES_DSM, HWREVOMINI_MAINPORT_DEBUGCONSOLE=HWSHARED_PORTTYPES_DEBUGCONSOLE, HWREVOMINI_MAINPORT_COMBRIDGE=HWSHARED_PORTTYPES_COMBRIDGE, HWREVOMINI_MAINPORT_MAVLINKTX=HWSHARED_PORTTYPES_MAVLINKTX, HWREVOMINI_MAINPORT_MAVLINKTX_GPS_RX=HWSHARED_PORTTYPES_MAVLINKTX_GPS_RX, HWREVOMINI_MAINPORT_HOTTSUMD=HWSHARED_PORTTYPES_HOTTSUMD, HWREVOMINI_MAINPORT_HOTTSUMH=HWSHARED_PORTTYPES_HOTTSUMH, HWREVOMINI_MAINPORT_HOTTTELEMETRY=HWSHARED_PORTTYPES_HOTTTELEMETRY, HWREVOMINI_MAINPORT_FRSKYSENSORHUB=HWSHARED_PORTTYPES_FRSKYSENSORHUB, HWREVOMINI_MAINPORT_LIGHTTELEMETRYTX=HWSHARED_PORTTYPES_LIGHTTELEMETRYTX, HWREVOMINI_MAINPORT_PICOC=HWSHARED_PORTTYPES_PICOC, HWREVOMINI_MAINPORT_FRSKYSPORTTELEMETRY=HWSHARED_PORTTYPES_FRSKYSPORTTELEMETRY, HWREVOMINI_MAINPORT_DONTSWITCHONCHILDENUMS=255 }  __attribute__((packed)) HwRevoMiniMainPortOptions;
/* Max value of any option in topmost parent PortTypes of field MainPort */
#define HWREVOMINI_MAINPORT_GLOBAL_MAXOPTVAL 20
/* Max value of any option in field MainPort */
#define HWREVOMINI_MAINPORT_MAXOPTVAL 16
/* Ensure field MainPort contains valid data */
static inline bool HwRevoMiniMainPortIsValid( uint8_t CurrentMainPort ) { return CurrentMainPort < HWREVOMINI_MAINPORT_MAXOPTVAL; }
// Field FlexiPort information
/* Enumeration options for field FlexiPort */
typedef enum { HWREVOMINI_FLEXIPORT_DISABLED=HWSHARED_PORTTYPES_DISABLED, HWREVOMINI_FLEXIPORT_TELEMETRY=HWSHARED_PORTTYPES_TELEMETRY, HWREVOMINI_FLEXIPORT_GPS=HWSHARED_PORTTYPES_GPS, HWREVOMINI_FLEXIPORT_I2C=HWSHARED_PORTTYPES_I2C, HWREVOMINI_FLEXIPORT_DSM=HWSHARED_PORTTYPES_DSM, HWREVOMINI_FLEXIPORT_DEBUGCONSOLE=HWSHARED_PORTTYPES_DEBUGCONSOLE, HWREVOMINI_FLEXIPORT_COMBRIDGE=HWSHARED_PORTTYPES_COMBRIDGE, HWREVOMINI_FLEXIPORT_MAVLINKTX=HWSHARED_PORTTYPES_MAVLINKTX, HWREVOMINI_FLEXIPORT_MAVLINKTX_GPS_RX=HWSHARED_PORTTYPES_MAVLINKTX_GPS_RX, HWREVOMINI_FLEXIPORT_HOTTSUMD=HWSHARED_PORTTYPES_HOTTSUMD, HWREVOMINI_FLEXIPORT_HOTTSUMH=HWSHARED_PORTTYPES_HOTTSUMH, HWREVOMINI_FLEXIPORT_HOTTTELEMETRY=HWSHARED_PORTTYPES_HOTTTELEMETRY, HWREVOMINI_FLEXIPORT_FRSKYSENSORHUB=HWSHARED_PORTTYPES_FRSKYSENSORHUB, HWREVOMINI_FLEXIPORT_LIGHTTELEMETRYTX=HWSHARED_PORTTYPES_LIGHTTELEMETRYTX, HWREVOMINI_FLEXIPORT_PICOC=HWSHARED_PORTTYPES_PICOC, HWREVOMINI_FLEXIPORT_FRSKYSPORTTELEMETRY=HWSHARED_PORTTYPES_FRSKYSPORTTELEMETRY, HWREVOMINI_FLEXIPORT_DONTSWITCHONCHILDENUMS=255 }  __attribute__((packed)) HwRevoMiniFlexiPortOptions;
/* Max value of any option in topmost parent PortTypes of field FlexiPort */
#define HWREVOMINI_FLEXIPORT_GLOBAL_MAXOPTVAL 20
/* Max value of any option in field FlexiPort */
#define HWREVOMINI_FLEXIPORT_MAXOPTVAL 18
/* Ensure field FlexiPort contains valid data */
static inline bool HwRevoMiniFlexiPortIsValid( uint8_t CurrentFlexiPort ) { return CurrentFlexiPort < HWREVOMINI_FLEXIPORT_MAXOPTVAL; }
// Field USB_HIDPort information
/* Enumeration options for field USB_HIDPort */
typedef enum { HWREVOMINI_USB_HIDPORT_USBTELEMETRY=HWSHARED_USB_HIDPORT_USBTELEMETRY, HWREVOMINI_USB_HIDPORT_DISABLED=HWSHARED_USB_HIDPORT_DISABLED, HWREVOMINI_USB_HIDPORT_DONTSWITCHONCHILDENUMS=255 }  __attribute__((packed)) HwRevoMiniUSB_HIDPortOptions;
/* Max value of any option in topmost parent USB_HIDPort of field USB_HIDPort */
#define HWREVOMINI_USB_HIDPORT_GLOBAL_MAXOPTVAL 1
/* Max value of any option in field USB_HIDPort */
#define HWREVOMINI_USB_HIDPORT_MAXOPTVAL 1
/* Ensure field USB_HIDPort contains valid data */
static inline bool HwRevoMiniUSB_HIDPortIsValid( uint8_t CurrentUSB_HIDPort ) { return CurrentUSB_HIDPort < HWREVOMINI_USB_HIDPORT_MAXOPTVAL; }
// Field USB_VCPPort information
/* Enumeration options for field USB_VCPPort */
typedef enum { HWREVOMINI_USB_VCPPORT_USBTELEMETRY=HWSHARED_USB_VCPPORT_USBTELEMETRY, HWREVOMINI_USB_VCPPORT_COMBRIDGE=HWSHARED_USB_VCPPORT_COMBRIDGE, HWREVOMINI_USB_VCPPORT_DEBUGCONSOLE=HWSHARED_USB_VCPPORT_DEBUGCONSOLE, HWREVOMINI_USB_VCPPORT_PICOC=HWSHARED_USB_VCPPORT_PICOC, HWREVOMINI_USB_VCPPORT_DISABLED=HWSHARED_USB_VCPPORT_DISABLED, HWREVOMINI_USB_VCPPORT_DONTSWITCHONCHILDENUMS=255 }  __attribute__((packed)) HwRevoMiniUSB_VCPPortOptions;
/* Max value of any option in topmost parent USB_VCPPort of field USB_VCPPort */
#define HWREVOMINI_USB_VCPPORT_GLOBAL_MAXOPTVAL 4
/* Max value of any option in field USB_VCPPort */
#define HWREVOMINI_USB_VCPPORT_MAXOPTVAL 4
/* Ensure field USB_VCPPort contains valid data */
static inline bool HwRevoMiniUSB_VCPPortIsValid( uint8_t CurrentUSB_VCPPort ) { return CurrentUSB_VCPPort < HWREVOMINI_USB_VCPPORT_MAXOPTVAL; }
// Field DSMxMode information
/* Enumeration options for field DSMxMode */
typedef enum { HWREVOMINI_DSMXMODE_AUTODETECT=HWSHARED_DSMXMODE_AUTODETECT, HWREVOMINI_DSMXMODE_FORCE10BIT=HWSHARED_DSMXMODE_FORCE10BIT, HWREVOMINI_DSMXMODE_FORCE11BIT=HWSHARED_DSMXMODE_FORCE11BIT, HWREVOMINI_DSMXMODE_BIND3PULSES=HWSHARED_DSMXMODE_BIND3PULSES, HWREVOMINI_DSMXMODE_BIND4PULSES=HWSHARED_DSMXMODE_BIND4PULSES, HWREVOMINI_DSMXMODE_BIND5PULSES=HWSHARED_DSMXMODE_BIND5PULSES, HWREVOMINI_DSMXMODE_BIND6PULSES=HWSHARED_DSMXMODE_BIND6PULSES, HWREVOMINI_DSMXMODE_BIND7PULSES=HWSHARED_DSMXMODE_BIND7PULSES, HWREVOMINI_DSMXMODE_BIND8PULSES=HWSHARED_DSMXMODE_BIND8PULSES, HWREVOMINI_DSMXMODE_BIND9PULSES=HWSHARED_DSMXMODE_BIND9PULSES, HWREVOMINI_DSMXMODE_BIND10PULSES=HWSHARED_DSMXMODE_BIND10PULSES, HWREVOMINI_DSMXMODE_DONTSWITCHONCHILDENUMS=255 }  __attribute__((packed)) HwRevoMiniDSMxModeOptions;
/* Max value of any option in topmost parent DSMxMode of field DSMxMode */
#define HWREVOMINI_DSMXMODE_GLOBAL_MAXOPTVAL 10
/* Max value of any option in field DSMxMode */
#define HWREVOMINI_DSMXMODE_MAXOPTVAL 10
/* Ensure field DSMxMode contains valid data */
static inline bool HwRevoMiniDSMxModeIsValid( uint8_t CurrentDSMxMode ) { return CurrentDSMxMode < HWREVOMINI_DSMXMODE_MAXOPTVAL; }
// Field Radio information
/* Enumeration options for field Radio */
typedef enum { HWREVOMINI_RADIO_DISABLED=HWSHARED_RADIOPORT_DISABLED, HWREVOMINI_RADIO_TELEM=HWSHARED_RADIOPORT_TELEM, HWREVOMINI_RADIO_TELEMPPM=HWSHARED_RADIOPORT_TELEMPPM, HWREVOMINI_RADIO_PPM=HWSHARED_RADIOPORT_PPM, HWREVOMINI_RADIO_OPENLRS=HWSHARED_RADIOPORT_OPENLRS, HWREVOMINI_RADIO_DONTSWITCHONCHILDENUMS=255 }  __attribute__((packed)) HwRevoMiniRadioOptions;
/* Max value of any option in topmost parent RadioPort of field Radio */
#define HWREVOMINI_RADIO_GLOBAL_MAXOPTVAL 4
/* Max value of any option in field Radio */
#define HWREVOMINI_RADIO_MAXOPTVAL 4
/* Ensure field Radio contains valid data */
static inline bool HwRevoMiniRadioIsValid( uint8_t CurrentRadio ) { return CurrentRadio < HWREVOMINI_RADIO_MAXOPTVAL; }
// Field MaxRfSpeed information
/* Enumeration options for field MaxRfSpeed */
typedef enum { HWREVOMINI_MAXRFSPEED_9600=0, HWREVOMINI_MAXRFSPEED_19200=1, HWREVOMINI_MAXRFSPEED_32000=2, HWREVOMINI_MAXRFSPEED_64000=3, HWREVOMINI_MAXRFSPEED_100000=4, HWREVOMINI_MAXRFSPEED_192000=5 }  __attribute__((packed)) HwRevoMiniMaxRfSpeedOptions;
/* Max value of any option in topmost parent MaxRfSpeed of field MaxRfSpeed */
#define HWREVOMINI_MAXRFSPEED_GLOBAL_MAXOPTVAL 5
/* Max value of any option in field MaxRfSpeed */
#define HWREVOMINI_MAXRFSPEED_MAXOPTVAL 5
/* Ensure field MaxRfSpeed contains valid data */
static inline bool HwRevoMiniMaxRfSpeedIsValid( uint8_t CurrentMaxRfSpeed ) { return CurrentMaxRfSpeed < HWREVOMINI_MAXRFSPEED_MAXOPTVAL; }
// Field MaxRfPower information
/* Enumeration options for field MaxRfPower */
typedef enum { HWREVOMINI_MAXRFPOWER_0=0, HWREVOMINI_MAXRFPOWER_125=1, HWREVOMINI_MAXRFPOWER_16=2, HWREVOMINI_MAXRFPOWER_316=3, HWREVOMINI_MAXRFPOWER_63=4, HWREVOMINI_MAXRFPOWER_126=5, HWREVOMINI_MAXRFPOWER_25=6, HWREVOMINI_MAXRFPOWER_50=7, HWREVOMINI_MAXRFPOWER_100=8 }  __attribute__((packed)) HwRevoMiniMaxRfPowerOptions;
/* Max value of any option in topmost parent MaxRfPower of field MaxRfPower */
#define HWREVOMINI_MAXRFPOWER_GLOBAL_MAXOPTVAL 8
/* Max value of any option in field MaxRfPower */
#define HWREVOMINI_MAXRFPOWER_MAXOPTVAL 8
/* Ensure field MaxRfPower contains valid data */
static inline bool HwRevoMiniMaxRfPowerIsValid( uint8_t CurrentMaxRfPower ) { return CurrentMaxRfPower < HWREVOMINI_MAXRFPOWER_MAXOPTVAL; }
// Field RfBand information
/* Enumeration options for field RfBand */
typedef enum { HWREVOMINI_RFBAND_BOARDDEFAULT=HWSHARED_RFBAND_BOARDDEFAULT, HWREVOMINI_RFBAND_433=HWSHARED_RFBAND_433, HWREVOMINI_RFBAND_868=HWSHARED_RFBAND_868, HWREVOMINI_RFBAND_915=HWSHARED_RFBAND_915, HWREVOMINI_RFBAND_DONTSWITCHONCHILDENUMS=255 }  __attribute__((packed)) HwRevoMiniRfBandOptions;
/* Max value of any option in topmost parent RfBand of field RfBand */
#define HWREVOMINI_RFBAND_GLOBAL_MAXOPTVAL 3
/* Max value of any option in field RfBand */
#define HWREVOMINI_RFBAND_MAXOPTVAL 3
/* Ensure field RfBand contains valid data */
static inline bool HwRevoMiniRfBandIsValid( uint8_t CurrentRfBand ) { return CurrentRfBand < HWREVOMINI_RFBAND_MAXOPTVAL; }
// Field MinChannel information
// Field MaxChannel information
// Field ChannelSet information
// Field GyroRange information
/* Enumeration options for field GyroRange */
typedef enum { HWREVOMINI_GYRORANGE_250=0, HWREVOMINI_GYRORANGE_500=1, HWREVOMINI_GYRORANGE_1000=2, HWREVOMINI_GYRORANGE_2000=3 }  __attribute__((packed)) HwRevoMiniGyroRangeOptions;
/* Max value of any option in topmost parent GyroRange of field GyroRange */
#define HWREVOMINI_GYRORANGE_GLOBAL_MAXOPTVAL 3
/* Max value of any option in field GyroRange */
#define HWREVOMINI_GYRORANGE_MAXOPTVAL 3
/* Ensure field GyroRange contains valid data */
static inline bool HwRevoMiniGyroRangeIsValid( uint8_t CurrentGyroRange ) { return CurrentGyroRange < HWREVOMINI_GYRORANGE_MAXOPTVAL; }
// Field AccelRange information
/* Enumeration options for field AccelRange */
typedef enum { HWREVOMINI_ACCELRANGE_2G=0, HWREVOMINI_ACCELRANGE_4G=1, HWREVOMINI_ACCELRANGE_8G=2, HWREVOMINI_ACCELRANGE_16G=3 }  __attribute__((packed)) HwRevoMiniAccelRangeOptions;
/* Max value of any option in topmost parent AccelRange of field AccelRange */
#define HWREVOMINI_ACCELRANGE_GLOBAL_MAXOPTVAL 3
/* Max value of any option in field AccelRange */
#define HWREVOMINI_ACCELRANGE_MAXOPTVAL 3
/* Ensure field AccelRange contains valid data */
static inline bool HwRevoMiniAccelRangeIsValid( uint8_t CurrentAccelRange ) { return CurrentAccelRange < HWREVOMINI_ACCELRANGE_MAXOPTVAL; }
// Field MPU6000Rate information
/* Enumeration options for field MPU6000Rate */
typedef enum { HWREVOMINI_MPU6000RATE_200=0, HWREVOMINI_MPU6000RATE_333=1, HWREVOMINI_MPU6000RATE_500=2, HWREVOMINI_MPU6000RATE_666=3, HWREVOMINI_MPU6000RATE_1000=4, HWREVOMINI_MPU6000RATE_2000=5, HWREVOMINI_MPU6000RATE_4000=6, HWREVOMINI_MPU6000RATE_8000=7 }  __attribute__((packed)) HwRevoMiniMPU6000RateOptions;
/* Max value of any option in topmost parent MPU6000Rate of field MPU6000Rate */
#define HWREVOMINI_MPU6000RATE_GLOBAL_MAXOPTVAL 7
/* Max value of any option in field MPU6000Rate */
#define HWREVOMINI_MPU6000RATE_MAXOPTVAL 7
/* Ensure field MPU6000Rate contains valid data */
static inline bool HwRevoMiniMPU6000RateIsValid( uint8_t CurrentMPU6000Rate ) { return CurrentMPU6000Rate < HWREVOMINI_MPU6000RATE_MAXOPTVAL; }
// Field MPU6000DLPF information
/* Enumeration options for field MPU6000DLPF */
typedef enum { HWREVOMINI_MPU6000DLPF_256=0, HWREVOMINI_MPU6000DLPF_188=1, HWREVOMINI_MPU6000DLPF_98=2, HWREVOMINI_MPU6000DLPF_42=3, HWREVOMINI_MPU6000DLPF_20=4, HWREVOMINI_MPU6000DLPF_10=5, HWREVOMINI_MPU6000DLPF_5=6 }  __attribute__((packed)) HwRevoMiniMPU6000DLPFOptions;
/* Max value of any option in topmost parent MPU6000DLPF of field MPU6000DLPF */
#define HWREVOMINI_MPU6000DLPF_GLOBAL_MAXOPTVAL 6
/* Max value of any option in field MPU6000DLPF */
#define HWREVOMINI_MPU6000DLPF_MAXOPTVAL 6
/* Ensure field MPU6000DLPF contains valid data */
static inline bool HwRevoMiniMPU6000DLPFIsValid( uint8_t CurrentMPU6000DLPF ) { return CurrentMPU6000DLPF < HWREVOMINI_MPU6000DLPF_MAXOPTVAL; }


// set/Get functions
extern void HwRevoMiniCoordIDSet( uint32_t *NewCoordID );
extern void HwRevoMiniCoordIDGet( uint32_t *NewCoordID );
extern void HwRevoMiniRcvrPortSet( uint8_t *NewRcvrPort );
extern void HwRevoMiniRcvrPortGet( uint8_t *NewRcvrPort );
extern void HwRevoMiniMainPortSet( uint8_t *NewMainPort );
extern void HwRevoMiniMainPortGet( uint8_t *NewMainPort );
extern void HwRevoMiniFlexiPortSet( uint8_t *NewFlexiPort );
extern void HwRevoMiniFlexiPortGet( uint8_t *NewFlexiPort );
extern void HwRevoMiniUSB_HIDPortSet( uint8_t *NewUSB_HIDPort );
extern void HwRevoMiniUSB_HIDPortGet( uint8_t *NewUSB_HIDPort );
extern void HwRevoMiniUSB_VCPPortSet( uint8_t *NewUSB_VCPPort );
extern void HwRevoMiniUSB_VCPPortGet( uint8_t *NewUSB_VCPPort );
extern void HwRevoMiniDSMxModeSet( uint8_t *NewDSMxMode );
extern void HwRevoMiniDSMxModeGet( uint8_t *NewDSMxMode );
extern void HwRevoMiniRadioSet( uint8_t *NewRadio );
extern void HwRevoMiniRadioGet( uint8_t *NewRadio );
extern void HwRevoMiniMaxRfSpeedSet( uint8_t *NewMaxRfSpeed );
extern void HwRevoMiniMaxRfSpeedGet( uint8_t *NewMaxRfSpeed );
extern void HwRevoMiniMaxRfPowerSet( uint8_t *NewMaxRfPower );
extern void HwRevoMiniMaxRfPowerGet( uint8_t *NewMaxRfPower );
extern void HwRevoMiniRfBandSet( uint8_t *NewRfBand );
extern void HwRevoMiniRfBandGet( uint8_t *NewRfBand );
extern void HwRevoMiniMinChannelSet( uint8_t *NewMinChannel );
extern void HwRevoMiniMinChannelGet( uint8_t *NewMinChannel );
extern void HwRevoMiniMaxChannelSet( uint8_t *NewMaxChannel );
extern void HwRevoMiniMaxChannelGet( uint8_t *NewMaxChannel );
extern void HwRevoMiniChannelSetSet( uint8_t *NewChannelSet );
extern void HwRevoMiniChannelSetGet( uint8_t *NewChannelSet );
extern void HwRevoMiniGyroRangeSet( uint8_t *NewGyroRange );
extern void HwRevoMiniGyroRangeGet( uint8_t *NewGyroRange );
extern void HwRevoMiniAccelRangeSet( uint8_t *NewAccelRange );
extern void HwRevoMiniAccelRangeGet( uint8_t *NewAccelRange );
extern void HwRevoMiniMPU6000RateSet( uint8_t *NewMPU6000Rate );
extern void HwRevoMiniMPU6000RateGet( uint8_t *NewMPU6000Rate );
extern void HwRevoMiniMPU6000DLPFSet( uint8_t *NewMPU6000DLPF );
extern void HwRevoMiniMPU6000DLPFGet( uint8_t *NewMPU6000DLPF );


#endif // HWREVOMINI_H

/**
 * @}
 * @}
 */
