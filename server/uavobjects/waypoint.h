/**
 ******************************************************************************
 * @addtogroup UAVObjects UAVObject set for this firmware
 * @{
 * @addtogroup Waypoint Waypoint
 * @brief A waypoint the aircraft can try and hit.  Used by the @ref PathPlanner module
 *
 *
 * @file       waypoint.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @author     Tau Labs, http://taulabs.org, Copyright (C) 2012-2013
 * @brief      Include files for the Waypoint object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: waypoint.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef WAYPOINT_H
#define WAYPOINT_H

// Object constants
#define WAYPOINT_OBJID 0xA6C50A74
#define WAYPOINT_ISSINGLEINST 0
#define WAYPOINT_ISSETTINGS 0
#define WAYPOINT_NUMBYTES 21

// Generic interface functions
int32_t WaypointInitialize();
UAVObjHandle WaypointHandle();
void WaypointSetDefaults(UAVObjHandle obj, uint16_t instId);

// Object data
typedef struct {
    float Position[3];
    float Velocity;
    float ModeParameters;
    uint8_t Mode;

} __attribute__((packed)) __attribute__((aligned(4))) WaypointData;

// Typesafe Object access functions
/**
 * @function WaypointGet(dataOut)
 * @brief Populate a WaypointData object
 * @param[out] dataOut 
 */
static inline int32_t WaypointGet(WaypointData *dataOut) { return UAVObjGetData(WaypointHandle(), dataOut); }

static inline int32_t WaypointSet(const WaypointData *dataIn) { return UAVObjSetData(WaypointHandle(), dataIn); }

static inline int32_t WaypointInstGet(uint16_t instId, WaypointData *dataOut) { return UAVObjGetInstanceData(WaypointHandle(), instId, dataOut); }

static inline int32_t WaypointInstSet(uint16_t instId, const WaypointData *dataIn) { return UAVObjSetInstanceData(WaypointHandle(), instId, dataIn); }

static inline int32_t WaypointConnectQueue(xQueueHandle queue) { return UAVObjConnectQueue(WaypointHandle(), queue, EV_MASK_ALL_UPDATES); }

static inline int32_t WaypointConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(WaypointHandle(), cb, EV_MASK_ALL_UPDATES); }

static inline uint16_t WaypointCreateInstance() { return UAVObjCreateInstance(WaypointHandle(), &WaypointSetDefaults); }

static inline void WaypointRequestUpdate() { UAVObjRequestUpdate(WaypointHandle()); }

static inline void WaypointRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(WaypointHandle(), instId); }

static inline void WaypointUpdated() { UAVObjUpdated(WaypointHandle()); }

static inline void WaypointInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(WaypointHandle(), instId); }

static inline int32_t WaypointGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(WaypointHandle(), dataOut); }

static inline int32_t WaypointSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(WaypointHandle(), dataIn); }

static inline int8_t WaypointReadOnly() { return UAVObjReadOnly(WaypointHandle()); }

static inline uint16_t WaypointGetNumInstances(){ return UAVObjGetNumInstances(WaypointHandle()); }

static inline uint32_t WaypointGetNumBytes(){ return UAVObjGetNumBytes(WaypointHandle()); }

// Field information
// Field Position information
/* Array element names for field Position */
typedef enum { WAYPOINT_POSITION_NORTH=0, WAYPOINT_POSITION_EAST=1, WAYPOINT_POSITION_DOWN=2 } __attribute__((packed)) WaypointPositionElem;
/* Number of elements for field Position */
#define WAYPOINT_POSITION_NUMELEM 3
// Field Velocity information
// Field ModeParameters information
// Field Mode information
/* Enumeration options for field Mode */
typedef enum { WAYPOINT_MODE_FLYENDPOINT=0, WAYPOINT_MODE_FLYVECTOR=1, WAYPOINT_MODE_FLYCIRCLERIGHT=2, WAYPOINT_MODE_FLYCIRCLELEFT=3, WAYPOINT_MODE_DRIVEENDPOINT=4, WAYPOINT_MODE_DRIVEVECTOR=5, WAYPOINT_MODE_DRIVECIRCLELEFT=6, WAYPOINT_MODE_DRIVECIRCLERIGHT=7, WAYPOINT_MODE_HOLDPOSITION=8, WAYPOINT_MODE_CIRCLEPOSITIONLEFT=9, WAYPOINT_MODE_CIRCLEPOSITIONRIGHT=10, WAYPOINT_MODE_LAND=11, WAYPOINT_MODE_STOP=12, WAYPOINT_MODE_INVALID=13 }  __attribute__((packed)) WaypointModeOptions;


// set/Get functions
extern void WaypointPositionSet( float *NewPosition );
extern void WaypointPositionGet( float *NewPosition );
extern void WaypointVelocitySet( float *NewVelocity );
extern void WaypointVelocityGet( float *NewVelocity );
extern void WaypointModeParametersSet( float *NewModeParameters );
extern void WaypointModeParametersGet( float *NewModeParameters );
extern void WaypointModeSet( uint8_t *NewMode );
extern void WaypointModeGet( uint8_t *NewMode );


#endif // WAYPOINT_H

/**
 * @}
 * @}
 */
