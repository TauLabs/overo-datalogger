/**
 ******************************************************************************
 * @addtogroup UAVObjects UAVObject set for this firmware
 * @{
 * @addtogroup SensorSettings SensorSettings
 * @brief Settings for the @ref Attitude module
 *
 *
 * @file       sensorsettings.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @author     Tau Labs, http://taulabs.org, Copyright (C) 2012-2013
 * @brief      Include files for the SensorSettings object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: sensorsettings.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef SENSORSETTINGS_H
#define SENSORSETTINGS_H

// Object constants
#define SENSORSETTINGS_OBJID 0xADB3B106
#define SENSORSETTINGS_ISSINGLEINST 1
#define SENSORSETTINGS_ISSETTINGS 1
#define SENSORSETTINGS_NUMBYTES 112

// Generic interface functions
int32_t SensorSettingsInitialize();
UAVObjHandle SensorSettingsHandle();
void SensorSettingsSetDefaults(UAVObjHandle obj, uint16_t instId);

// Object data
typedef struct {
    float AccelBias[3];
    float AccelScale[3];
    float GyroScale[3];
    float XGyroTempCoeff[4];
    float YGyroTempCoeff[4];
    float ZGyroTempCoeff[4];
    float MagBias[3];
    float MagScale[3];
    float ZAccelOffset;

} __attribute__((packed)) __attribute__((aligned(4))) SensorSettingsData;

// Typesafe Object access functions
/**
 * @function SensorSettingsGet(dataOut)
 * @brief Populate a SensorSettingsData object
 * @param[out] dataOut 
 */
static inline int32_t SensorSettingsGet(SensorSettingsData *dataOut) { return UAVObjGetData(SensorSettingsHandle(), dataOut); }

static inline int32_t SensorSettingsSet(const SensorSettingsData *dataIn) { return UAVObjSetData(SensorSettingsHandle(), dataIn); }

static inline int32_t SensorSettingsInstGet(uint16_t instId, SensorSettingsData *dataOut) { return UAVObjGetInstanceData(SensorSettingsHandle(), instId, dataOut); }

static inline int32_t SensorSettingsInstSet(uint16_t instId, const SensorSettingsData *dataIn) { return UAVObjSetInstanceData(SensorSettingsHandle(), instId, dataIn); }

static inline int32_t SensorSettingsConnectQueue(xQueueHandle queue) { return UAVObjConnectQueue(SensorSettingsHandle(), queue, EV_MASK_ALL_UPDATES); }

static inline int32_t SensorSettingsConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(SensorSettingsHandle(), cb, EV_MASK_ALL_UPDATES); }

static inline uint16_t SensorSettingsCreateInstance() { return UAVObjCreateInstance(SensorSettingsHandle(), &SensorSettingsSetDefaults); }

static inline void SensorSettingsRequestUpdate() { UAVObjRequestUpdate(SensorSettingsHandle()); }

static inline void SensorSettingsRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(SensorSettingsHandle(), instId); }

static inline void SensorSettingsUpdated() { UAVObjUpdated(SensorSettingsHandle()); }

static inline void SensorSettingsInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(SensorSettingsHandle(), instId); }

static inline int32_t SensorSettingsGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(SensorSettingsHandle(), dataOut); }

static inline int32_t SensorSettingsSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(SensorSettingsHandle(), dataIn); }

static inline int8_t SensorSettingsReadOnly() { return UAVObjReadOnly(SensorSettingsHandle()); }

static inline uint16_t SensorSettingsGetNumInstances(){ return UAVObjGetNumInstances(SensorSettingsHandle()); }

static inline uint32_t SensorSettingsGetNumBytes(){ return UAVObjGetNumBytes(SensorSettingsHandle()); }

// Field information
// Field AccelBias information
/* Array element names for field AccelBias */
typedef enum { SENSORSETTINGS_ACCELBIAS_X=0, SENSORSETTINGS_ACCELBIAS_Y=1, SENSORSETTINGS_ACCELBIAS_Z=2 } __attribute__((packed)) SensorSettingsAccelBiasElem;
/* Number of elements for field AccelBias */
#define SENSORSETTINGS_ACCELBIAS_NUMELEM 3
// Field AccelScale information
/* Array element names for field AccelScale */
typedef enum { SENSORSETTINGS_ACCELSCALE_X=0, SENSORSETTINGS_ACCELSCALE_Y=1, SENSORSETTINGS_ACCELSCALE_Z=2 } __attribute__((packed)) SensorSettingsAccelScaleElem;
/* Number of elements for field AccelScale */
#define SENSORSETTINGS_ACCELSCALE_NUMELEM 3
// Field GyroScale information
/* Array element names for field GyroScale */
typedef enum { SENSORSETTINGS_GYROSCALE_X=0, SENSORSETTINGS_GYROSCALE_Y=1, SENSORSETTINGS_GYROSCALE_Z=2 } __attribute__((packed)) SensorSettingsGyroScaleElem;
/* Number of elements for field GyroScale */
#define SENSORSETTINGS_GYROSCALE_NUMELEM 3
// Field XGyroTempCoeff information
/* Array element names for field XGyroTempCoeff */
typedef enum { SENSORSETTINGS_XGYROTEMPCOEFF_1=0, SENSORSETTINGS_XGYROTEMPCOEFF_T=1, SENSORSETTINGS_XGYROTEMPCOEFF_T2=2, SENSORSETTINGS_XGYROTEMPCOEFF_T3=3 } __attribute__((packed)) SensorSettingsXGyroTempCoeffElem;
/* Number of elements for field XGyroTempCoeff */
#define SENSORSETTINGS_XGYROTEMPCOEFF_NUMELEM 4
// Field YGyroTempCoeff information
/* Array element names for field YGyroTempCoeff */
typedef enum { SENSORSETTINGS_YGYROTEMPCOEFF_1=0, SENSORSETTINGS_YGYROTEMPCOEFF_T=1, SENSORSETTINGS_YGYROTEMPCOEFF_T2=2, SENSORSETTINGS_YGYROTEMPCOEFF_T3=3 } __attribute__((packed)) SensorSettingsYGyroTempCoeffElem;
/* Number of elements for field YGyroTempCoeff */
#define SENSORSETTINGS_YGYROTEMPCOEFF_NUMELEM 4
// Field ZGyroTempCoeff information
/* Array element names for field ZGyroTempCoeff */
typedef enum { SENSORSETTINGS_ZGYROTEMPCOEFF_1=0, SENSORSETTINGS_ZGYROTEMPCOEFF_T=1, SENSORSETTINGS_ZGYROTEMPCOEFF_T2=2, SENSORSETTINGS_ZGYROTEMPCOEFF_T3=3 } __attribute__((packed)) SensorSettingsZGyroTempCoeffElem;
/* Number of elements for field ZGyroTempCoeff */
#define SENSORSETTINGS_ZGYROTEMPCOEFF_NUMELEM 4
// Field MagBias information
/* Array element names for field MagBias */
typedef enum { SENSORSETTINGS_MAGBIAS_X=0, SENSORSETTINGS_MAGBIAS_Y=1, SENSORSETTINGS_MAGBIAS_Z=2 } __attribute__((packed)) SensorSettingsMagBiasElem;
/* Number of elements for field MagBias */
#define SENSORSETTINGS_MAGBIAS_NUMELEM 3
// Field MagScale information
/* Array element names for field MagScale */
typedef enum { SENSORSETTINGS_MAGSCALE_X=0, SENSORSETTINGS_MAGSCALE_Y=1, SENSORSETTINGS_MAGSCALE_Z=2 } __attribute__((packed)) SensorSettingsMagScaleElem;
/* Number of elements for field MagScale */
#define SENSORSETTINGS_MAGSCALE_NUMELEM 3
// Field ZAccelOffset information


// set/Get functions
extern void SensorSettingsAccelBiasSet( float *NewAccelBias );
extern void SensorSettingsAccelBiasGet( float *NewAccelBias );
extern void SensorSettingsAccelScaleSet( float *NewAccelScale );
extern void SensorSettingsAccelScaleGet( float *NewAccelScale );
extern void SensorSettingsGyroScaleSet( float *NewGyroScale );
extern void SensorSettingsGyroScaleGet( float *NewGyroScale );
extern void SensorSettingsXGyroTempCoeffSet( float *NewXGyroTempCoeff );
extern void SensorSettingsXGyroTempCoeffGet( float *NewXGyroTempCoeff );
extern void SensorSettingsYGyroTempCoeffSet( float *NewYGyroTempCoeff );
extern void SensorSettingsYGyroTempCoeffGet( float *NewYGyroTempCoeff );
extern void SensorSettingsZGyroTempCoeffSet( float *NewZGyroTempCoeff );
extern void SensorSettingsZGyroTempCoeffGet( float *NewZGyroTempCoeff );
extern void SensorSettingsMagBiasSet( float *NewMagBias );
extern void SensorSettingsMagBiasGet( float *NewMagBias );
extern void SensorSettingsMagScaleSet( float *NewMagScale );
extern void SensorSettingsMagScaleGet( float *NewMagScale );
extern void SensorSettingsZAccelOffsetSet( float *NewZAccelOffset );
extern void SensorSettingsZAccelOffsetGet( float *NewZAccelOffset );


#endif // SENSORSETTINGS_H

/**
 * @}
 * @}
 */
