/**
 ******************************************************************************
 * @addtogroup UAVObjects UAVObject set for this firmware
 * @{
 * @addtogroup PicoCStatus PicoCStatus
 * @brief status information of the @ref PicoC Interpreter Module.
 *
 *
 * @file       picocstatus.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @author     Tau Labs, http://taulabs.org, Copyright (C) 2012-2013
 * @brief      Include files for the PicoCStatus object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: picocstatus.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef PICOCSTATUS_H
#define PICOCSTATUS_H

// Object constants
#define PICOCSTATUS_OBJID 0x2AD19EAA
#define PICOCSTATUS_ISSINGLEINST 1
#define PICOCSTATUS_ISSETTINGS 0
#define PICOCSTATUS_NUMBYTES 41

// Generic interface functions
int32_t PicoCStatusInitialize();
UAVObjHandle PicoCStatusHandle();
void PicoCStatusSetDefaults(UAVObjHandle obj, uint16_t instId);

// Object data
typedef struct {
    int16_t ExitValue;
    int16_t TestValue;
    uint16_t SectorID;
    uint8_t FileID;
    uint8_t Command;
    int8_t CommandError;
    uint8_t Sector[32];

} __attribute__((packed)) __attribute__((aligned(4))) PicoCStatusData;

// Typesafe Object access functions
/**
 * @function PicoCStatusGet(dataOut)
 * @brief Populate a PicoCStatusData object
 * @param[out] dataOut 
 */
static inline int32_t PicoCStatusGet(PicoCStatusData *dataOut) { return UAVObjGetData(PicoCStatusHandle(), dataOut); }

static inline int32_t PicoCStatusSet(const PicoCStatusData *dataIn) { return UAVObjSetData(PicoCStatusHandle(), dataIn); }

static inline int32_t PicoCStatusInstGet(uint16_t instId, PicoCStatusData *dataOut) { return UAVObjGetInstanceData(PicoCStatusHandle(), instId, dataOut); }

static inline int32_t PicoCStatusInstSet(uint16_t instId, const PicoCStatusData *dataIn) { return UAVObjSetInstanceData(PicoCStatusHandle(), instId, dataIn); }

static inline int32_t PicoCStatusConnectQueue(xQueueHandle queue) { return UAVObjConnectQueue(PicoCStatusHandle(), queue, EV_MASK_ALL_UPDATES); }

static inline int32_t PicoCStatusConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(PicoCStatusHandle(), cb, EV_MASK_ALL_UPDATES); }

static inline uint16_t PicoCStatusCreateInstance() { return UAVObjCreateInstance(PicoCStatusHandle(), &PicoCStatusSetDefaults); }

static inline void PicoCStatusRequestUpdate() { UAVObjRequestUpdate(PicoCStatusHandle()); }

static inline void PicoCStatusRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(PicoCStatusHandle(), instId); }

static inline void PicoCStatusUpdated() { UAVObjUpdated(PicoCStatusHandle()); }

static inline void PicoCStatusInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(PicoCStatusHandle(), instId); }

static inline int32_t PicoCStatusGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(PicoCStatusHandle(), dataOut); }

static inline int32_t PicoCStatusSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(PicoCStatusHandle(), dataIn); }

static inline int8_t PicoCStatusReadOnly() { return UAVObjReadOnly(PicoCStatusHandle()); }

static inline uint16_t PicoCStatusGetNumInstances(){ return UAVObjGetNumInstances(PicoCStatusHandle()); }

static inline uint32_t PicoCStatusGetNumBytes(){ return UAVObjGetNumBytes(PicoCStatusHandle()); }

// Field information
// Field ExitValue information
// Field TestValue information
// Field SectorID information
// Field FileID information
// Field Command information
/* Enumeration options for field Command */
typedef enum { PICOCSTATUS_COMMAND_IDLE=0, PICOCSTATUS_COMMAND_USARTMODE=1, PICOCSTATUS_COMMAND_GETSECTOR=2, PICOCSTATUS_COMMAND_SETSECTOR=3, PICOCSTATUS_COMMAND_LOADFILE=4, PICOCSTATUS_COMMAND_SAVEFILE=5, PICOCSTATUS_COMMAND_DELETEFILE=6, PICOCSTATUS_COMMAND_FORMATPARTITION=7 }  __attribute__((packed)) PicoCStatusCommandOptions;
// Field CommandError information
// Field Sector information
/* Number of elements for field Sector */
#define PICOCSTATUS_SECTOR_NUMELEM 32


// set/Get functions
extern void PicoCStatusExitValueSet( int16_t *NewExitValue );
extern void PicoCStatusExitValueGet( int16_t *NewExitValue );
extern void PicoCStatusTestValueSet( int16_t *NewTestValue );
extern void PicoCStatusTestValueGet( int16_t *NewTestValue );
extern void PicoCStatusSectorIDSet( uint16_t *NewSectorID );
extern void PicoCStatusSectorIDGet( uint16_t *NewSectorID );
extern void PicoCStatusFileIDSet( uint8_t *NewFileID );
extern void PicoCStatusFileIDGet( uint8_t *NewFileID );
extern void PicoCStatusCommandSet( uint8_t *NewCommand );
extern void PicoCStatusCommandGet( uint8_t *NewCommand );
extern void PicoCStatusCommandErrorSet( int8_t *NewCommandError );
extern void PicoCStatusCommandErrorGet( int8_t *NewCommandError );
extern void PicoCStatusSectorSet( uint8_t *NewSector );
extern void PicoCStatusSectorGet( uint8_t *NewSector );


#endif // PICOCSTATUS_H

/**
 * @}
 * @}
 */
