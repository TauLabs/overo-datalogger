/**
 ******************************************************************************
 * @addtogroup UAVObjects UAVObject set for this firmware
 * @{
 * @addtogroup FixedWingAirspeeds FixedWingAirspeeds
 * @brief Settings for the @ref FixedWingPathFollowerModule
 *
 *
 * @file       fixedwingairspeeds.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @author     Tau Labs, http://taulabs.org, Copyright (C) 2012-2015
 * @brief      Include files for the FixedWingAirspeeds object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: fixedwingairspeeds.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef FIXEDWINGAIRSPEEDS_H
#define FIXEDWINGAIRSPEEDS_H

#include "pios_queue.h"
#include "uavoversion.h"



// Object constants
#define FIXEDWINGAIRSPEEDS_OBJID 0x3FCF7F6
#define FIXEDWINGAIRSPEEDS_ISSINGLEINST 1
#define FIXEDWINGAIRSPEEDS_ISSETTINGS 1
#define FIXEDWINGAIRSPEEDS_NUMBYTES 24

// Generic interface functions
int32_t FixedWingAirspeedsInitialize();
UAVObjHandle FixedWingAirspeedsHandle();
void FixedWingAirspeedsSetDefaults(UAVObjHandle obj, uint16_t instId);

// Object data
typedef struct {
    float AirSpeedMax;
    float CruiseSpeed;
    float BestClimbRateSpeed;
    float StallSpeedClean;
    float StallSpeedDirty;
    float VerticalVelMax;

} __attribute__((packed)) __attribute__((aligned(4))) FixedWingAirspeedsData;

// Typesafe Object access functions
/**
 * @function FixedWingAirspeedsGet(dataOut)
 * @brief Populate a FixedWingAirspeedsData object
 * @param[out] dataOut 
 */
static inline int32_t FixedWingAirspeedsGet(FixedWingAirspeedsData *dataOut) { return UAVObjGetData(FixedWingAirspeedsHandle(), dataOut); }

static inline int32_t FixedWingAirspeedsSet(const FixedWingAirspeedsData *dataIn) { return UAVObjSetData(FixedWingAirspeedsHandle(), dataIn); }

static inline int32_t FixedWingAirspeedsInstGet(uint16_t instId, FixedWingAirspeedsData *dataOut) { return UAVObjGetInstanceData(FixedWingAirspeedsHandle(), instId, dataOut); }

static inline int32_t FixedWingAirspeedsInstSet(uint16_t instId, const FixedWingAirspeedsData *dataIn) { return UAVObjSetInstanceData(FixedWingAirspeedsHandle(), instId, dataIn); }

static inline int32_t FixedWingAirspeedsConnectQueue(struct pios_queue *queue) { return UAVObjConnectQueue(FixedWingAirspeedsHandle(), queue, EV_MASK_ALL_UPDATES); }

static inline int32_t FixedWingAirspeedsConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(FixedWingAirspeedsHandle(), cb, EV_MASK_ALL_UPDATES); }

static inline uint16_t FixedWingAirspeedsCreateInstance() { return UAVObjCreateInstance(FixedWingAirspeedsHandle(), &FixedWingAirspeedsSetDefaults); }

static inline void FixedWingAirspeedsRequestUpdate() { UAVObjRequestUpdate(FixedWingAirspeedsHandle()); }

static inline void FixedWingAirspeedsRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(FixedWingAirspeedsHandle(), instId); }

static inline void FixedWingAirspeedsUpdated() { UAVObjUpdated(FixedWingAirspeedsHandle()); }

static inline void FixedWingAirspeedsInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(FixedWingAirspeedsHandle(), instId); }

static inline int32_t FixedWingAirspeedsGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(FixedWingAirspeedsHandle(), dataOut); }

static inline int32_t FixedWingAirspeedsSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(FixedWingAirspeedsHandle(), dataIn); }

static inline int8_t FixedWingAirspeedsReadOnly() { return UAVObjReadOnly(FixedWingAirspeedsHandle()); }

static inline uint16_t FixedWingAirspeedsGetNumInstances(){ return UAVObjGetNumInstances(FixedWingAirspeedsHandle()); }

static inline uint32_t FixedWingAirspeedsGetNumBytes(){ return UAVObjGetNumBytes(FixedWingAirspeedsHandle()); }

// Field information
// Field AirSpeedMax information
// Field CruiseSpeed information
// Field BestClimbRateSpeed information
// Field StallSpeedClean information
// Field StallSpeedDirty information
// Field VerticalVelMax information


// set/Get functions
extern void FixedWingAirspeedsAirSpeedMaxSet( float *NewAirSpeedMax );
extern void FixedWingAirspeedsAirSpeedMaxGet( float *NewAirSpeedMax );
extern void FixedWingAirspeedsCruiseSpeedSet( float *NewCruiseSpeed );
extern void FixedWingAirspeedsCruiseSpeedGet( float *NewCruiseSpeed );
extern void FixedWingAirspeedsBestClimbRateSpeedSet( float *NewBestClimbRateSpeed );
extern void FixedWingAirspeedsBestClimbRateSpeedGet( float *NewBestClimbRateSpeed );
extern void FixedWingAirspeedsStallSpeedCleanSet( float *NewStallSpeedClean );
extern void FixedWingAirspeedsStallSpeedCleanGet( float *NewStallSpeedClean );
extern void FixedWingAirspeedsStallSpeedDirtySet( float *NewStallSpeedDirty );
extern void FixedWingAirspeedsStallSpeedDirtyGet( float *NewStallSpeedDirty );
extern void FixedWingAirspeedsVerticalVelMaxSet( float *NewVerticalVelMax );
extern void FixedWingAirspeedsVerticalVelMaxGet( float *NewVerticalVelMax );


#endif // FIXEDWINGAIRSPEEDS_H

/**
 * @}
 * @}
 */
