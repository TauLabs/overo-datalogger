/**
 ******************************************************************************
 * @addtogroup UAVObjects UAVObject set for this firmware
 * @{
 * @addtogroup HwFlyingF3 HwFlyingF3
 * @brief Selection of optional hardware configurations.
 *
 *
 * @file       hwflyingf3.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @author     Tau Labs, http://taulabs.org, Copyright (C) 2012-2013
 * @brief      Include files for the HwFlyingF3 object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: hwflyingf3.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef HWFLYINGF3_H
#define HWFLYINGF3_H

// Object constants
#define HWFLYINGF3_OBJID 0xA82F2D40
#define HWFLYINGF3_ISSINGLEINST 1
#define HWFLYINGF3_ISSETTINGS 1
#define HWFLYINGF3_NUMBYTES 12

// Generic interface functions
int32_t HwFlyingF3Initialize();
UAVObjHandle HwFlyingF3Handle();
void HwFlyingF3SetDefaults(UAVObjHandle obj, uint16_t instId);

// Object data
typedef struct {
    uint8_t RcvrPort;
    uint8_t Uart1;
    uint8_t Uart2;
    uint8_t Uart3;
    uint8_t Uart4;
    uint8_t Uart5;
    uint8_t USB_HIDPort;
    uint8_t USB_VCPPort;
    uint8_t DSMxBind;
    uint8_t GyroRange;
    uint8_t AccelRange;
    uint8_t Shield;

} __attribute__((packed)) __attribute__((aligned(4))) HwFlyingF3Data;

// Typesafe Object access functions
/**
 * @function HwFlyingF3Get(dataOut)
 * @brief Populate a HwFlyingF3Data object
 * @param[out] dataOut 
 */
static inline int32_t HwFlyingF3Get(HwFlyingF3Data *dataOut) { return UAVObjGetData(HwFlyingF3Handle(), dataOut); }

static inline int32_t HwFlyingF3Set(const HwFlyingF3Data *dataIn) { return UAVObjSetData(HwFlyingF3Handle(), dataIn); }

static inline int32_t HwFlyingF3InstGet(uint16_t instId, HwFlyingF3Data *dataOut) { return UAVObjGetInstanceData(HwFlyingF3Handle(), instId, dataOut); }

static inline int32_t HwFlyingF3InstSet(uint16_t instId, const HwFlyingF3Data *dataIn) { return UAVObjSetInstanceData(HwFlyingF3Handle(), instId, dataIn); }

static inline int32_t HwFlyingF3ConnectQueue(xQueueHandle queue) { return UAVObjConnectQueue(HwFlyingF3Handle(), queue, EV_MASK_ALL_UPDATES); }

static inline int32_t HwFlyingF3ConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(HwFlyingF3Handle(), cb, EV_MASK_ALL_UPDATES); }

static inline uint16_t HwFlyingF3CreateInstance() { return UAVObjCreateInstance(HwFlyingF3Handle(), &HwFlyingF3SetDefaults); }

static inline void HwFlyingF3RequestUpdate() { UAVObjRequestUpdate(HwFlyingF3Handle()); }

static inline void HwFlyingF3RequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(HwFlyingF3Handle(), instId); }

static inline void HwFlyingF3Updated() { UAVObjUpdated(HwFlyingF3Handle()); }

static inline void HwFlyingF3InstUpdated(uint16_t instId) { UAVObjInstanceUpdated(HwFlyingF3Handle(), instId); }

static inline int32_t HwFlyingF3GetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(HwFlyingF3Handle(), dataOut); }

static inline int32_t HwFlyingF3SetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(HwFlyingF3Handle(), dataIn); }

static inline int8_t HwFlyingF3ReadOnly() { return UAVObjReadOnly(HwFlyingF3Handle()); }

static inline uint16_t HwFlyingF3GetNumInstances(){ return UAVObjGetNumInstances(HwFlyingF3Handle()); }

static inline uint32_t HwFlyingF3GetNumBytes(){ return UAVObjGetNumBytes(HwFlyingF3Handle()); }

// Field information
// Field RcvrPort information
/* Enumeration options for field RcvrPort */
typedef enum { HWFLYINGF3_RCVRPORT_DISABLED=0, HWFLYINGF3_RCVRPORT_PWM=1, HWFLYINGF3_RCVRPORT_PPM=2, HWFLYINGF3_RCVRPORT_PPMPWM=3, HWFLYINGF3_RCVRPORT_PPMOUTPUTS=4, HWFLYINGF3_RCVRPORT_OUTPUTS=5 }  __attribute__((packed)) HwFlyingF3RcvrPortOptions;
// Field Uart1 information
/* Enumeration options for field Uart1 */
typedef enum { HWFLYINGF3_UART1_DISABLED=0, HWFLYINGF3_UART1_TELEMETRY=1, HWFLYINGF3_UART1_GPS=2, HWFLYINGF3_UART1_SBUS=3, HWFLYINGF3_UART1_DSM2=4, HWFLYINGF3_UART1_DSMX10BIT=5, HWFLYINGF3_UART1_DSMX11BIT=6, HWFLYINGF3_UART1_DEBUGCONSOLE=7, HWFLYINGF3_UART1_COMBRIDGE=8, HWFLYINGF3_UART1_MAVLINKTX=9, HWFLYINGF3_UART1_MAVLINKTX_GPS_RX=10, HWFLYINGF3_UART1_HOTTSUMD=11, HWFLYINGF3_UART1_HOTTSUMH=12, HWFLYINGF3_UART1_HOTTTELEMETRY=13, HWFLYINGF3_UART1_FRSKYSENSORHUB=14, HWFLYINGF3_UART1_LIGHTTELEMETRYTX=15, HWFLYINGF3_UART1_FRSKYSPORTTELEMETRY=16 }  __attribute__((packed)) HwFlyingF3Uart1Options;
// Field Uart2 information
/* Enumeration options for field Uart2 */
typedef enum { HWFLYINGF3_UART2_DISABLED=0, HWFLYINGF3_UART2_TELEMETRY=1, HWFLYINGF3_UART2_GPS=2, HWFLYINGF3_UART2_SBUS=3, HWFLYINGF3_UART2_DSM2=4, HWFLYINGF3_UART2_DSMX10BIT=5, HWFLYINGF3_UART2_DSMX11BIT=6, HWFLYINGF3_UART2_DEBUGCONSOLE=7, HWFLYINGF3_UART2_COMBRIDGE=8, HWFLYINGF3_UART2_MAVLINKTX=9, HWFLYINGF3_UART2_MAVLINKTX_GPS_RX=10, HWFLYINGF3_UART2_HOTTSUMD=11, HWFLYINGF3_UART2_HOTTSUMH=12, HWFLYINGF3_UART2_HOTTTELEMETRY=13, HWFLYINGF3_UART2_FRSKYSENSORHUB=14, HWFLYINGF3_UART2_LIGHTTELEMETRYTX=15, HWFLYINGF3_UART2_FRSKYSPORTTELEMETRY=16 }  __attribute__((packed)) HwFlyingF3Uart2Options;
// Field Uart3 information
/* Enumeration options for field Uart3 */
typedef enum { HWFLYINGF3_UART3_DISABLED=0, HWFLYINGF3_UART3_TELEMETRY=1, HWFLYINGF3_UART3_GPS=2, HWFLYINGF3_UART3_SBUS=3, HWFLYINGF3_UART3_DSM2=4, HWFLYINGF3_UART3_DSMX10BIT=5, HWFLYINGF3_UART3_DSMX11BIT=6, HWFLYINGF3_UART3_DEBUGCONSOLE=7, HWFLYINGF3_UART3_COMBRIDGE=8, HWFLYINGF3_UART3_MAVLINKTX=9, HWFLYINGF3_UART3_MAVLINKTX_GPS_RX=10, HWFLYINGF3_UART3_HOTTSUMD=11, HWFLYINGF3_UART3_HOTTSUMH=12, HWFLYINGF3_UART3_HOTTTELEMETRY=13, HWFLYINGF3_UART3_FRSKYSENSORHUB=14, HWFLYINGF3_UART3_LIGHTTELEMETRYTX=15, HWFLYINGF3_UART3_FRSKYSPORTTELEMETRY=16 }  __attribute__((packed)) HwFlyingF3Uart3Options;
// Field Uart4 information
/* Enumeration options for field Uart4 */
typedef enum { HWFLYINGF3_UART4_DISABLED=0, HWFLYINGF3_UART4_TELEMETRY=1, HWFLYINGF3_UART4_GPS=2, HWFLYINGF3_UART4_SBUS=3, HWFLYINGF3_UART4_DSM2=4, HWFLYINGF3_UART4_DSMX10BIT=5, HWFLYINGF3_UART4_DSMX11BIT=6, HWFLYINGF3_UART4_DEBUGCONSOLE=7, HWFLYINGF3_UART4_COMBRIDGE=8, HWFLYINGF3_UART4_MAVLINKTX=9, HWFLYINGF3_UART4_MAVLINKTX_GPS_RX=10, HWFLYINGF3_UART4_HOTTSUMD=11, HWFLYINGF3_UART4_HOTTSUMH=12, HWFLYINGF3_UART4_HOTTTELEMETRY=13, HWFLYINGF3_UART4_FRSKYSENSORHUB=14, HWFLYINGF3_UART4_LIGHTTELEMETRYTX=15, HWFLYINGF3_UART4_FRSKYSPORTTELEMETRY=16 }  __attribute__((packed)) HwFlyingF3Uart4Options;
// Field Uart5 information
/* Enumeration options for field Uart5 */
typedef enum { HWFLYINGF3_UART5_DISABLED=0, HWFLYINGF3_UART5_TELEMETRY=1, HWFLYINGF3_UART5_GPS=2, HWFLYINGF3_UART5_SBUS=3, HWFLYINGF3_UART5_DSM2=4, HWFLYINGF3_UART5_DSMX10BIT=5, HWFLYINGF3_UART5_DSMX11BIT=6, HWFLYINGF3_UART5_DEBUGCONSOLE=7, HWFLYINGF3_UART5_COMBRIDGE=8, HWFLYINGF3_UART5_MAVLINKTX=9, HWFLYINGF3_UART5_MAVLINKTX_GPS_RX=10, HWFLYINGF3_UART5_HOTTSUMD=11, HWFLYINGF3_UART5_HOTTSUMH=12, HWFLYINGF3_UART5_HOTTTELEMETRY=13, HWFLYINGF3_UART5_FRSKYSENSORHUB=14, HWFLYINGF3_UART5_LIGHTTELEMETRYTX=15, HWFLYINGF3_UART5_FRSKYSPORTTELEMETRY=16 }  __attribute__((packed)) HwFlyingF3Uart5Options;
// Field USB_HIDPort information
/* Enumeration options for field USB_HIDPort */
typedef enum { HWFLYINGF3_USB_HIDPORT_USBTELEMETRY=0, HWFLYINGF3_USB_HIDPORT_RCTRANSMITTER=1, HWFLYINGF3_USB_HIDPORT_DISABLED=2 }  __attribute__((packed)) HwFlyingF3USB_HIDPortOptions;
// Field USB_VCPPort information
/* Enumeration options for field USB_VCPPort */
typedef enum { HWFLYINGF3_USB_VCPPORT_USBTELEMETRY=0, HWFLYINGF3_USB_VCPPORT_COMBRIDGE=1, HWFLYINGF3_USB_VCPPORT_DEBUGCONSOLE=2, HWFLYINGF3_USB_VCPPORT_DISABLED=3 }  __attribute__((packed)) HwFlyingF3USB_VCPPortOptions;
// Field DSMxBind information
// Field GyroRange information
/* Enumeration options for field GyroRange */
typedef enum { HWFLYINGF3_GYRORANGE_250=0, HWFLYINGF3_GYRORANGE_500=1, HWFLYINGF3_GYRORANGE_1000=2, HWFLYINGF3_GYRORANGE_2000=3 }  __attribute__((packed)) HwFlyingF3GyroRangeOptions;
// Field AccelRange information
/* Enumeration options for field AccelRange */
typedef enum { HWFLYINGF3_ACCELRANGE_2G=0, HWFLYINGF3_ACCELRANGE_4G=1, HWFLYINGF3_ACCELRANGE_8G=2, HWFLYINGF3_ACCELRANGE_16G=3 }  __attribute__((packed)) HwFlyingF3AccelRangeOptions;
// Field Shield information
/* Enumeration options for field Shield */
typedef enum { HWFLYINGF3_SHIELD_NONE=0, HWFLYINGF3_SHIELD_RCFLYER=1, HWFLYINGF3_SHIELD_CHEBUZZ=2 }  __attribute__((packed)) HwFlyingF3ShieldOptions;


// set/Get functions
extern void HwFlyingF3RcvrPortSet( uint8_t *NewRcvrPort );
extern void HwFlyingF3RcvrPortGet( uint8_t *NewRcvrPort );
extern void HwFlyingF3Uart1Set( uint8_t *NewUart1 );
extern void HwFlyingF3Uart1Get( uint8_t *NewUart1 );
extern void HwFlyingF3Uart2Set( uint8_t *NewUart2 );
extern void HwFlyingF3Uart2Get( uint8_t *NewUart2 );
extern void HwFlyingF3Uart3Set( uint8_t *NewUart3 );
extern void HwFlyingF3Uart3Get( uint8_t *NewUart3 );
extern void HwFlyingF3Uart4Set( uint8_t *NewUart4 );
extern void HwFlyingF3Uart4Get( uint8_t *NewUart4 );
extern void HwFlyingF3Uart5Set( uint8_t *NewUart5 );
extern void HwFlyingF3Uart5Get( uint8_t *NewUart5 );
extern void HwFlyingF3USB_HIDPortSet( uint8_t *NewUSB_HIDPort );
extern void HwFlyingF3USB_HIDPortGet( uint8_t *NewUSB_HIDPort );
extern void HwFlyingF3USB_VCPPortSet( uint8_t *NewUSB_VCPPort );
extern void HwFlyingF3USB_VCPPortGet( uint8_t *NewUSB_VCPPort );
extern void HwFlyingF3DSMxBindSet( uint8_t *NewDSMxBind );
extern void HwFlyingF3DSMxBindGet( uint8_t *NewDSMxBind );
extern void HwFlyingF3GyroRangeSet( uint8_t *NewGyroRange );
extern void HwFlyingF3GyroRangeGet( uint8_t *NewGyroRange );
extern void HwFlyingF3AccelRangeSet( uint8_t *NewAccelRange );
extern void HwFlyingF3AccelRangeGet( uint8_t *NewAccelRange );
extern void HwFlyingF3ShieldSet( uint8_t *NewShield );
extern void HwFlyingF3ShieldGet( uint8_t *NewShield );


#endif // HWFLYINGF3_H

/**
 * @}
 * @}
 */
