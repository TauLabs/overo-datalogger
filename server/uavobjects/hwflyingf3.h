/**
 ******************************************************************************
 * @addtogroup UAVObjects UAVObject set for this firmware
 * @{
 * @addtogroup HwFlyingF3 HwFlyingF3
 * @brief Selection of optional hardware configurations.
 *
 *
 * @file       hwflyingf3.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @author     Tau Labs, http://taulabs.org, Copyright (C) 2012-2015
 * @brief      Include files for the HwFlyingF3 object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: hwflyingf3.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef HWFLYINGF3_H
#define HWFLYINGF3_H

#include "pios_queue.h"
#include "uavoversion.h"

#include <hwshared.h>


// Object constants
#define HWFLYINGF3_OBJID 0xACFED820
#define HWFLYINGF3_ISSINGLEINST 1
#define HWFLYINGF3_ISSETTINGS 1
#define HWFLYINGF3_NUMBYTES 13

// Generic interface functions
int32_t HwFlyingF3Initialize();
UAVObjHandle HwFlyingF3Handle();
void HwFlyingF3SetDefaults(UAVObjHandle obj, uint16_t instId);

// Object data
typedef struct {
    uint8_t RcvrPort;
    uint8_t Uart1;
    uint8_t Uart2;
    uint8_t Uart3;
    uint8_t Uart4;
    uint8_t Uart5;
    uint8_t USB_HIDPort;
    uint8_t USB_VCPPort;
    uint8_t DSMxMode;
    uint8_t GyroRange;
    uint8_t L3GD20Rate;
    uint8_t AccelRange;
    uint8_t Shield;

} __attribute__((packed)) __attribute__((aligned(4))) HwFlyingF3Data;

// Typesafe Object access functions
/**
 * @function HwFlyingF3Get(dataOut)
 * @brief Populate a HwFlyingF3Data object
 * @param[out] dataOut 
 */
static inline int32_t HwFlyingF3Get(HwFlyingF3Data *dataOut) { return UAVObjGetData(HwFlyingF3Handle(), dataOut); }

static inline int32_t HwFlyingF3Set(const HwFlyingF3Data *dataIn) { return UAVObjSetData(HwFlyingF3Handle(), dataIn); }

static inline int32_t HwFlyingF3InstGet(uint16_t instId, HwFlyingF3Data *dataOut) { return UAVObjGetInstanceData(HwFlyingF3Handle(), instId, dataOut); }

static inline int32_t HwFlyingF3InstSet(uint16_t instId, const HwFlyingF3Data *dataIn) { return UAVObjSetInstanceData(HwFlyingF3Handle(), instId, dataIn); }

static inline int32_t HwFlyingF3ConnectQueue(struct pios_queue *queue) { return UAVObjConnectQueue(HwFlyingF3Handle(), queue, EV_MASK_ALL_UPDATES); }

static inline int32_t HwFlyingF3ConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(HwFlyingF3Handle(), cb, EV_MASK_ALL_UPDATES); }

static inline uint16_t HwFlyingF3CreateInstance() { return UAVObjCreateInstance(HwFlyingF3Handle(), &HwFlyingF3SetDefaults); }

static inline void HwFlyingF3RequestUpdate() { UAVObjRequestUpdate(HwFlyingF3Handle()); }

static inline void HwFlyingF3RequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(HwFlyingF3Handle(), instId); }

static inline void HwFlyingF3Updated() { UAVObjUpdated(HwFlyingF3Handle()); }

static inline void HwFlyingF3InstUpdated(uint16_t instId) { UAVObjInstanceUpdated(HwFlyingF3Handle(), instId); }

static inline int32_t HwFlyingF3GetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(HwFlyingF3Handle(), dataOut); }

static inline int32_t HwFlyingF3SetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(HwFlyingF3Handle(), dataIn); }

static inline int8_t HwFlyingF3ReadOnly() { return UAVObjReadOnly(HwFlyingF3Handle()); }

static inline uint16_t HwFlyingF3GetNumInstances(){ return UAVObjGetNumInstances(HwFlyingF3Handle()); }

static inline uint32_t HwFlyingF3GetNumBytes(){ return UAVObjGetNumBytes(HwFlyingF3Handle()); }

// Field information
// Field RcvrPort information
/* Enumeration options for field RcvrPort */
typedef enum { HWFLYINGF3_RCVRPORT_DISABLED=0, HWFLYINGF3_RCVRPORT_OUTPUTS=1, HWFLYINGF3_RCVRPORT_PPM=2, HWFLYINGF3_RCVRPORT_PPMOUTPUTS=3, HWFLYINGF3_RCVRPORT_PPMPWM=4, HWFLYINGF3_RCVRPORT_PWM=5 }  __attribute__((packed)) HwFlyingF3RcvrPortOptions;
/* Max value of any option in topmost parent RcvrPort of field RcvrPort */
#define HWFLYINGF3_RCVRPORT_GLOBAL_MAXOPTVAL 5
/* Max value of any option in field RcvrPort */
#define HWFLYINGF3_RCVRPORT_MAXOPTVAL 5
/* Ensure field RcvrPort contains valid data */
static inline bool HwFlyingF3RcvrPortIsValid( uint8_t CurrentRcvrPort ) { return CurrentRcvrPort < HWFLYINGF3_RCVRPORT_MAXOPTVAL; }
// Field Uart1 information
/* Enumeration options for field Uart1 */
typedef enum { HWFLYINGF3_UART1_DISABLED=HWSHARED_PORTTYPES_DISABLED, HWFLYINGF3_UART1_COMBRIDGE=HWSHARED_PORTTYPES_COMBRIDGE, HWFLYINGF3_UART1_DEBUGCONSOLE=HWSHARED_PORTTYPES_DEBUGCONSOLE, HWFLYINGF3_UART1_DSM=HWSHARED_PORTTYPES_DSM, HWFLYINGF3_UART1_FRSKYSENSORHUB=HWSHARED_PORTTYPES_FRSKYSENSORHUB, HWFLYINGF3_UART1_FRSKYSPORTTELEMETRY=HWSHARED_PORTTYPES_FRSKYSPORTTELEMETRY, HWFLYINGF3_UART1_GPS=HWSHARED_PORTTYPES_GPS, HWFLYINGF3_UART1_HOTTSUMD=HWSHARED_PORTTYPES_HOTTSUMD, HWFLYINGF3_UART1_HOTTSUMH=HWSHARED_PORTTYPES_HOTTSUMH, HWFLYINGF3_UART1_HOTTTELEMETRY=HWSHARED_PORTTYPES_HOTTTELEMETRY, HWFLYINGF3_UART1_LIGHTTELEMETRYTX=HWSHARED_PORTTYPES_LIGHTTELEMETRYTX, HWFLYINGF3_UART1_MAVLINKTX=HWSHARED_PORTTYPES_MAVLINKTX, HWFLYINGF3_UART1_MAVLINKTX_GPS_RX=HWSHARED_PORTTYPES_MAVLINKTX_GPS_RX, HWFLYINGF3_UART1_SBUS=HWSHARED_PORTTYPES_SBUS, HWFLYINGF3_UART1_TELEMETRY=HWSHARED_PORTTYPES_TELEMETRY, HWFLYINGF3_UART1_OPENLOG=HWSHARED_PORTTYPES_OPENLOG, HWFLYINGF3_UART1_DONTSWITCHONCHILDENUMS=255 }  __attribute__((packed)) HwFlyingF3Uart1Options;
/* Max value of any option in topmost parent PortTypes of field Uart1 */
#define HWFLYINGF3_UART1_GLOBAL_MAXOPTVAL 20
/* Max value of any option in field Uart1 */
#define HWFLYINGF3_UART1_MAXOPTVAL 17
/* Ensure field Uart1 contains valid data */
static inline bool HwFlyingF3Uart1IsValid( uint8_t CurrentUart1 ) { return CurrentUart1 < HWFLYINGF3_UART1_MAXOPTVAL; }
// Field Uart2 information
/* Enumeration options for field Uart2 */
typedef enum { HWFLYINGF3_UART2_DISABLED=HWSHARED_PORTTYPES_DISABLED, HWFLYINGF3_UART2_COMBRIDGE=HWSHARED_PORTTYPES_COMBRIDGE, HWFLYINGF3_UART2_DEBUGCONSOLE=HWSHARED_PORTTYPES_DEBUGCONSOLE, HWFLYINGF3_UART2_DSM=HWSHARED_PORTTYPES_DSM, HWFLYINGF3_UART2_FRSKYSENSORHUB=HWSHARED_PORTTYPES_FRSKYSENSORHUB, HWFLYINGF3_UART2_FRSKYSPORTTELEMETRY=HWSHARED_PORTTYPES_FRSKYSPORTTELEMETRY, HWFLYINGF3_UART2_GPS=HWSHARED_PORTTYPES_GPS, HWFLYINGF3_UART2_HOTTSUMD=HWSHARED_PORTTYPES_HOTTSUMD, HWFLYINGF3_UART2_HOTTSUMH=HWSHARED_PORTTYPES_HOTTSUMH, HWFLYINGF3_UART2_HOTTTELEMETRY=HWSHARED_PORTTYPES_HOTTTELEMETRY, HWFLYINGF3_UART2_LIGHTTELEMETRYTX=HWSHARED_PORTTYPES_LIGHTTELEMETRYTX, HWFLYINGF3_UART2_MAVLINKTX=HWSHARED_PORTTYPES_MAVLINKTX, HWFLYINGF3_UART2_MAVLINKTX_GPS_RX=HWSHARED_PORTTYPES_MAVLINKTX_GPS_RX, HWFLYINGF3_UART2_SBUS=HWSHARED_PORTTYPES_SBUS, HWFLYINGF3_UART2_TELEMETRY=HWSHARED_PORTTYPES_TELEMETRY, HWFLYINGF3_UART2_OPENLOG=HWSHARED_PORTTYPES_OPENLOG, HWFLYINGF3_UART2_DONTSWITCHONCHILDENUMS=255 }  __attribute__((packed)) HwFlyingF3Uart2Options;
/* Max value of any option in topmost parent PortTypes of field Uart2 */
#define HWFLYINGF3_UART2_GLOBAL_MAXOPTVAL 20
/* Max value of any option in field Uart2 */
#define HWFLYINGF3_UART2_MAXOPTVAL 17
/* Ensure field Uart2 contains valid data */
static inline bool HwFlyingF3Uart2IsValid( uint8_t CurrentUart2 ) { return CurrentUart2 < HWFLYINGF3_UART2_MAXOPTVAL; }
// Field Uart3 information
/* Enumeration options for field Uart3 */
typedef enum { HWFLYINGF3_UART3_DISABLED=HWSHARED_PORTTYPES_DISABLED, HWFLYINGF3_UART3_COMBRIDGE=HWSHARED_PORTTYPES_COMBRIDGE, HWFLYINGF3_UART3_DEBUGCONSOLE=HWSHARED_PORTTYPES_DEBUGCONSOLE, HWFLYINGF3_UART3_DSM=HWSHARED_PORTTYPES_DSM, HWFLYINGF3_UART3_FRSKYSENSORHUB=HWSHARED_PORTTYPES_FRSKYSENSORHUB, HWFLYINGF3_UART3_FRSKYSPORTTELEMETRY=HWSHARED_PORTTYPES_FRSKYSPORTTELEMETRY, HWFLYINGF3_UART3_GPS=HWSHARED_PORTTYPES_GPS, HWFLYINGF3_UART3_HOTTSUMD=HWSHARED_PORTTYPES_HOTTSUMD, HWFLYINGF3_UART3_HOTTSUMH=HWSHARED_PORTTYPES_HOTTSUMH, HWFLYINGF3_UART3_HOTTTELEMETRY=HWSHARED_PORTTYPES_HOTTTELEMETRY, HWFLYINGF3_UART3_LIGHTTELEMETRYTX=HWSHARED_PORTTYPES_LIGHTTELEMETRYTX, HWFLYINGF3_UART3_MAVLINKTX=HWSHARED_PORTTYPES_MAVLINKTX, HWFLYINGF3_UART3_MAVLINKTX_GPS_RX=HWSHARED_PORTTYPES_MAVLINKTX_GPS_RX, HWFLYINGF3_UART3_SBUS=HWSHARED_PORTTYPES_SBUS, HWFLYINGF3_UART3_TELEMETRY=HWSHARED_PORTTYPES_TELEMETRY, HWFLYINGF3_UART3_OPENLOG=HWSHARED_PORTTYPES_OPENLOG, HWFLYINGF3_UART3_DONTSWITCHONCHILDENUMS=255 }  __attribute__((packed)) HwFlyingF3Uart3Options;
/* Max value of any option in topmost parent PortTypes of field Uart3 */
#define HWFLYINGF3_UART3_GLOBAL_MAXOPTVAL 20
/* Max value of any option in field Uart3 */
#define HWFLYINGF3_UART3_MAXOPTVAL 17
/* Ensure field Uart3 contains valid data */
static inline bool HwFlyingF3Uart3IsValid( uint8_t CurrentUart3 ) { return CurrentUart3 < HWFLYINGF3_UART3_MAXOPTVAL; }
// Field Uart4 information
/* Enumeration options for field Uart4 */
typedef enum { HWFLYINGF3_UART4_DISABLED=HWSHARED_PORTTYPES_DISABLED, HWFLYINGF3_UART4_COMBRIDGE=HWSHARED_PORTTYPES_COMBRIDGE, HWFLYINGF3_UART4_DEBUGCONSOLE=HWSHARED_PORTTYPES_DEBUGCONSOLE, HWFLYINGF3_UART4_DSM=HWSHARED_PORTTYPES_DSM, HWFLYINGF3_UART4_FRSKYSENSORHUB=HWSHARED_PORTTYPES_FRSKYSENSORHUB, HWFLYINGF3_UART4_FRSKYSPORTTELEMETRY=HWSHARED_PORTTYPES_FRSKYSPORTTELEMETRY, HWFLYINGF3_UART4_GPS=HWSHARED_PORTTYPES_GPS, HWFLYINGF3_UART4_HOTTSUMD=HWSHARED_PORTTYPES_HOTTSUMD, HWFLYINGF3_UART4_HOTTSUMH=HWSHARED_PORTTYPES_HOTTSUMH, HWFLYINGF3_UART4_HOTTTELEMETRY=HWSHARED_PORTTYPES_HOTTTELEMETRY, HWFLYINGF3_UART4_LIGHTTELEMETRYTX=HWSHARED_PORTTYPES_LIGHTTELEMETRYTX, HWFLYINGF3_UART4_MAVLINKTX=HWSHARED_PORTTYPES_MAVLINKTX, HWFLYINGF3_UART4_MAVLINKTX_GPS_RX=HWSHARED_PORTTYPES_MAVLINKTX_GPS_RX, HWFLYINGF3_UART4_SBUS=HWSHARED_PORTTYPES_SBUS, HWFLYINGF3_UART4_TELEMETRY=HWSHARED_PORTTYPES_TELEMETRY, HWFLYINGF3_UART4_OPENLOG=HWSHARED_PORTTYPES_OPENLOG, HWFLYINGF3_UART4_DONTSWITCHONCHILDENUMS=255 }  __attribute__((packed)) HwFlyingF3Uart4Options;
/* Max value of any option in topmost parent PortTypes of field Uart4 */
#define HWFLYINGF3_UART4_GLOBAL_MAXOPTVAL 20
/* Max value of any option in field Uart4 */
#define HWFLYINGF3_UART4_MAXOPTVAL 17
/* Ensure field Uart4 contains valid data */
static inline bool HwFlyingF3Uart4IsValid( uint8_t CurrentUart4 ) { return CurrentUart4 < HWFLYINGF3_UART4_MAXOPTVAL; }
// Field Uart5 information
/* Enumeration options for field Uart5 */
typedef enum { HWFLYINGF3_UART5_DISABLED=HWSHARED_PORTTYPES_DISABLED, HWFLYINGF3_UART5_COMBRIDGE=HWSHARED_PORTTYPES_COMBRIDGE, HWFLYINGF3_UART5_DSM=HWSHARED_PORTTYPES_DSM, HWFLYINGF3_UART5_DEBUGCONSOLE=HWSHARED_PORTTYPES_DEBUGCONSOLE, HWFLYINGF3_UART5_FRSKYSENSORHUB=HWSHARED_PORTTYPES_FRSKYSENSORHUB, HWFLYINGF3_UART5_FRSKYSPORTTELEMETRY=HWSHARED_PORTTYPES_FRSKYSPORTTELEMETRY, HWFLYINGF3_UART5_GPS=HWSHARED_PORTTYPES_GPS, HWFLYINGF3_UART5_HOTTSUMD=HWSHARED_PORTTYPES_HOTTSUMD, HWFLYINGF3_UART5_HOTTSUMH=HWSHARED_PORTTYPES_HOTTSUMH, HWFLYINGF3_UART5_HOTTTELEMETRY=HWSHARED_PORTTYPES_HOTTTELEMETRY, HWFLYINGF3_UART5_LIGHTTELEMETRYTX=HWSHARED_PORTTYPES_LIGHTTELEMETRYTX, HWFLYINGF3_UART5_MAVLINKTX=HWSHARED_PORTTYPES_MAVLINKTX, HWFLYINGF3_UART5_MAVLINKTX_GPS_RX=HWSHARED_PORTTYPES_MAVLINKTX_GPS_RX, HWFLYINGF3_UART5_SBUS=HWSHARED_PORTTYPES_SBUS, HWFLYINGF3_UART5_TELEMETRY=HWSHARED_PORTTYPES_TELEMETRY, HWFLYINGF3_UART5_OPENLOG=HWSHARED_PORTTYPES_OPENLOG, HWFLYINGF3_UART5_DONTSWITCHONCHILDENUMS=255 }  __attribute__((packed)) HwFlyingF3Uart5Options;
/* Max value of any option in topmost parent PortTypes of field Uart5 */
#define HWFLYINGF3_UART5_GLOBAL_MAXOPTVAL 20
/* Max value of any option in field Uart5 */
#define HWFLYINGF3_UART5_MAXOPTVAL 17
/* Ensure field Uart5 contains valid data */
static inline bool HwFlyingF3Uart5IsValid( uint8_t CurrentUart5 ) { return CurrentUart5 < HWFLYINGF3_UART5_MAXOPTVAL; }
// Field USB_HIDPort information
/* Enumeration options for field USB_HIDPort */
typedef enum { HWFLYINGF3_USB_HIDPORT_USBTELEMETRY=HWSHARED_USB_HIDPORT_USBTELEMETRY, HWFLYINGF3_USB_HIDPORT_DISABLED=HWSHARED_USB_HIDPORT_DISABLED, HWFLYINGF3_USB_HIDPORT_DONTSWITCHONCHILDENUMS=255 }  __attribute__((packed)) HwFlyingF3USB_HIDPortOptions;
/* Max value of any option in topmost parent USB_HIDPort of field USB_HIDPort */
#define HWFLYINGF3_USB_HIDPORT_GLOBAL_MAXOPTVAL 1
/* Max value of any option in field USB_HIDPort */
#define HWFLYINGF3_USB_HIDPORT_MAXOPTVAL 1
/* Ensure field USB_HIDPort contains valid data */
static inline bool HwFlyingF3USB_HIDPortIsValid( uint8_t CurrentUSB_HIDPort ) { return CurrentUSB_HIDPort < HWFLYINGF3_USB_HIDPORT_MAXOPTVAL; }
// Field USB_VCPPort information
/* Enumeration options for field USB_VCPPort */
typedef enum { HWFLYINGF3_USB_VCPPORT_USBTELEMETRY=HWSHARED_USB_VCPPORT_USBTELEMETRY, HWFLYINGF3_USB_VCPPORT_COMBRIDGE=HWSHARED_USB_VCPPORT_COMBRIDGE, HWFLYINGF3_USB_VCPPORT_DEBUGCONSOLE=HWSHARED_USB_VCPPORT_DEBUGCONSOLE, HWFLYINGF3_USB_VCPPORT_PICOC=HWSHARED_USB_VCPPORT_PICOC, HWFLYINGF3_USB_VCPPORT_DISABLED=HWSHARED_USB_VCPPORT_DISABLED, HWFLYINGF3_USB_VCPPORT_DONTSWITCHONCHILDENUMS=255 }  __attribute__((packed)) HwFlyingF3USB_VCPPortOptions;
/* Max value of any option in topmost parent USB_VCPPort of field USB_VCPPort */
#define HWFLYINGF3_USB_VCPPORT_GLOBAL_MAXOPTVAL 4
/* Max value of any option in field USB_VCPPort */
#define HWFLYINGF3_USB_VCPPORT_MAXOPTVAL 4
/* Ensure field USB_VCPPort contains valid data */
static inline bool HwFlyingF3USB_VCPPortIsValid( uint8_t CurrentUSB_VCPPort ) { return CurrentUSB_VCPPort < HWFLYINGF3_USB_VCPPORT_MAXOPTVAL; }
// Field DSMxMode information
/* Enumeration options for field DSMxMode */
typedef enum { HWFLYINGF3_DSMXMODE_AUTODETECT=HWSHARED_DSMXMODE_AUTODETECT, HWFLYINGF3_DSMXMODE_FORCE10BIT=HWSHARED_DSMXMODE_FORCE10BIT, HWFLYINGF3_DSMXMODE_FORCE11BIT=HWSHARED_DSMXMODE_FORCE11BIT, HWFLYINGF3_DSMXMODE_BIND3PULSES=HWSHARED_DSMXMODE_BIND3PULSES, HWFLYINGF3_DSMXMODE_BIND4PULSES=HWSHARED_DSMXMODE_BIND4PULSES, HWFLYINGF3_DSMXMODE_BIND5PULSES=HWSHARED_DSMXMODE_BIND5PULSES, HWFLYINGF3_DSMXMODE_BIND6PULSES=HWSHARED_DSMXMODE_BIND6PULSES, HWFLYINGF3_DSMXMODE_BIND7PULSES=HWSHARED_DSMXMODE_BIND7PULSES, HWFLYINGF3_DSMXMODE_BIND8PULSES=HWSHARED_DSMXMODE_BIND8PULSES, HWFLYINGF3_DSMXMODE_BIND9PULSES=HWSHARED_DSMXMODE_BIND9PULSES, HWFLYINGF3_DSMXMODE_BIND10PULSES=HWSHARED_DSMXMODE_BIND10PULSES, HWFLYINGF3_DSMXMODE_DONTSWITCHONCHILDENUMS=255 }  __attribute__((packed)) HwFlyingF3DSMxModeOptions;
/* Max value of any option in topmost parent DSMxMode of field DSMxMode */
#define HWFLYINGF3_DSMXMODE_GLOBAL_MAXOPTVAL 10
/* Max value of any option in field DSMxMode */
#define HWFLYINGF3_DSMXMODE_MAXOPTVAL 10
/* Ensure field DSMxMode contains valid data */
static inline bool HwFlyingF3DSMxModeIsValid( uint8_t CurrentDSMxMode ) { return CurrentDSMxMode < HWFLYINGF3_DSMXMODE_MAXOPTVAL; }
// Field GyroRange information
/* Enumeration options for field GyroRange */
typedef enum { HWFLYINGF3_GYRORANGE_250=0, HWFLYINGF3_GYRORANGE_500=1, HWFLYINGF3_GYRORANGE_1000=2, HWFLYINGF3_GYRORANGE_2000=3 }  __attribute__((packed)) HwFlyingF3GyroRangeOptions;
/* Max value of any option in topmost parent GyroRange of field GyroRange */
#define HWFLYINGF3_GYRORANGE_GLOBAL_MAXOPTVAL 3
/* Max value of any option in field GyroRange */
#define HWFLYINGF3_GYRORANGE_MAXOPTVAL 3
/* Ensure field GyroRange contains valid data */
static inline bool HwFlyingF3GyroRangeIsValid( uint8_t CurrentGyroRange ) { return CurrentGyroRange < HWFLYINGF3_GYRORANGE_MAXOPTVAL; }
// Field L3GD20Rate information
/* Enumeration options for field L3GD20Rate */
typedef enum { HWFLYINGF3_L3GD20RATE_380=0, HWFLYINGF3_L3GD20RATE_760=1 }  __attribute__((packed)) HwFlyingF3L3GD20RateOptions;
/* Max value of any option in topmost parent L3GD20Rate of field L3GD20Rate */
#define HWFLYINGF3_L3GD20RATE_GLOBAL_MAXOPTVAL 1
/* Max value of any option in field L3GD20Rate */
#define HWFLYINGF3_L3GD20RATE_MAXOPTVAL 1
/* Ensure field L3GD20Rate contains valid data */
static inline bool HwFlyingF3L3GD20RateIsValid( uint8_t CurrentL3GD20Rate ) { return CurrentL3GD20Rate < HWFLYINGF3_L3GD20RATE_MAXOPTVAL; }
// Field AccelRange information
/* Enumeration options for field AccelRange */
typedef enum { HWFLYINGF3_ACCELRANGE_2G=0, HWFLYINGF3_ACCELRANGE_4G=1, HWFLYINGF3_ACCELRANGE_8G=2, HWFLYINGF3_ACCELRANGE_16G=3 }  __attribute__((packed)) HwFlyingF3AccelRangeOptions;
/* Max value of any option in topmost parent AccelRange of field AccelRange */
#define HWFLYINGF3_ACCELRANGE_GLOBAL_MAXOPTVAL 3
/* Max value of any option in field AccelRange */
#define HWFLYINGF3_ACCELRANGE_MAXOPTVAL 3
/* Ensure field AccelRange contains valid data */
static inline bool HwFlyingF3AccelRangeIsValid( uint8_t CurrentAccelRange ) { return CurrentAccelRange < HWFLYINGF3_ACCELRANGE_MAXOPTVAL; }
// Field Shield information
/* Enumeration options for field Shield */
typedef enum { HWFLYINGF3_SHIELD_NONE=0, HWFLYINGF3_SHIELD_RCFLYER=1, HWFLYINGF3_SHIELD_CHEBUZZ=2, HWFLYINGF3_SHIELD_BMP085=3 }  __attribute__((packed)) HwFlyingF3ShieldOptions;
/* Max value of any option in topmost parent Shield of field Shield */
#define HWFLYINGF3_SHIELD_GLOBAL_MAXOPTVAL 3
/* Max value of any option in field Shield */
#define HWFLYINGF3_SHIELD_MAXOPTVAL 3
/* Ensure field Shield contains valid data */
static inline bool HwFlyingF3ShieldIsValid( uint8_t CurrentShield ) { return CurrentShield < HWFLYINGF3_SHIELD_MAXOPTVAL; }


// set/Get functions
extern void HwFlyingF3RcvrPortSet( uint8_t *NewRcvrPort );
extern void HwFlyingF3RcvrPortGet( uint8_t *NewRcvrPort );
extern void HwFlyingF3Uart1Set( uint8_t *NewUart1 );
extern void HwFlyingF3Uart1Get( uint8_t *NewUart1 );
extern void HwFlyingF3Uart2Set( uint8_t *NewUart2 );
extern void HwFlyingF3Uart2Get( uint8_t *NewUart2 );
extern void HwFlyingF3Uart3Set( uint8_t *NewUart3 );
extern void HwFlyingF3Uart3Get( uint8_t *NewUart3 );
extern void HwFlyingF3Uart4Set( uint8_t *NewUart4 );
extern void HwFlyingF3Uart4Get( uint8_t *NewUart4 );
extern void HwFlyingF3Uart5Set( uint8_t *NewUart5 );
extern void HwFlyingF3Uart5Get( uint8_t *NewUart5 );
extern void HwFlyingF3USB_HIDPortSet( uint8_t *NewUSB_HIDPort );
extern void HwFlyingF3USB_HIDPortGet( uint8_t *NewUSB_HIDPort );
extern void HwFlyingF3USB_VCPPortSet( uint8_t *NewUSB_VCPPort );
extern void HwFlyingF3USB_VCPPortGet( uint8_t *NewUSB_VCPPort );
extern void HwFlyingF3DSMxModeSet( uint8_t *NewDSMxMode );
extern void HwFlyingF3DSMxModeGet( uint8_t *NewDSMxMode );
extern void HwFlyingF3GyroRangeSet( uint8_t *NewGyroRange );
extern void HwFlyingF3GyroRangeGet( uint8_t *NewGyroRange );
extern void HwFlyingF3L3GD20RateSet( uint8_t *NewL3GD20Rate );
extern void HwFlyingF3L3GD20RateGet( uint8_t *NewL3GD20Rate );
extern void HwFlyingF3AccelRangeSet( uint8_t *NewAccelRange );
extern void HwFlyingF3AccelRangeGet( uint8_t *NewAccelRange );
extern void HwFlyingF3ShieldSet( uint8_t *NewShield );
extern void HwFlyingF3ShieldGet( uint8_t *NewShield );


#endif // HWFLYINGF3_H

/**
 * @}
 * @}
 */
