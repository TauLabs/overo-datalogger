/**
 ******************************************************************************
 * @addtogroup UAVObjects UAVObject set for this firmware
 * @{
 * @addtogroup LoggingStats LoggingStats
 * @brief Information about logging
 *
 *
 * @file       loggingstats.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @author     Tau Labs, http://taulabs.org, Copyright (C) 2012-2015
 * @brief      Include files for the LoggingStats object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: loggingstats.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef LOGGINGSTATS_H
#define LOGGINGSTATS_H

#include "pios_queue.h"
#include "uavoversion.h"



// Object constants
#define LOGGINGSTATS_OBJID 0xF16F14A6
#define LOGGINGSTATS_ISSINGLEINST 1
#define LOGGINGSTATS_ISSETTINGS 0
#define LOGGINGSTATS_NUMBYTES 143

// Generic interface functions
int32_t LoggingStatsInitialize();
UAVObjHandle LoggingStatsHandle();
void LoggingStatsSetDefaults(UAVObjHandle obj, uint16_t instId);

// Object data
typedef struct {
    uint32_t BytesLogged;
    uint32_t FileSectorNum;
    uint16_t MinFileId;
    uint16_t MaxFileId;
    uint16_t FileRequest;
    uint8_t Operation;
    uint8_t FileSector[128];

} __attribute__((packed)) __attribute__((aligned(4))) LoggingStatsData;

// Typesafe Object access functions
/**
 * @function LoggingStatsGet(dataOut)
 * @brief Populate a LoggingStatsData object
 * @param[out] dataOut 
 */
static inline int32_t LoggingStatsGet(LoggingStatsData *dataOut) { return UAVObjGetData(LoggingStatsHandle(), dataOut); }

static inline int32_t LoggingStatsSet(const LoggingStatsData *dataIn) { return UAVObjSetData(LoggingStatsHandle(), dataIn); }

static inline int32_t LoggingStatsInstGet(uint16_t instId, LoggingStatsData *dataOut) { return UAVObjGetInstanceData(LoggingStatsHandle(), instId, dataOut); }

static inline int32_t LoggingStatsInstSet(uint16_t instId, const LoggingStatsData *dataIn) { return UAVObjSetInstanceData(LoggingStatsHandle(), instId, dataIn); }

static inline int32_t LoggingStatsConnectQueue(struct pios_queue *queue) { return UAVObjConnectQueue(LoggingStatsHandle(), queue, EV_MASK_ALL_UPDATES); }

static inline int32_t LoggingStatsConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(LoggingStatsHandle(), cb, EV_MASK_ALL_UPDATES); }

static inline uint16_t LoggingStatsCreateInstance() { return UAVObjCreateInstance(LoggingStatsHandle(), &LoggingStatsSetDefaults); }

static inline void LoggingStatsRequestUpdate() { UAVObjRequestUpdate(LoggingStatsHandle()); }

static inline void LoggingStatsRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(LoggingStatsHandle(), instId); }

static inline void LoggingStatsUpdated() { UAVObjUpdated(LoggingStatsHandle()); }

static inline void LoggingStatsInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(LoggingStatsHandle(), instId); }

static inline int32_t LoggingStatsGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(LoggingStatsHandle(), dataOut); }

static inline int32_t LoggingStatsSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(LoggingStatsHandle(), dataIn); }

static inline int8_t LoggingStatsReadOnly() { return UAVObjReadOnly(LoggingStatsHandle()); }

static inline uint16_t LoggingStatsGetNumInstances(){ return UAVObjGetNumInstances(LoggingStatsHandle()); }

static inline uint32_t LoggingStatsGetNumBytes(){ return UAVObjGetNumBytes(LoggingStatsHandle()); }

// Field information
// Field BytesLogged information
// Field FileSectorNum information
// Field MinFileId information
// Field MaxFileId information
// Field FileRequest information
// Field Operation information
/* Enumeration options for field Operation */
typedef enum { LOGGINGSTATS_OPERATION_INITIALIZING=0, LOGGINGSTATS_OPERATION_LOGGING=1, LOGGINGSTATS_OPERATION_IDLE=2, LOGGINGSTATS_OPERATION_DOWNLOAD=3, LOGGINGSTATS_OPERATION_COMPLETE=4, LOGGINGSTATS_OPERATION_FORMAT=5, LOGGINGSTATS_OPERATION_ERROR=6 }  __attribute__((packed)) LoggingStatsOperationOptions;
/* Max value of any option in topmost parent Operation of field Operation */
#define LOGGINGSTATS_OPERATION_GLOBAL_MAXOPTVAL 6
/* Max value of any option in field Operation */
#define LOGGINGSTATS_OPERATION_MAXOPTVAL 6
/* Ensure field Operation contains valid data */
static inline bool LoggingStatsOperationIsValid( uint8_t CurrentOperation ) { return CurrentOperation < LOGGINGSTATS_OPERATION_MAXOPTVAL; }
// Field FileSector information
/* Number of elements for field FileSector */
#define LOGGINGSTATS_FILESECTOR_NUMELEM 128


// set/Get functions
extern void LoggingStatsBytesLoggedSet( uint32_t *NewBytesLogged );
extern void LoggingStatsBytesLoggedGet( uint32_t *NewBytesLogged );
extern void LoggingStatsFileSectorNumSet( uint32_t *NewFileSectorNum );
extern void LoggingStatsFileSectorNumGet( uint32_t *NewFileSectorNum );
extern void LoggingStatsMinFileIdSet( uint16_t *NewMinFileId );
extern void LoggingStatsMinFileIdGet( uint16_t *NewMinFileId );
extern void LoggingStatsMaxFileIdSet( uint16_t *NewMaxFileId );
extern void LoggingStatsMaxFileIdGet( uint16_t *NewMaxFileId );
extern void LoggingStatsFileRequestSet( uint16_t *NewFileRequest );
extern void LoggingStatsFileRequestGet( uint16_t *NewFileRequest );
extern void LoggingStatsOperationSet( uint8_t *NewOperation );
extern void LoggingStatsOperationGet( uint8_t *NewOperation );
extern void LoggingStatsFileSectorSet( uint8_t *NewFileSector );
extern void LoggingStatsFileSectorGet( uint8_t *NewFileSector );


#endif // LOGGINGSTATS_H

/**
 * @}
 * @}
 */
