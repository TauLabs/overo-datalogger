/**
 ******************************************************************************
 * @addtogroup UAVObjects UAVObject set for this firmware
 * @{
 * @addtogroup FlightStats FlightStats
 * @brief Statistics of the current flight
 *
 *
 * @file       flightstats.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @author     Tau Labs, http://taulabs.org, Copyright (C) 2012-2015
 * @brief      Include files for the FlightStats object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: flightstats.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef FLIGHTSTATS_H
#define FLIGHTSTATS_H

#include "pios_queue.h"
#include "uavoversion.h"



// Object constants
#define FLIGHTSTATS_OBJID 0x88DE3472
#define FLIGHTSTATS_ISSINGLEINST 1
#define FLIGHTSTATS_ISSETTINGS 0
#define FLIGHTSTATS_NUMBYTES 37

// Generic interface functions
int32_t FlightStatsInitialize();
UAVObjHandle FlightStatsHandle();
void FlightStatsSetDefaults(UAVObjHandle obj, uint16_t instId);

// Object data
typedef struct {
    float DistanceTravelled;
    float MaxDistanceToHome;
    float MaxClimbRate;
    float MaxDescentRate;
    float MaxGroundSpeed;
    float MaxAirSpeed;
    uint16_t MaxAltitude;
    uint16_t MaxRollRate;
    uint16_t MaxPitchRate;
    uint16_t MaxYawRate;
    uint16_t ConsumedEnergy;
    uint16_t InitialBatteryVoltage;
    uint8_t State;

} __attribute__((packed)) __attribute__((aligned(4))) FlightStatsData;

// Typesafe Object access functions
/**
 * @function FlightStatsGet(dataOut)
 * @brief Populate a FlightStatsData object
 * @param[out] dataOut 
 */
static inline int32_t FlightStatsGet(FlightStatsData *dataOut) { return UAVObjGetData(FlightStatsHandle(), dataOut); }

static inline int32_t FlightStatsSet(const FlightStatsData *dataIn) { return UAVObjSetData(FlightStatsHandle(), dataIn); }

static inline int32_t FlightStatsInstGet(uint16_t instId, FlightStatsData *dataOut) { return UAVObjGetInstanceData(FlightStatsHandle(), instId, dataOut); }

static inline int32_t FlightStatsInstSet(uint16_t instId, const FlightStatsData *dataIn) { return UAVObjSetInstanceData(FlightStatsHandle(), instId, dataIn); }

static inline int32_t FlightStatsConnectQueue(struct pios_queue *queue) { return UAVObjConnectQueue(FlightStatsHandle(), queue, EV_MASK_ALL_UPDATES); }

static inline int32_t FlightStatsConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(FlightStatsHandle(), cb, EV_MASK_ALL_UPDATES); }

static inline uint16_t FlightStatsCreateInstance() { return UAVObjCreateInstance(FlightStatsHandle(), &FlightStatsSetDefaults); }

static inline void FlightStatsRequestUpdate() { UAVObjRequestUpdate(FlightStatsHandle()); }

static inline void FlightStatsRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(FlightStatsHandle(), instId); }

static inline void FlightStatsUpdated() { UAVObjUpdated(FlightStatsHandle()); }

static inline void FlightStatsInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(FlightStatsHandle(), instId); }

static inline int32_t FlightStatsGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(FlightStatsHandle(), dataOut); }

static inline int32_t FlightStatsSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(FlightStatsHandle(), dataIn); }

static inline int8_t FlightStatsReadOnly() { return UAVObjReadOnly(FlightStatsHandle()); }

static inline uint16_t FlightStatsGetNumInstances(){ return UAVObjGetNumInstances(FlightStatsHandle()); }

static inline uint32_t FlightStatsGetNumBytes(){ return UAVObjGetNumBytes(FlightStatsHandle()); }

// Field information
// Field DistanceTravelled information
// Field MaxDistanceToHome information
// Field MaxClimbRate information
// Field MaxDescentRate information
// Field MaxGroundSpeed information
// Field MaxAirSpeed information
// Field MaxAltitude information
// Field MaxRollRate information
// Field MaxPitchRate information
// Field MaxYawRate information
// Field ConsumedEnergy information
// Field InitialBatteryVoltage information
// Field State information
/* Enumeration options for field State */
typedef enum { FLIGHTSTATS_STATE_IDLE=0, FLIGHTSTATS_STATE_RESET=1, FLIGHTSTATS_STATE_COLLECTING=2 }  __attribute__((packed)) FlightStatsStateOptions;
/* Max value of any option in topmost parent State of field State */
#define FLIGHTSTATS_STATE_GLOBAL_MAXOPTVAL 2
/* Max value of any option in field State */
#define FLIGHTSTATS_STATE_MAXOPTVAL 2
/* Ensure field State contains valid data */
static inline bool FlightStatsStateIsValid( uint8_t CurrentState ) { return CurrentState < FLIGHTSTATS_STATE_MAXOPTVAL; }


// set/Get functions
extern void FlightStatsDistanceTravelledSet( float *NewDistanceTravelled );
extern void FlightStatsDistanceTravelledGet( float *NewDistanceTravelled );
extern void FlightStatsMaxDistanceToHomeSet( float *NewMaxDistanceToHome );
extern void FlightStatsMaxDistanceToHomeGet( float *NewMaxDistanceToHome );
extern void FlightStatsMaxClimbRateSet( float *NewMaxClimbRate );
extern void FlightStatsMaxClimbRateGet( float *NewMaxClimbRate );
extern void FlightStatsMaxDescentRateSet( float *NewMaxDescentRate );
extern void FlightStatsMaxDescentRateGet( float *NewMaxDescentRate );
extern void FlightStatsMaxGroundSpeedSet( float *NewMaxGroundSpeed );
extern void FlightStatsMaxGroundSpeedGet( float *NewMaxGroundSpeed );
extern void FlightStatsMaxAirSpeedSet( float *NewMaxAirSpeed );
extern void FlightStatsMaxAirSpeedGet( float *NewMaxAirSpeed );
extern void FlightStatsMaxAltitudeSet( uint16_t *NewMaxAltitude );
extern void FlightStatsMaxAltitudeGet( uint16_t *NewMaxAltitude );
extern void FlightStatsMaxRollRateSet( uint16_t *NewMaxRollRate );
extern void FlightStatsMaxRollRateGet( uint16_t *NewMaxRollRate );
extern void FlightStatsMaxPitchRateSet( uint16_t *NewMaxPitchRate );
extern void FlightStatsMaxPitchRateGet( uint16_t *NewMaxPitchRate );
extern void FlightStatsMaxYawRateSet( uint16_t *NewMaxYawRate );
extern void FlightStatsMaxYawRateGet( uint16_t *NewMaxYawRate );
extern void FlightStatsConsumedEnergySet( uint16_t *NewConsumedEnergy );
extern void FlightStatsConsumedEnergyGet( uint16_t *NewConsumedEnergy );
extern void FlightStatsInitialBatteryVoltageSet( uint16_t *NewInitialBatteryVoltage );
extern void FlightStatsInitialBatteryVoltageGet( uint16_t *NewInitialBatteryVoltage );
extern void FlightStatsStateSet( uint8_t *NewState );
extern void FlightStatsStateGet( uint8_t *NewState );


#endif // FLIGHTSTATS_H

/**
 * @}
 * @}
 */
