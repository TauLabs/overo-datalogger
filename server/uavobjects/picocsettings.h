/**
 ******************************************************************************
 * @addtogroup UAVObjects UAVObject set for this firmware
 * @{
 * @addtogroup PicoCSettings PicoCSettings
 * @brief Settings for the @ref PicoC Interpreter Module
 *
 *
 * @file       picocsettings.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @author     Tau Labs, http://taulabs.org, Copyright (C) 2012-2013
 * @brief      Include files for the PicoCSettings object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: picocsettings.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef PICOCSETTINGS_H
#define PICOCSETTINGS_H

// Object constants
#define PICOCSETTINGS_OBJID 0x5DB16FFE
#define PICOCSETTINGS_ISSINGLEINST 1
#define PICOCSETTINGS_ISSETTINGS 1
#define PICOCSETTINGS_NUMBYTES 16

// Generic interface functions
int32_t PicoCSettingsInitialize();
UAVObjHandle PicoCSettingsHandle();
void PicoCSettingsSetDefaults(UAVObjHandle obj, uint16_t instId);

// Object data
typedef struct {
    uint32_t MaxFileSize;
    uint32_t TaskStackSize;
    uint32_t PicoCStackSize;
    uint8_t BootFileID;
    uint8_t Startup;
    uint8_t Source;
    uint8_t ComSpeed;

} __attribute__((packed)) __attribute__((aligned(4))) PicoCSettingsData;

// Typesafe Object access functions
/**
 * @function PicoCSettingsGet(dataOut)
 * @brief Populate a PicoCSettingsData object
 * @param[out] dataOut 
 */
static inline int32_t PicoCSettingsGet(PicoCSettingsData *dataOut) { return UAVObjGetData(PicoCSettingsHandle(), dataOut); }

static inline int32_t PicoCSettingsSet(const PicoCSettingsData *dataIn) { return UAVObjSetData(PicoCSettingsHandle(), dataIn); }

static inline int32_t PicoCSettingsInstGet(uint16_t instId, PicoCSettingsData *dataOut) { return UAVObjGetInstanceData(PicoCSettingsHandle(), instId, dataOut); }

static inline int32_t PicoCSettingsInstSet(uint16_t instId, const PicoCSettingsData *dataIn) { return UAVObjSetInstanceData(PicoCSettingsHandle(), instId, dataIn); }

static inline int32_t PicoCSettingsConnectQueue(xQueueHandle queue) { return UAVObjConnectQueue(PicoCSettingsHandle(), queue, EV_MASK_ALL_UPDATES); }

static inline int32_t PicoCSettingsConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(PicoCSettingsHandle(), cb, EV_MASK_ALL_UPDATES); }

static inline uint16_t PicoCSettingsCreateInstance() { return UAVObjCreateInstance(PicoCSettingsHandle(), &PicoCSettingsSetDefaults); }

static inline void PicoCSettingsRequestUpdate() { UAVObjRequestUpdate(PicoCSettingsHandle()); }

static inline void PicoCSettingsRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(PicoCSettingsHandle(), instId); }

static inline void PicoCSettingsUpdated() { UAVObjUpdated(PicoCSettingsHandle()); }

static inline void PicoCSettingsInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(PicoCSettingsHandle(), instId); }

static inline int32_t PicoCSettingsGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(PicoCSettingsHandle(), dataOut); }

static inline int32_t PicoCSettingsSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(PicoCSettingsHandle(), dataIn); }

static inline int8_t PicoCSettingsReadOnly() { return UAVObjReadOnly(PicoCSettingsHandle()); }

static inline uint16_t PicoCSettingsGetNumInstances(){ return UAVObjGetNumInstances(PicoCSettingsHandle()); }

static inline uint32_t PicoCSettingsGetNumBytes(){ return UAVObjGetNumBytes(PicoCSettingsHandle()); }

// Field information
// Field MaxFileSize information
// Field TaskStackSize information
// Field PicoCStackSize information
// Field BootFileID information
// Field Startup information
/* Enumeration options for field Startup */
typedef enum { PICOCSETTINGS_STARTUP_DISABLED=0, PICOCSETTINGS_STARTUP_ONBOOT=1, PICOCSETTINGS_STARTUP_WHENARMED=2 }  __attribute__((packed)) PicoCSettingsStartupOptions;
// Field Source information
/* Enumeration options for field Source */
typedef enum { PICOCSETTINGS_SOURCE_DISABLED=0, PICOCSETTINGS_SOURCE_DEMO=1, PICOCSETTINGS_SOURCE_INTERACTIVE=2, PICOCSETTINGS_SOURCE_FILE=3 }  __attribute__((packed)) PicoCSettingsSourceOptions;
// Field ComSpeed information
/* Enumeration options for field ComSpeed */
typedef enum { PICOCSETTINGS_COMSPEED_2400=0, PICOCSETTINGS_COMSPEED_4800=1, PICOCSETTINGS_COMSPEED_9600=2, PICOCSETTINGS_COMSPEED_19200=3, PICOCSETTINGS_COMSPEED_38400=4, PICOCSETTINGS_COMSPEED_57600=5, PICOCSETTINGS_COMSPEED_115200=6 }  __attribute__((packed)) PicoCSettingsComSpeedOptions;


// set/Get functions
extern void PicoCSettingsMaxFileSizeSet( uint32_t *NewMaxFileSize );
extern void PicoCSettingsMaxFileSizeGet( uint32_t *NewMaxFileSize );
extern void PicoCSettingsTaskStackSizeSet( uint32_t *NewTaskStackSize );
extern void PicoCSettingsTaskStackSizeGet( uint32_t *NewTaskStackSize );
extern void PicoCSettingsPicoCStackSizeSet( uint32_t *NewPicoCStackSize );
extern void PicoCSettingsPicoCStackSizeGet( uint32_t *NewPicoCStackSize );
extern void PicoCSettingsBootFileIDSet( uint8_t *NewBootFileID );
extern void PicoCSettingsBootFileIDGet( uint8_t *NewBootFileID );
extern void PicoCSettingsStartupSet( uint8_t *NewStartup );
extern void PicoCSettingsStartupGet( uint8_t *NewStartup );
extern void PicoCSettingsSourceSet( uint8_t *NewSource );
extern void PicoCSettingsSourceGet( uint8_t *NewSource );
extern void PicoCSettingsComSpeedSet( uint8_t *NewComSpeed );
extern void PicoCSettingsComSpeedGet( uint8_t *NewComSpeed );


#endif // PICOCSETTINGS_H

/**
 * @}
 * @}
 */
