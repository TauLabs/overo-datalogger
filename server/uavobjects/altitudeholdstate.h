/**
 ******************************************************************************
 * @addtogroup UAVObjects UAVObject set for this firmware
 * @{
 * @addtogroup AltitudeHoldState AltitudeHoldState
 * @brief Debugging information for the altitude hold module
 *
 *
 * @file       altitudeholdstate.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @author     Tau Labs, http://taulabs.org, Copyright (C) 2012-2015
 * @brief      Include files for the AltitudeHoldState object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: altitudeholdstate.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef ALTITUDEHOLDSTATE_H
#define ALTITUDEHOLDSTATE_H

#include "pios_queue.h"
#include "uavoversion.h"



// Object constants
#define ALTITUDEHOLDSTATE_OBJID 0x48695320
#define ALTITUDEHOLDSTATE_ISSINGLEINST 1
#define ALTITUDEHOLDSTATE_ISSETTINGS 0
#define ALTITUDEHOLDSTATE_NUMBYTES 16

// Generic interface functions
int32_t AltitudeHoldStateInitialize();
UAVObjHandle AltitudeHoldStateHandle();
void AltitudeHoldStateSetDefaults(UAVObjHandle obj, uint16_t instId);

// Object data
typedef struct {
    float VelocityDesired;
    float Integral;
    float AngleGain;
    float Throttle;

} __attribute__((packed)) __attribute__((aligned(4))) AltitudeHoldStateData;

// Typesafe Object access functions
/**
 * @function AltitudeHoldStateGet(dataOut)
 * @brief Populate a AltitudeHoldStateData object
 * @param[out] dataOut 
 */
static inline int32_t AltitudeHoldStateGet(AltitudeHoldStateData *dataOut) { return UAVObjGetData(AltitudeHoldStateHandle(), dataOut); }

static inline int32_t AltitudeHoldStateSet(const AltitudeHoldStateData *dataIn) { return UAVObjSetData(AltitudeHoldStateHandle(), dataIn); }

static inline int32_t AltitudeHoldStateInstGet(uint16_t instId, AltitudeHoldStateData *dataOut) { return UAVObjGetInstanceData(AltitudeHoldStateHandle(), instId, dataOut); }

static inline int32_t AltitudeHoldStateInstSet(uint16_t instId, const AltitudeHoldStateData *dataIn) { return UAVObjSetInstanceData(AltitudeHoldStateHandle(), instId, dataIn); }

static inline int32_t AltitudeHoldStateConnectQueue(struct pios_queue *queue) { return UAVObjConnectQueue(AltitudeHoldStateHandle(), queue, EV_MASK_ALL_UPDATES); }

static inline int32_t AltitudeHoldStateConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(AltitudeHoldStateHandle(), cb, EV_MASK_ALL_UPDATES); }

static inline uint16_t AltitudeHoldStateCreateInstance() { return UAVObjCreateInstance(AltitudeHoldStateHandle(), &AltitudeHoldStateSetDefaults); }

static inline void AltitudeHoldStateRequestUpdate() { UAVObjRequestUpdate(AltitudeHoldStateHandle()); }

static inline void AltitudeHoldStateRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(AltitudeHoldStateHandle(), instId); }

static inline void AltitudeHoldStateUpdated() { UAVObjUpdated(AltitudeHoldStateHandle()); }

static inline void AltitudeHoldStateInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(AltitudeHoldStateHandle(), instId); }

static inline int32_t AltitudeHoldStateGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(AltitudeHoldStateHandle(), dataOut); }

static inline int32_t AltitudeHoldStateSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(AltitudeHoldStateHandle(), dataIn); }

static inline int8_t AltitudeHoldStateReadOnly() { return UAVObjReadOnly(AltitudeHoldStateHandle()); }

static inline uint16_t AltitudeHoldStateGetNumInstances(){ return UAVObjGetNumInstances(AltitudeHoldStateHandle()); }

static inline uint32_t AltitudeHoldStateGetNumBytes(){ return UAVObjGetNumBytes(AltitudeHoldStateHandle()); }

// Field information
// Field VelocityDesired information
// Field Integral information
// Field AngleGain information
// Field Throttle information


// set/Get functions
extern void AltitudeHoldStateVelocityDesiredSet( float *NewVelocityDesired );
extern void AltitudeHoldStateVelocityDesiredGet( float *NewVelocityDesired );
extern void AltitudeHoldStateIntegralSet( float *NewIntegral );
extern void AltitudeHoldStateIntegralGet( float *NewIntegral );
extern void AltitudeHoldStateAngleGainSet( float *NewAngleGain );
extern void AltitudeHoldStateAngleGainGet( float *NewAngleGain );
extern void AltitudeHoldStateThrottleSet( float *NewThrottle );
extern void AltitudeHoldStateThrottleGet( float *NewThrottle );


#endif // ALTITUDEHOLDSTATE_H

/**
 * @}
 * @}
 */
