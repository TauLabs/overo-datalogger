/**
 ******************************************************************************
 * @addtogroup UAVObjects UAVObject set for this firmware
 * @{
 * @addtogroup FlightTelemetryStats FlightTelemetryStats
 * @brief Maintains the telemetry statistics from the OpenPilot flight computer.
 *
 *
 * @file       flighttelemetrystats.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @author     Tau Labs, http://taulabs.org, Copyright (C) 2012-2015
 * @brief      Include files for the FlightTelemetryStats object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: flighttelemetrystats.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef FLIGHTTELEMETRYSTATS_H
#define FLIGHTTELEMETRYSTATS_H

#include "pios_queue.h"
#include "uavoversion.h"



// Object constants
#define FLIGHTTELEMETRYSTATS_OBJID 0x2F7E2902
#define FLIGHTTELEMETRYSTATS_ISSINGLEINST 1
#define FLIGHTTELEMETRYSTATS_ISSETTINGS 0
#define FLIGHTTELEMETRYSTATS_NUMBYTES 21

// Generic interface functions
int32_t FlightTelemetryStatsInitialize();
UAVObjHandle FlightTelemetryStatsHandle();
void FlightTelemetryStatsSetDefaults(UAVObjHandle obj, uint16_t instId);

// Object data
typedef struct {
    float TxDataRate;
    float RxDataRate;
    uint32_t TxFailures;
    uint32_t RxFailures;
    uint32_t TxRetries;
    uint8_t Status;

} __attribute__((packed)) __attribute__((aligned(4))) FlightTelemetryStatsData;

// Typesafe Object access functions
/**
 * @function FlightTelemetryStatsGet(dataOut)
 * @brief Populate a FlightTelemetryStatsData object
 * @param[out] dataOut 
 */
static inline int32_t FlightTelemetryStatsGet(FlightTelemetryStatsData *dataOut) { return UAVObjGetData(FlightTelemetryStatsHandle(), dataOut); }

static inline int32_t FlightTelemetryStatsSet(const FlightTelemetryStatsData *dataIn) { return UAVObjSetData(FlightTelemetryStatsHandle(), dataIn); }

static inline int32_t FlightTelemetryStatsInstGet(uint16_t instId, FlightTelemetryStatsData *dataOut) { return UAVObjGetInstanceData(FlightTelemetryStatsHandle(), instId, dataOut); }

static inline int32_t FlightTelemetryStatsInstSet(uint16_t instId, const FlightTelemetryStatsData *dataIn) { return UAVObjSetInstanceData(FlightTelemetryStatsHandle(), instId, dataIn); }

static inline int32_t FlightTelemetryStatsConnectQueue(struct pios_queue *queue) { return UAVObjConnectQueue(FlightTelemetryStatsHandle(), queue, EV_MASK_ALL_UPDATES); }

static inline int32_t FlightTelemetryStatsConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(FlightTelemetryStatsHandle(), cb, EV_MASK_ALL_UPDATES); }

static inline uint16_t FlightTelemetryStatsCreateInstance() { return UAVObjCreateInstance(FlightTelemetryStatsHandle(), &FlightTelemetryStatsSetDefaults); }

static inline void FlightTelemetryStatsRequestUpdate() { UAVObjRequestUpdate(FlightTelemetryStatsHandle()); }

static inline void FlightTelemetryStatsRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(FlightTelemetryStatsHandle(), instId); }

static inline void FlightTelemetryStatsUpdated() { UAVObjUpdated(FlightTelemetryStatsHandle()); }

static inline void FlightTelemetryStatsInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(FlightTelemetryStatsHandle(), instId); }

static inline int32_t FlightTelemetryStatsGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(FlightTelemetryStatsHandle(), dataOut); }

static inline int32_t FlightTelemetryStatsSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(FlightTelemetryStatsHandle(), dataIn); }

static inline int8_t FlightTelemetryStatsReadOnly() { return UAVObjReadOnly(FlightTelemetryStatsHandle()); }

static inline uint16_t FlightTelemetryStatsGetNumInstances(){ return UAVObjGetNumInstances(FlightTelemetryStatsHandle()); }

static inline uint32_t FlightTelemetryStatsGetNumBytes(){ return UAVObjGetNumBytes(FlightTelemetryStatsHandle()); }

// Field information
// Field TxDataRate information
// Field RxDataRate information
// Field TxFailures information
// Field RxFailures information
// Field TxRetries information
// Field Status information
/* Enumeration options for field Status */
typedef enum { FLIGHTTELEMETRYSTATS_STATUS_DISCONNECTED=0, FLIGHTTELEMETRYSTATS_STATUS_HANDSHAKEREQ=1, FLIGHTTELEMETRYSTATS_STATUS_HANDSHAKEACK=2, FLIGHTTELEMETRYSTATS_STATUS_CONNECTED=3 }  __attribute__((packed)) FlightTelemetryStatsStatusOptions;
/* Max value of any option in topmost parent Status of field Status */
#define FLIGHTTELEMETRYSTATS_STATUS_GLOBAL_MAXOPTVAL 3
/* Max value of any option in field Status */
#define FLIGHTTELEMETRYSTATS_STATUS_MAXOPTVAL 3
/* Ensure field Status contains valid data */
static inline bool FlightTelemetryStatsStatusIsValid( uint8_t CurrentStatus ) { return CurrentStatus < FLIGHTTELEMETRYSTATS_STATUS_MAXOPTVAL; }


// set/Get functions
extern void FlightTelemetryStatsTxDataRateSet( float *NewTxDataRate );
extern void FlightTelemetryStatsTxDataRateGet( float *NewTxDataRate );
extern void FlightTelemetryStatsRxDataRateSet( float *NewRxDataRate );
extern void FlightTelemetryStatsRxDataRateGet( float *NewRxDataRate );
extern void FlightTelemetryStatsTxFailuresSet( uint32_t *NewTxFailures );
extern void FlightTelemetryStatsTxFailuresGet( uint32_t *NewTxFailures );
extern void FlightTelemetryStatsRxFailuresSet( uint32_t *NewRxFailures );
extern void FlightTelemetryStatsRxFailuresGet( uint32_t *NewRxFailures );
extern void FlightTelemetryStatsTxRetriesSet( uint32_t *NewTxRetries );
extern void FlightTelemetryStatsTxRetriesGet( uint32_t *NewTxRetries );
extern void FlightTelemetryStatsStatusSet( uint8_t *NewStatus );
extern void FlightTelemetryStatsStatusGet( uint8_t *NewStatus );


#endif // FLIGHTTELEMETRYSTATS_H

/**
 * @}
 * @}
 */
