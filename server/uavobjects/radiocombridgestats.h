/**
 ******************************************************************************
 * @addtogroup UAVObjects UAVObject set for this firmware
 * @{
 * @addtogroup RadioComBridgeStats RadioComBridgeStats
 * @brief Maintains the telemetry statistics from the OPLM RadioComBridge.
 *
 *
 * @file       radiocombridgestats.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @author     Tau Labs, http://taulabs.org, Copyright (C) 2012-2013
 * @brief      Include files for the RadioComBridgeStats object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: radiocombridgestats.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef RADIOCOMBRIDGESTATS_H
#define RADIOCOMBRIDGESTATS_H

// Object constants
#define RADIOCOMBRIDGESTATS_OBJID 0x2499AE58
#define RADIOCOMBRIDGESTATS_ISSINGLEINST 1
#define RADIOCOMBRIDGESTATS_ISSETTINGS 0
#define RADIOCOMBRIDGESTATS_NUMBYTES 56

// Generic interface functions
int32_t RadioComBridgeStatsInitialize();
UAVObjHandle RadioComBridgeStatsHandle();
void RadioComBridgeStatsSetDefaults(UAVObjHandle obj, uint16_t instId);

// Object data
typedef struct {
    uint32_t TelemetryTxBytes;
    uint32_t TelemetryTxFailures;
    uint32_t TelemetryTxRetries;
    uint32_t TelemetryRxBytes;
    uint32_t TelemetryRxFailures;
    uint32_t TelemetryRxSyncErrors;
    uint32_t TelemetryRxCrcErrors;
    uint32_t RadioTxBytes;
    uint32_t RadioTxFailures;
    uint32_t RadioTxRetries;
    uint32_t RadioRxBytes;
    uint32_t RadioRxFailures;
    uint32_t RadioRxSyncErrors;
    uint32_t RadioRxCrcErrors;

} __attribute__((packed)) __attribute__((aligned(4))) RadioComBridgeStatsData;

// Typesafe Object access functions
/**
 * @function RadioComBridgeStatsGet(dataOut)
 * @brief Populate a RadioComBridgeStatsData object
 * @param[out] dataOut 
 */
static inline int32_t RadioComBridgeStatsGet(RadioComBridgeStatsData *dataOut) { return UAVObjGetData(RadioComBridgeStatsHandle(), dataOut); }

static inline int32_t RadioComBridgeStatsSet(const RadioComBridgeStatsData *dataIn) { return UAVObjSetData(RadioComBridgeStatsHandle(), dataIn); }

static inline int32_t RadioComBridgeStatsInstGet(uint16_t instId, RadioComBridgeStatsData *dataOut) { return UAVObjGetInstanceData(RadioComBridgeStatsHandle(), instId, dataOut); }

static inline int32_t RadioComBridgeStatsInstSet(uint16_t instId, const RadioComBridgeStatsData *dataIn) { return UAVObjSetInstanceData(RadioComBridgeStatsHandle(), instId, dataIn); }

static inline int32_t RadioComBridgeStatsConnectQueue(xQueueHandle queue) { return UAVObjConnectQueue(RadioComBridgeStatsHandle(), queue, EV_MASK_ALL_UPDATES); }

static inline int32_t RadioComBridgeStatsConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(RadioComBridgeStatsHandle(), cb, EV_MASK_ALL_UPDATES); }

static inline uint16_t RadioComBridgeStatsCreateInstance() { return UAVObjCreateInstance(RadioComBridgeStatsHandle(), &RadioComBridgeStatsSetDefaults); }

static inline void RadioComBridgeStatsRequestUpdate() { UAVObjRequestUpdate(RadioComBridgeStatsHandle()); }

static inline void RadioComBridgeStatsRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(RadioComBridgeStatsHandle(), instId); }

static inline void RadioComBridgeStatsUpdated() { UAVObjUpdated(RadioComBridgeStatsHandle()); }

static inline void RadioComBridgeStatsInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(RadioComBridgeStatsHandle(), instId); }

static inline int32_t RadioComBridgeStatsGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(RadioComBridgeStatsHandle(), dataOut); }

static inline int32_t RadioComBridgeStatsSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(RadioComBridgeStatsHandle(), dataIn); }

static inline int8_t RadioComBridgeStatsReadOnly() { return UAVObjReadOnly(RadioComBridgeStatsHandle()); }

static inline uint16_t RadioComBridgeStatsGetNumInstances(){ return UAVObjGetNumInstances(RadioComBridgeStatsHandle()); }

static inline uint32_t RadioComBridgeStatsGetNumBytes(){ return UAVObjGetNumBytes(RadioComBridgeStatsHandle()); }

// Field information
// Field TelemetryTxBytes information
// Field TelemetryTxFailures information
// Field TelemetryTxRetries information
// Field TelemetryRxBytes information
// Field TelemetryRxFailures information
// Field TelemetryRxSyncErrors information
// Field TelemetryRxCrcErrors information
// Field RadioTxBytes information
// Field RadioTxFailures information
// Field RadioTxRetries information
// Field RadioRxBytes information
// Field RadioRxFailures information
// Field RadioRxSyncErrors information
// Field RadioRxCrcErrors information


// set/Get functions
extern void RadioComBridgeStatsTelemetryTxBytesSet( uint32_t *NewTelemetryTxBytes );
extern void RadioComBridgeStatsTelemetryTxBytesGet( uint32_t *NewTelemetryTxBytes );
extern void RadioComBridgeStatsTelemetryTxFailuresSet( uint32_t *NewTelemetryTxFailures );
extern void RadioComBridgeStatsTelemetryTxFailuresGet( uint32_t *NewTelemetryTxFailures );
extern void RadioComBridgeStatsTelemetryTxRetriesSet( uint32_t *NewTelemetryTxRetries );
extern void RadioComBridgeStatsTelemetryTxRetriesGet( uint32_t *NewTelemetryTxRetries );
extern void RadioComBridgeStatsTelemetryRxBytesSet( uint32_t *NewTelemetryRxBytes );
extern void RadioComBridgeStatsTelemetryRxBytesGet( uint32_t *NewTelemetryRxBytes );
extern void RadioComBridgeStatsTelemetryRxFailuresSet( uint32_t *NewTelemetryRxFailures );
extern void RadioComBridgeStatsTelemetryRxFailuresGet( uint32_t *NewTelemetryRxFailures );
extern void RadioComBridgeStatsTelemetryRxSyncErrorsSet( uint32_t *NewTelemetryRxSyncErrors );
extern void RadioComBridgeStatsTelemetryRxSyncErrorsGet( uint32_t *NewTelemetryRxSyncErrors );
extern void RadioComBridgeStatsTelemetryRxCrcErrorsSet( uint32_t *NewTelemetryRxCrcErrors );
extern void RadioComBridgeStatsTelemetryRxCrcErrorsGet( uint32_t *NewTelemetryRxCrcErrors );
extern void RadioComBridgeStatsRadioTxBytesSet( uint32_t *NewRadioTxBytes );
extern void RadioComBridgeStatsRadioTxBytesGet( uint32_t *NewRadioTxBytes );
extern void RadioComBridgeStatsRadioTxFailuresSet( uint32_t *NewRadioTxFailures );
extern void RadioComBridgeStatsRadioTxFailuresGet( uint32_t *NewRadioTxFailures );
extern void RadioComBridgeStatsRadioTxRetriesSet( uint32_t *NewRadioTxRetries );
extern void RadioComBridgeStatsRadioTxRetriesGet( uint32_t *NewRadioTxRetries );
extern void RadioComBridgeStatsRadioRxBytesSet( uint32_t *NewRadioRxBytes );
extern void RadioComBridgeStatsRadioRxBytesGet( uint32_t *NewRadioRxBytes );
extern void RadioComBridgeStatsRadioRxFailuresSet( uint32_t *NewRadioRxFailures );
extern void RadioComBridgeStatsRadioRxFailuresGet( uint32_t *NewRadioRxFailures );
extern void RadioComBridgeStatsRadioRxSyncErrorsSet( uint32_t *NewRadioRxSyncErrors );
extern void RadioComBridgeStatsRadioRxSyncErrorsGet( uint32_t *NewRadioRxSyncErrors );
extern void RadioComBridgeStatsRadioRxCrcErrorsSet( uint32_t *NewRadioRxCrcErrors );
extern void RadioComBridgeStatsRadioRxCrcErrorsGet( uint32_t *NewRadioRxCrcErrors );


#endif // RADIOCOMBRIDGESTATS_H

/**
 * @}
 * @}
 */
