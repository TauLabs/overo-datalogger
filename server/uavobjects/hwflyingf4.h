/**
 ******************************************************************************
 * @addtogroup UAVObjects UAVObject set for this firmware
 * @{
 * @addtogroup HwFlyingF4 HwFlyingF4
 * @brief Selection of optional hardware configurations.
 *
 *
 * @file       hwflyingf4.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @author     Tau Labs, http://taulabs.org, Copyright (C) 2012-2015
 * @brief      Include files for the HwFlyingF4 object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: hwflyingf4.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef HWFLYINGF4_H
#define HWFLYINGF4_H

#include "pios_queue.h"
#include "uavoversion.h"

#include <hwshared.h>


// Object constants
#define HWFLYINGF4_OBJID 0x13717D46
#define HWFLYINGF4_ISSINGLEINST 1
#define HWFLYINGF4_ISSETTINGS 1
#define HWFLYINGF4_NUMBYTES 15

// Generic interface functions
int32_t HwFlyingF4Initialize();
UAVObjHandle HwFlyingF4Handle();
void HwFlyingF4SetDefaults(UAVObjHandle obj, uint16_t instId);

// Object data
typedef struct {
    uint8_t RcvrPort;
    uint8_t Uart1;
    uint8_t Uart2;
    uint8_t Uart3;
    uint8_t Uart4;
    uint8_t Uart5;
    uint8_t USB_HIDPort;
    uint8_t USB_VCPPort;
    uint8_t DSMxMode;
    uint8_t GyroRange;
    uint8_t AccelRange;
    uint8_t MPU6050Rate;
    uint8_t MPU6050DLPF;
    uint8_t Magnetometer;
    uint8_t ExtMagOrientation;

} __attribute__((packed)) __attribute__((aligned(4))) HwFlyingF4Data;

// Typesafe Object access functions
/**
 * @function HwFlyingF4Get(dataOut)
 * @brief Populate a HwFlyingF4Data object
 * @param[out] dataOut 
 */
static inline int32_t HwFlyingF4Get(HwFlyingF4Data *dataOut) { return UAVObjGetData(HwFlyingF4Handle(), dataOut); }

static inline int32_t HwFlyingF4Set(const HwFlyingF4Data *dataIn) { return UAVObjSetData(HwFlyingF4Handle(), dataIn); }

static inline int32_t HwFlyingF4InstGet(uint16_t instId, HwFlyingF4Data *dataOut) { return UAVObjGetInstanceData(HwFlyingF4Handle(), instId, dataOut); }

static inline int32_t HwFlyingF4InstSet(uint16_t instId, const HwFlyingF4Data *dataIn) { return UAVObjSetInstanceData(HwFlyingF4Handle(), instId, dataIn); }

static inline int32_t HwFlyingF4ConnectQueue(struct pios_queue *queue) { return UAVObjConnectQueue(HwFlyingF4Handle(), queue, EV_MASK_ALL_UPDATES); }

static inline int32_t HwFlyingF4ConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(HwFlyingF4Handle(), cb, EV_MASK_ALL_UPDATES); }

static inline uint16_t HwFlyingF4CreateInstance() { return UAVObjCreateInstance(HwFlyingF4Handle(), &HwFlyingF4SetDefaults); }

static inline void HwFlyingF4RequestUpdate() { UAVObjRequestUpdate(HwFlyingF4Handle()); }

static inline void HwFlyingF4RequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(HwFlyingF4Handle(), instId); }

static inline void HwFlyingF4Updated() { UAVObjUpdated(HwFlyingF4Handle()); }

static inline void HwFlyingF4InstUpdated(uint16_t instId) { UAVObjInstanceUpdated(HwFlyingF4Handle(), instId); }

static inline int32_t HwFlyingF4GetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(HwFlyingF4Handle(), dataOut); }

static inline int32_t HwFlyingF4SetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(HwFlyingF4Handle(), dataIn); }

static inline int8_t HwFlyingF4ReadOnly() { return UAVObjReadOnly(HwFlyingF4Handle()); }

static inline uint16_t HwFlyingF4GetNumInstances(){ return UAVObjGetNumInstances(HwFlyingF4Handle()); }

static inline uint32_t HwFlyingF4GetNumBytes(){ return UAVObjGetNumBytes(HwFlyingF4Handle()); }

// Field information
// Field RcvrPort information
/* Enumeration options for field RcvrPort */
typedef enum { HWFLYINGF4_RCVRPORT_DISABLED=0, HWFLYINGF4_RCVRPORT_PWM=1, HWFLYINGF4_RCVRPORT_PPM=2, HWFLYINGF4_RCVRPORT_PPMPWM=3, HWFLYINGF4_RCVRPORT_PPMOUTPUTS=4, HWFLYINGF4_RCVRPORT_OUTPUTS=5 }  __attribute__((packed)) HwFlyingF4RcvrPortOptions;
/* Max value of any option in topmost parent RcvrPort of field RcvrPort */
#define HWFLYINGF4_RCVRPORT_GLOBAL_MAXOPTVAL 5
/* Max value of any option in field RcvrPort */
#define HWFLYINGF4_RCVRPORT_MAXOPTVAL 5
/* Ensure field RcvrPort contains valid data */
static inline bool HwFlyingF4RcvrPortIsValid( uint8_t CurrentRcvrPort ) { return CurrentRcvrPort < HWFLYINGF4_RCVRPORT_MAXOPTVAL; }
// Field Uart1 information
/* Enumeration options for field Uart1 */
typedef enum { HWFLYINGF4_UART1_DISABLED=HWSHARED_PORTTYPES_DISABLED, HWFLYINGF4_UART1_GPS=HWSHARED_PORTTYPES_GPS, HWFLYINGF4_UART1_SBUS=HWSHARED_PORTTYPES_SBUS, HWFLYINGF4_UART1_DSM=HWSHARED_PORTTYPES_DSM, HWFLYINGF4_UART1_HOTTSUMD=HWSHARED_PORTTYPES_HOTTSUMD, HWFLYINGF4_UART1_HOTTSUMH=HWSHARED_PORTTYPES_HOTTSUMH, HWFLYINGF4_UART1_PICOC=HWSHARED_PORTTYPES_PICOC, HWFLYINGF4_UART1_DONTSWITCHONCHILDENUMS=255 }  __attribute__((packed)) HwFlyingF4Uart1Options;
/* Max value of any option in topmost parent PortTypes of field Uart1 */
#define HWFLYINGF4_UART1_GLOBAL_MAXOPTVAL 20
/* Max value of any option in field Uart1 */
#define HWFLYINGF4_UART1_MAXOPTVAL 16
/* Ensure field Uart1 contains valid data */
static inline bool HwFlyingF4Uart1IsValid( uint8_t CurrentUart1 ) { return CurrentUart1 < HWFLYINGF4_UART1_MAXOPTVAL; }
// Field Uart2 information
/* Enumeration options for field Uart2 */
typedef enum { HWFLYINGF4_UART2_DISABLED=HWSHARED_PORTTYPES_DISABLED, HWFLYINGF4_UART2_TELEMETRY=HWSHARED_PORTTYPES_TELEMETRY, HWFLYINGF4_UART2_GPS=HWSHARED_PORTTYPES_GPS, HWFLYINGF4_UART2_DSM=HWSHARED_PORTTYPES_DSM, HWFLYINGF4_UART2_DEBUGCONSOLE=HWSHARED_PORTTYPES_DEBUGCONSOLE, HWFLYINGF4_UART2_COMBRIDGE=HWSHARED_PORTTYPES_COMBRIDGE, HWFLYINGF4_UART2_MAVLINKTX=HWSHARED_PORTTYPES_MAVLINKTX, HWFLYINGF4_UART2_MAVLINKTX_GPS_RX=HWSHARED_PORTTYPES_MAVLINKTX_GPS_RX, HWFLYINGF4_UART2_FRSKYSENSORHUB=HWSHARED_PORTTYPES_FRSKYSENSORHUB, HWFLYINGF4_UART2_HOTTSUMD=HWSHARED_PORTTYPES_HOTTSUMD, HWFLYINGF4_UART2_HOTTSUMH=HWSHARED_PORTTYPES_HOTTSUMH, HWFLYINGF4_UART2_LIGHTTELEMETRYTX=HWSHARED_PORTTYPES_LIGHTTELEMETRYTX, HWFLYINGF4_UART2_PICOC=HWSHARED_PORTTYPES_PICOC, HWFLYINGF4_UART2_FRSKYSPORTTELEMETRY=HWSHARED_PORTTYPES_FRSKYSPORTTELEMETRY, HWFLYINGF4_UART2_DONTSWITCHONCHILDENUMS=255 }  __attribute__((packed)) HwFlyingF4Uart2Options;
/* Max value of any option in topmost parent PortTypes of field Uart2 */
#define HWFLYINGF4_UART2_GLOBAL_MAXOPTVAL 20
/* Max value of any option in field Uart2 */
#define HWFLYINGF4_UART2_MAXOPTVAL 16
/* Ensure field Uart2 contains valid data */
static inline bool HwFlyingF4Uart2IsValid( uint8_t CurrentUart2 ) { return CurrentUart2 < HWFLYINGF4_UART2_MAXOPTVAL; }
// Field Uart3 information
/* Enumeration options for field Uart3 */
typedef enum { HWFLYINGF4_UART3_DISABLED=HWSHARED_PORTTYPES_DISABLED, HWFLYINGF4_UART3_TELEMETRY=HWSHARED_PORTTYPES_TELEMETRY, HWFLYINGF4_UART3_GPS=HWSHARED_PORTTYPES_GPS, HWFLYINGF4_UART3_DSM=HWSHARED_PORTTYPES_DSM, HWFLYINGF4_UART3_DEBUGCONSOLE=HWSHARED_PORTTYPES_DEBUGCONSOLE, HWFLYINGF4_UART3_COMBRIDGE=HWSHARED_PORTTYPES_COMBRIDGE, HWFLYINGF4_UART3_MAVLINKTX=HWSHARED_PORTTYPES_MAVLINKTX, HWFLYINGF4_UART3_MAVLINKTX_GPS_RX=HWSHARED_PORTTYPES_MAVLINKTX_GPS_RX, HWFLYINGF4_UART3_FRSKYSENSORHUB=HWSHARED_PORTTYPES_FRSKYSENSORHUB, HWFLYINGF4_UART3_HOTTSUMD=HWSHARED_PORTTYPES_HOTTSUMD, HWFLYINGF4_UART3_HOTTSUMH=HWSHARED_PORTTYPES_HOTTSUMH, HWFLYINGF4_UART3_LIGHTTELEMETRYTX=HWSHARED_PORTTYPES_LIGHTTELEMETRYTX, HWFLYINGF4_UART3_PICOC=HWSHARED_PORTTYPES_PICOC, HWFLYINGF4_UART3_FRSKYSPORTTELEMETRY=HWSHARED_PORTTYPES_FRSKYSPORTTELEMETRY, HWFLYINGF4_UART3_DONTSWITCHONCHILDENUMS=255 }  __attribute__((packed)) HwFlyingF4Uart3Options;
/* Max value of any option in topmost parent PortTypes of field Uart3 */
#define HWFLYINGF4_UART3_GLOBAL_MAXOPTVAL 20
/* Max value of any option in field Uart3 */
#define HWFLYINGF4_UART3_MAXOPTVAL 16
/* Ensure field Uart3 contains valid data */
static inline bool HwFlyingF4Uart3IsValid( uint8_t CurrentUart3 ) { return CurrentUart3 < HWFLYINGF4_UART3_MAXOPTVAL; }
// Field Uart4 information
/* Enumeration options for field Uart4 */
typedef enum { HWFLYINGF4_UART4_DISABLED=HWSHARED_PORTTYPES_DISABLED, HWFLYINGF4_UART4_GPS=HWSHARED_PORTTYPES_GPS, HWFLYINGF4_UART4_DONTSWITCHONCHILDENUMS=255 }  __attribute__((packed)) HwFlyingF4Uart4Options;
/* Max value of any option in topmost parent PortTypes of field Uart4 */
#define HWFLYINGF4_UART4_GLOBAL_MAXOPTVAL 20
/* Max value of any option in field Uart4 */
#define HWFLYINGF4_UART4_MAXOPTVAL 2
/* Ensure field Uart4 contains valid data */
static inline bool HwFlyingF4Uart4IsValid( uint8_t CurrentUart4 ) { return CurrentUart4 < HWFLYINGF4_UART4_MAXOPTVAL; }
// Field Uart5 information
/* Enumeration options for field Uart5 */
typedef enum { HWFLYINGF4_UART5_DISABLED=HWSHARED_PORTTYPES_DISABLED, HWFLYINGF4_UART5_GPS=HWSHARED_PORTTYPES_GPS, HWFLYINGF4_UART5_DONTSWITCHONCHILDENUMS=255 }  __attribute__((packed)) HwFlyingF4Uart5Options;
/* Max value of any option in topmost parent PortTypes of field Uart5 */
#define HWFLYINGF4_UART5_GLOBAL_MAXOPTVAL 20
/* Max value of any option in field Uart5 */
#define HWFLYINGF4_UART5_MAXOPTVAL 2
/* Ensure field Uart5 contains valid data */
static inline bool HwFlyingF4Uart5IsValid( uint8_t CurrentUart5 ) { return CurrentUart5 < HWFLYINGF4_UART5_MAXOPTVAL; }
// Field USB_HIDPort information
/* Enumeration options for field USB_HIDPort */
typedef enum { HWFLYINGF4_USB_HIDPORT_USBTELEMETRY=HWSHARED_USB_HIDPORT_USBTELEMETRY, HWFLYINGF4_USB_HIDPORT_DISABLED=HWSHARED_USB_HIDPORT_DISABLED, HWFLYINGF4_USB_HIDPORT_DONTSWITCHONCHILDENUMS=255 }  __attribute__((packed)) HwFlyingF4USB_HIDPortOptions;
/* Max value of any option in topmost parent USB_HIDPort of field USB_HIDPort */
#define HWFLYINGF4_USB_HIDPORT_GLOBAL_MAXOPTVAL 1
/* Max value of any option in field USB_HIDPort */
#define HWFLYINGF4_USB_HIDPORT_MAXOPTVAL 1
/* Ensure field USB_HIDPort contains valid data */
static inline bool HwFlyingF4USB_HIDPortIsValid( uint8_t CurrentUSB_HIDPort ) { return CurrentUSB_HIDPort < HWFLYINGF4_USB_HIDPORT_MAXOPTVAL; }
// Field USB_VCPPort information
/* Enumeration options for field USB_VCPPort */
typedef enum { HWFLYINGF4_USB_VCPPORT_USBTELEMETRY=HWSHARED_USB_VCPPORT_USBTELEMETRY, HWFLYINGF4_USB_VCPPORT_COMBRIDGE=HWSHARED_USB_VCPPORT_COMBRIDGE, HWFLYINGF4_USB_VCPPORT_DEBUGCONSOLE=HWSHARED_USB_VCPPORT_DEBUGCONSOLE, HWFLYINGF4_USB_VCPPORT_PICOC=HWSHARED_USB_VCPPORT_PICOC, HWFLYINGF4_USB_VCPPORT_DISABLED=HWSHARED_USB_VCPPORT_DISABLED, HWFLYINGF4_USB_VCPPORT_DONTSWITCHONCHILDENUMS=255 }  __attribute__((packed)) HwFlyingF4USB_VCPPortOptions;
/* Max value of any option in topmost parent USB_VCPPort of field USB_VCPPort */
#define HWFLYINGF4_USB_VCPPORT_GLOBAL_MAXOPTVAL 4
/* Max value of any option in field USB_VCPPort */
#define HWFLYINGF4_USB_VCPPORT_MAXOPTVAL 4
/* Ensure field USB_VCPPort contains valid data */
static inline bool HwFlyingF4USB_VCPPortIsValid( uint8_t CurrentUSB_VCPPort ) { return CurrentUSB_VCPPort < HWFLYINGF4_USB_VCPPORT_MAXOPTVAL; }
// Field DSMxMode information
/* Enumeration options for field DSMxMode */
typedef enum { HWFLYINGF4_DSMXMODE_AUTODETECT=HWSHARED_DSMXMODE_AUTODETECT, HWFLYINGF4_DSMXMODE_FORCE10BIT=HWSHARED_DSMXMODE_FORCE10BIT, HWFLYINGF4_DSMXMODE_FORCE11BIT=HWSHARED_DSMXMODE_FORCE11BIT, HWFLYINGF4_DSMXMODE_BIND3PULSES=HWSHARED_DSMXMODE_BIND3PULSES, HWFLYINGF4_DSMXMODE_BIND4PULSES=HWSHARED_DSMXMODE_BIND4PULSES, HWFLYINGF4_DSMXMODE_BIND5PULSES=HWSHARED_DSMXMODE_BIND5PULSES, HWFLYINGF4_DSMXMODE_BIND6PULSES=HWSHARED_DSMXMODE_BIND6PULSES, HWFLYINGF4_DSMXMODE_BIND7PULSES=HWSHARED_DSMXMODE_BIND7PULSES, HWFLYINGF4_DSMXMODE_BIND8PULSES=HWSHARED_DSMXMODE_BIND8PULSES, HWFLYINGF4_DSMXMODE_BIND9PULSES=HWSHARED_DSMXMODE_BIND9PULSES, HWFLYINGF4_DSMXMODE_BIND10PULSES=HWSHARED_DSMXMODE_BIND10PULSES, HWFLYINGF4_DSMXMODE_DONTSWITCHONCHILDENUMS=255 }  __attribute__((packed)) HwFlyingF4DSMxModeOptions;
/* Max value of any option in topmost parent DSMxMode of field DSMxMode */
#define HWFLYINGF4_DSMXMODE_GLOBAL_MAXOPTVAL 10
/* Max value of any option in field DSMxMode */
#define HWFLYINGF4_DSMXMODE_MAXOPTVAL 10
/* Ensure field DSMxMode contains valid data */
static inline bool HwFlyingF4DSMxModeIsValid( uint8_t CurrentDSMxMode ) { return CurrentDSMxMode < HWFLYINGF4_DSMXMODE_MAXOPTVAL; }
// Field GyroRange information
/* Enumeration options for field GyroRange */
typedef enum { HWFLYINGF4_GYRORANGE_250=0, HWFLYINGF4_GYRORANGE_500=1, HWFLYINGF4_GYRORANGE_1000=2, HWFLYINGF4_GYRORANGE_2000=3 }  __attribute__((packed)) HwFlyingF4GyroRangeOptions;
/* Max value of any option in topmost parent GyroRange of field GyroRange */
#define HWFLYINGF4_GYRORANGE_GLOBAL_MAXOPTVAL 3
/* Max value of any option in field GyroRange */
#define HWFLYINGF4_GYRORANGE_MAXOPTVAL 3
/* Ensure field GyroRange contains valid data */
static inline bool HwFlyingF4GyroRangeIsValid( uint8_t CurrentGyroRange ) { return CurrentGyroRange < HWFLYINGF4_GYRORANGE_MAXOPTVAL; }
// Field AccelRange information
/* Enumeration options for field AccelRange */
typedef enum { HWFLYINGF4_ACCELRANGE_2G=0, HWFLYINGF4_ACCELRANGE_4G=1, HWFLYINGF4_ACCELRANGE_8G=2, HWFLYINGF4_ACCELRANGE_16G=3 }  __attribute__((packed)) HwFlyingF4AccelRangeOptions;
/* Max value of any option in topmost parent AccelRange of field AccelRange */
#define HWFLYINGF4_ACCELRANGE_GLOBAL_MAXOPTVAL 3
/* Max value of any option in field AccelRange */
#define HWFLYINGF4_ACCELRANGE_MAXOPTVAL 3
/* Ensure field AccelRange contains valid data */
static inline bool HwFlyingF4AccelRangeIsValid( uint8_t CurrentAccelRange ) { return CurrentAccelRange < HWFLYINGF4_ACCELRANGE_MAXOPTVAL; }
// Field MPU6050Rate information
/* Enumeration options for field MPU6050Rate */
typedef enum { HWFLYINGF4_MPU6050RATE_200=0, HWFLYINGF4_MPU6050RATE_333=1, HWFLYINGF4_MPU6050RATE_500=2, HWFLYINGF4_MPU6050RATE_666=3, HWFLYINGF4_MPU6050RATE_1000=4, HWFLYINGF4_MPU6050RATE_2000=5, HWFLYINGF4_MPU6050RATE_4000=6, HWFLYINGF4_MPU6050RATE_8000=7 }  __attribute__((packed)) HwFlyingF4MPU6050RateOptions;
/* Max value of any option in topmost parent MPU6050Rate of field MPU6050Rate */
#define HWFLYINGF4_MPU6050RATE_GLOBAL_MAXOPTVAL 7
/* Max value of any option in field MPU6050Rate */
#define HWFLYINGF4_MPU6050RATE_MAXOPTVAL 7
/* Ensure field MPU6050Rate contains valid data */
static inline bool HwFlyingF4MPU6050RateIsValid( uint8_t CurrentMPU6050Rate ) { return CurrentMPU6050Rate < HWFLYINGF4_MPU6050RATE_MAXOPTVAL; }
// Field MPU6050DLPF information
/* Enumeration options for field MPU6050DLPF */
typedef enum { HWFLYINGF4_MPU6050DLPF_256=0, HWFLYINGF4_MPU6050DLPF_188=1, HWFLYINGF4_MPU6050DLPF_98=2, HWFLYINGF4_MPU6050DLPF_42=3, HWFLYINGF4_MPU6050DLPF_20=4, HWFLYINGF4_MPU6050DLPF_10=5, HWFLYINGF4_MPU6050DLPF_5=6 }  __attribute__((packed)) HwFlyingF4MPU6050DLPFOptions;
/* Max value of any option in topmost parent MPU6050DLPF of field MPU6050DLPF */
#define HWFLYINGF4_MPU6050DLPF_GLOBAL_MAXOPTVAL 6
/* Max value of any option in field MPU6050DLPF */
#define HWFLYINGF4_MPU6050DLPF_MAXOPTVAL 6
/* Ensure field MPU6050DLPF contains valid data */
static inline bool HwFlyingF4MPU6050DLPFIsValid( uint8_t CurrentMPU6050DLPF ) { return CurrentMPU6050DLPF < HWFLYINGF4_MPU6050DLPF_MAXOPTVAL; }
// Field Magnetometer information
/* Enumeration options for field Magnetometer */
typedef enum { HWFLYINGF4_MAGNETOMETER_DISABLED=0, HWFLYINGF4_MAGNETOMETER_EXTERNALI2C=1 }  __attribute__((packed)) HwFlyingF4MagnetometerOptions;
/* Max value of any option in topmost parent Magnetometer of field Magnetometer */
#define HWFLYINGF4_MAGNETOMETER_GLOBAL_MAXOPTVAL 1
/* Max value of any option in field Magnetometer */
#define HWFLYINGF4_MAGNETOMETER_MAXOPTVAL 1
/* Ensure field Magnetometer contains valid data */
static inline bool HwFlyingF4MagnetometerIsValid( uint8_t CurrentMagnetometer ) { return CurrentMagnetometer < HWFLYINGF4_MAGNETOMETER_MAXOPTVAL; }
// Field ExtMagOrientation information
/* Enumeration options for field ExtMagOrientation */
typedef enum { HWFLYINGF4_EXTMAGORIENTATION_TOP0DEGCW=HWSHARED_MAGORIENTATION_TOP0DEGCW, HWFLYINGF4_EXTMAGORIENTATION_TOP90DEGCW=HWSHARED_MAGORIENTATION_TOP90DEGCW, HWFLYINGF4_EXTMAGORIENTATION_TOP180DEGCW=HWSHARED_MAGORIENTATION_TOP180DEGCW, HWFLYINGF4_EXTMAGORIENTATION_TOP270DEGCW=HWSHARED_MAGORIENTATION_TOP270DEGCW, HWFLYINGF4_EXTMAGORIENTATION_BOTTOM0DEGCW=HWSHARED_MAGORIENTATION_BOTTOM0DEGCW, HWFLYINGF4_EXTMAGORIENTATION_BOTTOM90DEGCW=HWSHARED_MAGORIENTATION_BOTTOM90DEGCW, HWFLYINGF4_EXTMAGORIENTATION_BOTTOM180DEGCW=HWSHARED_MAGORIENTATION_BOTTOM180DEGCW, HWFLYINGF4_EXTMAGORIENTATION_BOTTOM270DEGCW=HWSHARED_MAGORIENTATION_BOTTOM270DEGCW, HWFLYINGF4_EXTMAGORIENTATION_DONTSWITCHONCHILDENUMS=255 }  __attribute__((packed)) HwFlyingF4ExtMagOrientationOptions;
/* Max value of any option in topmost parent MagOrientation of field ExtMagOrientation */
#define HWFLYINGF4_EXTMAGORIENTATION_GLOBAL_MAXOPTVAL 7
/* Max value of any option in field ExtMagOrientation */
#define HWFLYINGF4_EXTMAGORIENTATION_MAXOPTVAL 7
/* Ensure field ExtMagOrientation contains valid data */
static inline bool HwFlyingF4ExtMagOrientationIsValid( uint8_t CurrentExtMagOrientation ) { return CurrentExtMagOrientation < HWFLYINGF4_EXTMAGORIENTATION_MAXOPTVAL; }


// set/Get functions
extern void HwFlyingF4RcvrPortSet( uint8_t *NewRcvrPort );
extern void HwFlyingF4RcvrPortGet( uint8_t *NewRcvrPort );
extern void HwFlyingF4Uart1Set( uint8_t *NewUart1 );
extern void HwFlyingF4Uart1Get( uint8_t *NewUart1 );
extern void HwFlyingF4Uart2Set( uint8_t *NewUart2 );
extern void HwFlyingF4Uart2Get( uint8_t *NewUart2 );
extern void HwFlyingF4Uart3Set( uint8_t *NewUart3 );
extern void HwFlyingF4Uart3Get( uint8_t *NewUart3 );
extern void HwFlyingF4Uart4Set( uint8_t *NewUart4 );
extern void HwFlyingF4Uart4Get( uint8_t *NewUart4 );
extern void HwFlyingF4Uart5Set( uint8_t *NewUart5 );
extern void HwFlyingF4Uart5Get( uint8_t *NewUart5 );
extern void HwFlyingF4USB_HIDPortSet( uint8_t *NewUSB_HIDPort );
extern void HwFlyingF4USB_HIDPortGet( uint8_t *NewUSB_HIDPort );
extern void HwFlyingF4USB_VCPPortSet( uint8_t *NewUSB_VCPPort );
extern void HwFlyingF4USB_VCPPortGet( uint8_t *NewUSB_VCPPort );
extern void HwFlyingF4DSMxModeSet( uint8_t *NewDSMxMode );
extern void HwFlyingF4DSMxModeGet( uint8_t *NewDSMxMode );
extern void HwFlyingF4GyroRangeSet( uint8_t *NewGyroRange );
extern void HwFlyingF4GyroRangeGet( uint8_t *NewGyroRange );
extern void HwFlyingF4AccelRangeSet( uint8_t *NewAccelRange );
extern void HwFlyingF4AccelRangeGet( uint8_t *NewAccelRange );
extern void HwFlyingF4MPU6050RateSet( uint8_t *NewMPU6050Rate );
extern void HwFlyingF4MPU6050RateGet( uint8_t *NewMPU6050Rate );
extern void HwFlyingF4MPU6050DLPFSet( uint8_t *NewMPU6050DLPF );
extern void HwFlyingF4MPU6050DLPFGet( uint8_t *NewMPU6050DLPF );
extern void HwFlyingF4MagnetometerSet( uint8_t *NewMagnetometer );
extern void HwFlyingF4MagnetometerGet( uint8_t *NewMagnetometer );
extern void HwFlyingF4ExtMagOrientationSet( uint8_t *NewExtMagOrientation );
extern void HwFlyingF4ExtMagOrientationGet( uint8_t *NewExtMagOrientation );


#endif // HWFLYINGF4_H

/**
 * @}
 * @}
 */
