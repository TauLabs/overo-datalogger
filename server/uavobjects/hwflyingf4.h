/**
 ******************************************************************************
 * @addtogroup UAVObjects UAVObject set for this firmware
 * @{
 * @addtogroup HwFlyingF4 HwFlyingF4
 * @brief Selection of optional hardware configurations.
 *
 *
 * @file       hwflyingf4.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @author     Tau Labs, http://taulabs.org, Copyright (C) 2012-2013
 * @brief      Include files for the HwFlyingF4 object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: hwflyingf4.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef HWFLYINGF4_H
#define HWFLYINGF4_H

// Object constants
#define HWFLYINGF4_OBJID 0x4F97C51A
#define HWFLYINGF4_ISSINGLEINST 1
#define HWFLYINGF4_ISSETTINGS 1
#define HWFLYINGF4_NUMBYTES 13

// Generic interface functions
int32_t HwFlyingF4Initialize();
UAVObjHandle HwFlyingF4Handle();
void HwFlyingF4SetDefaults(UAVObjHandle obj, uint16_t instId);

// Object data
typedef struct {
    uint8_t RcvrPort;
    uint8_t Uart1;
    uint8_t Uart2;
    uint8_t Uart3;
    uint8_t USB_HIDPort;
    uint8_t USB_VCPPort;
    uint8_t DSMxBind;
    uint8_t GyroRange;
    uint8_t AccelRange;
    uint8_t MPU6050Rate;
    uint8_t MPU6050DLPF;
    uint8_t Magnetometer;
    uint8_t ExtMagOrientation;

} __attribute__((packed)) __attribute__((aligned(4))) HwFlyingF4Data;

// Typesafe Object access functions
/**
 * @function HwFlyingF4Get(dataOut)
 * @brief Populate a HwFlyingF4Data object
 * @param[out] dataOut 
 */
static inline int32_t HwFlyingF4Get(HwFlyingF4Data *dataOut) { return UAVObjGetData(HwFlyingF4Handle(), dataOut); }

static inline int32_t HwFlyingF4Set(const HwFlyingF4Data *dataIn) { return UAVObjSetData(HwFlyingF4Handle(), dataIn); }

static inline int32_t HwFlyingF4InstGet(uint16_t instId, HwFlyingF4Data *dataOut) { return UAVObjGetInstanceData(HwFlyingF4Handle(), instId, dataOut); }

static inline int32_t HwFlyingF4InstSet(uint16_t instId, const HwFlyingF4Data *dataIn) { return UAVObjSetInstanceData(HwFlyingF4Handle(), instId, dataIn); }

static inline int32_t HwFlyingF4ConnectQueue(xQueueHandle queue) { return UAVObjConnectQueue(HwFlyingF4Handle(), queue, EV_MASK_ALL_UPDATES); }

static inline int32_t HwFlyingF4ConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(HwFlyingF4Handle(), cb, EV_MASK_ALL_UPDATES); }

static inline uint16_t HwFlyingF4CreateInstance() { return UAVObjCreateInstance(HwFlyingF4Handle(), &HwFlyingF4SetDefaults); }

static inline void HwFlyingF4RequestUpdate() { UAVObjRequestUpdate(HwFlyingF4Handle()); }

static inline void HwFlyingF4RequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(HwFlyingF4Handle(), instId); }

static inline void HwFlyingF4Updated() { UAVObjUpdated(HwFlyingF4Handle()); }

static inline void HwFlyingF4InstUpdated(uint16_t instId) { UAVObjInstanceUpdated(HwFlyingF4Handle(), instId); }

static inline int32_t HwFlyingF4GetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(HwFlyingF4Handle(), dataOut); }

static inline int32_t HwFlyingF4SetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(HwFlyingF4Handle(), dataIn); }

static inline int8_t HwFlyingF4ReadOnly() { return UAVObjReadOnly(HwFlyingF4Handle()); }

static inline uint16_t HwFlyingF4GetNumInstances(){ return UAVObjGetNumInstances(HwFlyingF4Handle()); }

static inline uint32_t HwFlyingF4GetNumBytes(){ return UAVObjGetNumBytes(HwFlyingF4Handle()); }

// Field information
// Field RcvrPort information
/* Enumeration options for field RcvrPort */
typedef enum { HWFLYINGF4_RCVRPORT_DISABLED=0, HWFLYINGF4_RCVRPORT_PWM=1, HWFLYINGF4_RCVRPORT_PPM=2, HWFLYINGF4_RCVRPORT_PPMPWM=3, HWFLYINGF4_RCVRPORT_PPMOUTPUTS=4, HWFLYINGF4_RCVRPORT_OUTPUTS=5 }  __attribute__((packed)) HwFlyingF4RcvrPortOptions;
// Field Uart1 information
/* Enumeration options for field Uart1 */
typedef enum { HWFLYINGF4_UART1_DISABLED=0, HWFLYINGF4_UART1_GPS=1, HWFLYINGF4_UART1_SBUS=2, HWFLYINGF4_UART1_DSM2=3, HWFLYINGF4_UART1_DSMX10BIT=4, HWFLYINGF4_UART1_DSMX11BIT=5, HWFLYINGF4_UART1_HOTTSUMD=6, HWFLYINGF4_UART1_HOTTSUMH=7, HWFLYINGF4_UART1_PICOC=8 }  __attribute__((packed)) HwFlyingF4Uart1Options;
// Field Uart2 information
/* Enumeration options for field Uart2 */
typedef enum { HWFLYINGF4_UART2_DISABLED=0, HWFLYINGF4_UART2_TELEMETRY=1, HWFLYINGF4_UART2_GPS=2, HWFLYINGF4_UART2_DSM2=3, HWFLYINGF4_UART2_DSMX10BIT=4, HWFLYINGF4_UART2_DSMX11BIT=5, HWFLYINGF4_UART2_DEBUGCONSOLE=6, HWFLYINGF4_UART2_COMBRIDGE=7, HWFLYINGF4_UART2_MAVLINKTX=8, HWFLYINGF4_UART2_MAVLINKTX_GPS_RX=9, HWFLYINGF4_UART2_FRSKYSENSORHUB=10, HWFLYINGF4_UART2_HOTTSUMD=11, HWFLYINGF4_UART2_HOTTSUMH=12, HWFLYINGF4_UART2_LIGHTTELEMETRYTX=13, HWFLYINGF4_UART2_PICOC=14, HWFLYINGF4_UART2_FRSKYSPORTTELEMETRY=15 }  __attribute__((packed)) HwFlyingF4Uart2Options;
// Field Uart3 information
/* Enumeration options for field Uart3 */
typedef enum { HWFLYINGF4_UART3_DISABLED=0, HWFLYINGF4_UART3_TELEMETRY=1, HWFLYINGF4_UART3_GPS=2, HWFLYINGF4_UART3_DSM2=3, HWFLYINGF4_UART3_DSMX10BIT=4, HWFLYINGF4_UART3_DSMX11BIT=5, HWFLYINGF4_UART3_DEBUGCONSOLE=6, HWFLYINGF4_UART3_COMBRIDGE=7, HWFLYINGF4_UART3_MAVLINKTX=8, HWFLYINGF4_UART3_MAVLINKTX_GPS_RX=9, HWFLYINGF4_UART3_FRSKYSENSORHUB=10, HWFLYINGF4_UART3_HOTTSUMD=11, HWFLYINGF4_UART3_HOTTSUMH=12, HWFLYINGF4_UART3_LIGHTTELEMETRYTX=13, HWFLYINGF4_UART3_PICOC=14, HWFLYINGF4_UART3_FRSKYSPORTTELEMETRY=15 }  __attribute__((packed)) HwFlyingF4Uart3Options;
// Field USB_HIDPort information
/* Enumeration options for field USB_HIDPort */
typedef enum { HWFLYINGF4_USB_HIDPORT_USBTELEMETRY=0, HWFLYINGF4_USB_HIDPORT_RCTRANSMITTER=1, HWFLYINGF4_USB_HIDPORT_DISABLED=2 }  __attribute__((packed)) HwFlyingF4USB_HIDPortOptions;
// Field USB_VCPPort information
/* Enumeration options for field USB_VCPPort */
typedef enum { HWFLYINGF4_USB_VCPPORT_USBTELEMETRY=0, HWFLYINGF4_USB_VCPPORT_COMBRIDGE=1, HWFLYINGF4_USB_VCPPORT_DEBUGCONSOLE=2, HWFLYINGF4_USB_VCPPORT_PICOC=3, HWFLYINGF4_USB_VCPPORT_DISABLED=4 }  __attribute__((packed)) HwFlyingF4USB_VCPPortOptions;
// Field DSMxBind information
// Field GyroRange information
/* Enumeration options for field GyroRange */
typedef enum { HWFLYINGF4_GYRORANGE_250=0, HWFLYINGF4_GYRORANGE_500=1, HWFLYINGF4_GYRORANGE_1000=2, HWFLYINGF4_GYRORANGE_2000=3 }  __attribute__((packed)) HwFlyingF4GyroRangeOptions;
// Field AccelRange information
/* Enumeration options for field AccelRange */
typedef enum { HWFLYINGF4_ACCELRANGE_2G=0, HWFLYINGF4_ACCELRANGE_4G=1, HWFLYINGF4_ACCELRANGE_8G=2, HWFLYINGF4_ACCELRANGE_16G=3 }  __attribute__((packed)) HwFlyingF4AccelRangeOptions;
// Field MPU6050Rate information
/* Enumeration options for field MPU6050Rate */
typedef enum { HWFLYINGF4_MPU6050RATE_200=0, HWFLYINGF4_MPU6050RATE_333=1, HWFLYINGF4_MPU6050RATE_500=2, HWFLYINGF4_MPU6050RATE_666=3, HWFLYINGF4_MPU6050RATE_1000=4, HWFLYINGF4_MPU6050RATE_2000=5, HWFLYINGF4_MPU6050RATE_4000=6, HWFLYINGF4_MPU6050RATE_8000=7 }  __attribute__((packed)) HwFlyingF4MPU6050RateOptions;
// Field MPU6050DLPF information
/* Enumeration options for field MPU6050DLPF */
typedef enum { HWFLYINGF4_MPU6050DLPF_256=0, HWFLYINGF4_MPU6050DLPF_188=1, HWFLYINGF4_MPU6050DLPF_98=2, HWFLYINGF4_MPU6050DLPF_42=3, HWFLYINGF4_MPU6050DLPF_20=4, HWFLYINGF4_MPU6050DLPF_10=5, HWFLYINGF4_MPU6050DLPF_5=6 }  __attribute__((packed)) HwFlyingF4MPU6050DLPFOptions;
// Field Magnetometer information
/* Enumeration options for field Magnetometer */
typedef enum { HWFLYINGF4_MAGNETOMETER_DISABLED=0, HWFLYINGF4_MAGNETOMETER_EXTERNALI2C=1 }  __attribute__((packed)) HwFlyingF4MagnetometerOptions;
// Field ExtMagOrientation information
/* Enumeration options for field ExtMagOrientation */
typedef enum { HWFLYINGF4_EXTMAGORIENTATION_TOP0DEGCW=0, HWFLYINGF4_EXTMAGORIENTATION_TOP90DEGCW=1, HWFLYINGF4_EXTMAGORIENTATION_TOP180DEGCW=2, HWFLYINGF4_EXTMAGORIENTATION_TOP270DEGCW=3, HWFLYINGF4_EXTMAGORIENTATION_BOTTOM0DEGCW=4, HWFLYINGF4_EXTMAGORIENTATION_BOTTOM90DEGCW=5, HWFLYINGF4_EXTMAGORIENTATION_BOTTOM180DEGCW=6, HWFLYINGF4_EXTMAGORIENTATION_BOTTOM270DEGCW=7 }  __attribute__((packed)) HwFlyingF4ExtMagOrientationOptions;


// set/Get functions
extern void HwFlyingF4RcvrPortSet( uint8_t *NewRcvrPort );
extern void HwFlyingF4RcvrPortGet( uint8_t *NewRcvrPort );
extern void HwFlyingF4Uart1Set( uint8_t *NewUart1 );
extern void HwFlyingF4Uart1Get( uint8_t *NewUart1 );
extern void HwFlyingF4Uart2Set( uint8_t *NewUart2 );
extern void HwFlyingF4Uart2Get( uint8_t *NewUart2 );
extern void HwFlyingF4Uart3Set( uint8_t *NewUart3 );
extern void HwFlyingF4Uart3Get( uint8_t *NewUart3 );
extern void HwFlyingF4USB_HIDPortSet( uint8_t *NewUSB_HIDPort );
extern void HwFlyingF4USB_HIDPortGet( uint8_t *NewUSB_HIDPort );
extern void HwFlyingF4USB_VCPPortSet( uint8_t *NewUSB_VCPPort );
extern void HwFlyingF4USB_VCPPortGet( uint8_t *NewUSB_VCPPort );
extern void HwFlyingF4DSMxBindSet( uint8_t *NewDSMxBind );
extern void HwFlyingF4DSMxBindGet( uint8_t *NewDSMxBind );
extern void HwFlyingF4GyroRangeSet( uint8_t *NewGyroRange );
extern void HwFlyingF4GyroRangeGet( uint8_t *NewGyroRange );
extern void HwFlyingF4AccelRangeSet( uint8_t *NewAccelRange );
extern void HwFlyingF4AccelRangeGet( uint8_t *NewAccelRange );
extern void HwFlyingF4MPU6050RateSet( uint8_t *NewMPU6050Rate );
extern void HwFlyingF4MPU6050RateGet( uint8_t *NewMPU6050Rate );
extern void HwFlyingF4MPU6050DLPFSet( uint8_t *NewMPU6050DLPF );
extern void HwFlyingF4MPU6050DLPFGet( uint8_t *NewMPU6050DLPF );
extern void HwFlyingF4MagnetometerSet( uint8_t *NewMagnetometer );
extern void HwFlyingF4MagnetometerGet( uint8_t *NewMagnetometer );
extern void HwFlyingF4ExtMagOrientationSet( uint8_t *NewExtMagOrientation );
extern void HwFlyingF4ExtMagOrientationGet( uint8_t *NewExtMagOrientation );


#endif // HWFLYINGF4_H

/**
 * @}
 * @}
 */
