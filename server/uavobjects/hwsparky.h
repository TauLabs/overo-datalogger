/**
 ******************************************************************************
 * @addtogroup UAVObjects UAVObject set for this firmware
 * @{
 * @addtogroup HwSparky HwSparky
 * @brief Selection of optional hardware configurations.
 *
 *
 * @file       hwsparky.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @author     Tau Labs, http://taulabs.org, Copyright (C) 2012-2013
 * @brief      Include files for the HwSparky object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: hwsparky.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef HWSPARKY_H
#define HWSPARKY_H

// Object constants
#define HWSPARKY_OBJID 0x173FEA
#define HWSPARKY_ISSINGLEINST 1
#define HWSPARKY_ISSETTINGS 1
#define HWSPARKY_NUMBYTES 11

// Generic interface functions
int32_t HwSparkyInitialize();
UAVObjHandle HwSparkyHandle();
void HwSparkySetDefaults(UAVObjHandle obj, uint16_t instId);

// Object data
typedef struct {
    uint8_t RcvrPort;
    uint8_t FlexiPort;
    uint8_t MainPort;
    uint8_t OutPort;
    uint8_t USB_HIDPort;
    uint8_t USB_VCPPort;
    uint8_t DSMxBind;
    uint8_t GyroRange;
    uint8_t AccelRange;
    uint8_t MPU9150DLPF;
    uint8_t MPU9150Rate;

} __attribute__((packed)) __attribute__((aligned(4))) HwSparkyData;

// Typesafe Object access functions
/**
 * @function HwSparkyGet(dataOut)
 * @brief Populate a HwSparkyData object
 * @param[out] dataOut 
 */
static inline int32_t HwSparkyGet(HwSparkyData *dataOut) { return UAVObjGetData(HwSparkyHandle(), dataOut); }

static inline int32_t HwSparkySet(const HwSparkyData *dataIn) { return UAVObjSetData(HwSparkyHandle(), dataIn); }

static inline int32_t HwSparkyInstGet(uint16_t instId, HwSparkyData *dataOut) { return UAVObjGetInstanceData(HwSparkyHandle(), instId, dataOut); }

static inline int32_t HwSparkyInstSet(uint16_t instId, const HwSparkyData *dataIn) { return UAVObjSetInstanceData(HwSparkyHandle(), instId, dataIn); }

static inline int32_t HwSparkyConnectQueue(xQueueHandle queue) { return UAVObjConnectQueue(HwSparkyHandle(), queue, EV_MASK_ALL_UPDATES); }

static inline int32_t HwSparkyConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(HwSparkyHandle(), cb, EV_MASK_ALL_UPDATES); }

static inline uint16_t HwSparkyCreateInstance() { return UAVObjCreateInstance(HwSparkyHandle(), &HwSparkySetDefaults); }

static inline void HwSparkyRequestUpdate() { UAVObjRequestUpdate(HwSparkyHandle()); }

static inline void HwSparkyRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(HwSparkyHandle(), instId); }

static inline void HwSparkyUpdated() { UAVObjUpdated(HwSparkyHandle()); }

static inline void HwSparkyInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(HwSparkyHandle(), instId); }

static inline int32_t HwSparkyGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(HwSparkyHandle(), dataOut); }

static inline int32_t HwSparkySetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(HwSparkyHandle(), dataIn); }

static inline int8_t HwSparkyReadOnly() { return UAVObjReadOnly(HwSparkyHandle()); }

static inline uint16_t HwSparkyGetNumInstances(){ return UAVObjGetNumInstances(HwSparkyHandle()); }

static inline uint32_t HwSparkyGetNumBytes(){ return UAVObjGetNumBytes(HwSparkyHandle()); }

// Field information
// Field RcvrPort information
/* Enumeration options for field RcvrPort */
typedef enum { HWSPARKY_RCVRPORT_DISABLED=0, HWSPARKY_RCVRPORT_PPM=1, HWSPARKY_RCVRPORT_SBUS=2, HWSPARKY_RCVRPORT_DSM2=3, HWSPARKY_RCVRPORT_DSMX10BIT=4, HWSPARKY_RCVRPORT_DSMX11BIT=5, HWSPARKY_RCVRPORT_HOTTSUMD=6, HWSPARKY_RCVRPORT_HOTTSUMH=7 }  __attribute__((packed)) HwSparkyRcvrPortOptions;
// Field FlexiPort information
/* Enumeration options for field FlexiPort */
typedef enum { HWSPARKY_FLEXIPORT_DISABLED=0, HWSPARKY_FLEXIPORT_TELEMETRY=1, HWSPARKY_FLEXIPORT_DEBUGCONSOLE=2, HWSPARKY_FLEXIPORT_COMBRIDGE=3, HWSPARKY_FLEXIPORT_GPS=4, HWSPARKY_FLEXIPORT_SBUS=5, HWSPARKY_FLEXIPORT_DSM2=6, HWSPARKY_FLEXIPORT_DSMX10BIT=7, HWSPARKY_FLEXIPORT_DSMX11BIT=8, HWSPARKY_FLEXIPORT_MAVLINKTX=9, HWSPARKY_FLEXIPORT_MAVLINKTX_GPS_RX=10, HWSPARKY_FLEXIPORT_HOTTTELEMETRY=11, HWSPARKY_FLEXIPORT_FRSKYSENSORHUB=12, HWSPARKY_FLEXIPORT_LIGHTTELEMETRYTX=13, HWSPARKY_FLEXIPORT_FRSKYSPORTTELEMETRY=14 }  __attribute__((packed)) HwSparkyFlexiPortOptions;
// Field MainPort information
/* Enumeration options for field MainPort */
typedef enum { HWSPARKY_MAINPORT_DISABLED=0, HWSPARKY_MAINPORT_TELEMETRY=1, HWSPARKY_MAINPORT_DEBUGCONSOLE=2, HWSPARKY_MAINPORT_COMBRIDGE=3, HWSPARKY_MAINPORT_GPS=4, HWSPARKY_MAINPORT_SBUS=5, HWSPARKY_MAINPORT_DSM2=6, HWSPARKY_MAINPORT_DSMX10BIT=7, HWSPARKY_MAINPORT_DSMX11BIT=8, HWSPARKY_MAINPORT_MAVLINKTX=9, HWSPARKY_MAINPORT_MAVLINKTX_GPS_RX=10, HWSPARKY_MAINPORT_HOTTTELEMETRY=11, HWSPARKY_MAINPORT_FRSKYSENSORHUB=12, HWSPARKY_MAINPORT_LIGHTTELEMETRYTX=13, HWSPARKY_MAINPORT_FRSKYSPORTTELEMETRY=14 }  __attribute__((packed)) HwSparkyMainPortOptions;
// Field OutPort information
/* Enumeration options for field OutPort */
typedef enum { HWSPARKY_OUTPORT_PWM10=0, HWSPARKY_OUTPORT_PWM73ADC=1, HWSPARKY_OUTPORT_PWM82ADC=2, HWSPARKY_OUTPORT_PWM9PWM_IN=3, HWSPARKY_OUTPORT_PWM7PWM_IN2ADC=4 }  __attribute__((packed)) HwSparkyOutPortOptions;
// Field USB_HIDPort information
/* Enumeration options for field USB_HIDPort */
typedef enum { HWSPARKY_USB_HIDPORT_USBTELEMETRY=0, HWSPARKY_USB_HIDPORT_RCTRANSMITTER=1, HWSPARKY_USB_HIDPORT_DISABLED=2 }  __attribute__((packed)) HwSparkyUSB_HIDPortOptions;
// Field USB_VCPPort information
/* Enumeration options for field USB_VCPPort */
typedef enum { HWSPARKY_USB_VCPPORT_USBTELEMETRY=0, HWSPARKY_USB_VCPPORT_COMBRIDGE=1, HWSPARKY_USB_VCPPORT_DEBUGCONSOLE=2, HWSPARKY_USB_VCPPORT_DISABLED=3 }  __attribute__((packed)) HwSparkyUSB_VCPPortOptions;
// Field DSMxBind information
// Field GyroRange information
/* Enumeration options for field GyroRange */
typedef enum { HWSPARKY_GYRORANGE_250=0, HWSPARKY_GYRORANGE_500=1, HWSPARKY_GYRORANGE_1000=2, HWSPARKY_GYRORANGE_2000=3 }  __attribute__((packed)) HwSparkyGyroRangeOptions;
// Field AccelRange information
/* Enumeration options for field AccelRange */
typedef enum { HWSPARKY_ACCELRANGE_2G=0, HWSPARKY_ACCELRANGE_4G=1, HWSPARKY_ACCELRANGE_8G=2, HWSPARKY_ACCELRANGE_16G=3 }  __attribute__((packed)) HwSparkyAccelRangeOptions;
// Field MPU9150DLPF information
/* Enumeration options for field MPU9150DLPF */
typedef enum { HWSPARKY_MPU9150DLPF_256=0, HWSPARKY_MPU9150DLPF_188=1, HWSPARKY_MPU9150DLPF_98=2, HWSPARKY_MPU9150DLPF_42=3, HWSPARKY_MPU9150DLPF_20=4, HWSPARKY_MPU9150DLPF_10=5, HWSPARKY_MPU9150DLPF_5=6 }  __attribute__((packed)) HwSparkyMPU9150DLPFOptions;
// Field MPU9150Rate information
/* Enumeration options for field MPU9150Rate */
typedef enum { HWSPARKY_MPU9150RATE_200=0, HWSPARKY_MPU9150RATE_333=1, HWSPARKY_MPU9150RATE_444=2, HWSPARKY_MPU9150RATE_500=3, HWSPARKY_MPU9150RATE_666=4, HWSPARKY_MPU9150RATE_1000=5, HWSPARKY_MPU9150RATE_2000=6, HWSPARKY_MPU9150RATE_4000=7, HWSPARKY_MPU9150RATE_8000=8 }  __attribute__((packed)) HwSparkyMPU9150RateOptions;


// set/Get functions
extern void HwSparkyRcvrPortSet( uint8_t *NewRcvrPort );
extern void HwSparkyRcvrPortGet( uint8_t *NewRcvrPort );
extern void HwSparkyFlexiPortSet( uint8_t *NewFlexiPort );
extern void HwSparkyFlexiPortGet( uint8_t *NewFlexiPort );
extern void HwSparkyMainPortSet( uint8_t *NewMainPort );
extern void HwSparkyMainPortGet( uint8_t *NewMainPort );
extern void HwSparkyOutPortSet( uint8_t *NewOutPort );
extern void HwSparkyOutPortGet( uint8_t *NewOutPort );
extern void HwSparkyUSB_HIDPortSet( uint8_t *NewUSB_HIDPort );
extern void HwSparkyUSB_HIDPortGet( uint8_t *NewUSB_HIDPort );
extern void HwSparkyUSB_VCPPortSet( uint8_t *NewUSB_VCPPort );
extern void HwSparkyUSB_VCPPortGet( uint8_t *NewUSB_VCPPort );
extern void HwSparkyDSMxBindSet( uint8_t *NewDSMxBind );
extern void HwSparkyDSMxBindGet( uint8_t *NewDSMxBind );
extern void HwSparkyGyroRangeSet( uint8_t *NewGyroRange );
extern void HwSparkyGyroRangeGet( uint8_t *NewGyroRange );
extern void HwSparkyAccelRangeSet( uint8_t *NewAccelRange );
extern void HwSparkyAccelRangeGet( uint8_t *NewAccelRange );
extern void HwSparkyMPU9150DLPFSet( uint8_t *NewMPU9150DLPF );
extern void HwSparkyMPU9150DLPFGet( uint8_t *NewMPU9150DLPF );
extern void HwSparkyMPU9150RateSet( uint8_t *NewMPU9150Rate );
extern void HwSparkyMPU9150RateGet( uint8_t *NewMPU9150Rate );


#endif // HWSPARKY_H

/**
 * @}
 * @}
 */
