/**
 ******************************************************************************
 * @addtogroup UAVObjects UAVObject set for this firmware
 * @{
 * @addtogroup SystemStats SystemStats
 * @brief CPU and memory usage from OpenPilot computer. 
 *
 *
 * @file       systemstats.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @author     Tau Labs, http://taulabs.org, Copyright (C) 2012-2013
 * @brief      Include files for the SystemStats object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: systemstats.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef SYSTEMSTATS_H
#define SYSTEMSTATS_H

// Object constants
#define SYSTEMSTATS_OBJID 0x74E632D4
#define SYSTEMSTATS_ISSINGLEINST 1
#define SYSTEMSTATS_ISSETTINGS 0
#define SYSTEMSTATS_NUMBYTES 24

// Generic interface functions
int32_t SystemStatsInitialize();
UAVObjHandle SystemStatsHandle();
void SystemStatsSetDefaults(UAVObjHandle obj, uint16_t instId);

// Object data
typedef struct {
    uint32_t FlightTime;
    uint32_t HeapRemaining;
    uint32_t EventSystemWarningID;
    uint32_t ObjectManagerCallbackID;
    uint32_t ObjectManagerQueueID;
    uint16_t IRQStackRemaining;
    uint8_t CPULoad;
    int8_t CPUTemp;

} __attribute__((packed)) __attribute__((aligned(4))) SystemStatsData;

// Typesafe Object access functions
/**
 * @function SystemStatsGet(dataOut)
 * @brief Populate a SystemStatsData object
 * @param[out] dataOut 
 */
static inline int32_t SystemStatsGet(SystemStatsData *dataOut) { return UAVObjGetData(SystemStatsHandle(), dataOut); }

static inline int32_t SystemStatsSet(const SystemStatsData *dataIn) { return UAVObjSetData(SystemStatsHandle(), dataIn); }

static inline int32_t SystemStatsInstGet(uint16_t instId, SystemStatsData *dataOut) { return UAVObjGetInstanceData(SystemStatsHandle(), instId, dataOut); }

static inline int32_t SystemStatsInstSet(uint16_t instId, const SystemStatsData *dataIn) { return UAVObjSetInstanceData(SystemStatsHandle(), instId, dataIn); }

static inline int32_t SystemStatsConnectQueue(xQueueHandle queue) { return UAVObjConnectQueue(SystemStatsHandle(), queue, EV_MASK_ALL_UPDATES); }

static inline int32_t SystemStatsConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(SystemStatsHandle(), cb, EV_MASK_ALL_UPDATES); }

static inline uint16_t SystemStatsCreateInstance() { return UAVObjCreateInstance(SystemStatsHandle(), &SystemStatsSetDefaults); }

static inline void SystemStatsRequestUpdate() { UAVObjRequestUpdate(SystemStatsHandle()); }

static inline void SystemStatsRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(SystemStatsHandle(), instId); }

static inline void SystemStatsUpdated() { UAVObjUpdated(SystemStatsHandle()); }

static inline void SystemStatsInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(SystemStatsHandle(), instId); }

static inline int32_t SystemStatsGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(SystemStatsHandle(), dataOut); }

static inline int32_t SystemStatsSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(SystemStatsHandle(), dataIn); }

static inline int8_t SystemStatsReadOnly() { return UAVObjReadOnly(SystemStatsHandle()); }

static inline uint16_t SystemStatsGetNumInstances(){ return UAVObjGetNumInstances(SystemStatsHandle()); }

static inline uint32_t SystemStatsGetNumBytes(){ return UAVObjGetNumBytes(SystemStatsHandle()); }

// Field information
// Field FlightTime information
// Field HeapRemaining information
// Field EventSystemWarningID information
// Field ObjectManagerCallbackID information
// Field ObjectManagerQueueID information
// Field IRQStackRemaining information
// Field CPULoad information
// Field CPUTemp information


// set/Get functions
extern void SystemStatsFlightTimeSet( uint32_t *NewFlightTime );
extern void SystemStatsFlightTimeGet( uint32_t *NewFlightTime );
extern void SystemStatsHeapRemainingSet( uint32_t *NewHeapRemaining );
extern void SystemStatsHeapRemainingGet( uint32_t *NewHeapRemaining );
extern void SystemStatsEventSystemWarningIDSet( uint32_t *NewEventSystemWarningID );
extern void SystemStatsEventSystemWarningIDGet( uint32_t *NewEventSystemWarningID );
extern void SystemStatsObjectManagerCallbackIDSet( uint32_t *NewObjectManagerCallbackID );
extern void SystemStatsObjectManagerCallbackIDGet( uint32_t *NewObjectManagerCallbackID );
extern void SystemStatsObjectManagerQueueIDSet( uint32_t *NewObjectManagerQueueID );
extern void SystemStatsObjectManagerQueueIDGet( uint32_t *NewObjectManagerQueueID );
extern void SystemStatsIRQStackRemainingSet( uint16_t *NewIRQStackRemaining );
extern void SystemStatsIRQStackRemainingGet( uint16_t *NewIRQStackRemaining );
extern void SystemStatsCPULoadSet( uint8_t *NewCPULoad );
extern void SystemStatsCPULoadGet( uint8_t *NewCPULoad );
extern void SystemStatsCPUTempSet( int8_t *NewCPUTemp );
extern void SystemStatsCPUTempGet( int8_t *NewCPUTemp );


#endif // SYSTEMSTATS_H

/**
 * @}
 * @}
 */
