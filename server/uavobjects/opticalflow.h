/**
 ******************************************************************************
 * @addtogroup UAVObjects UAVObject set for this firmware
 * @{
 * @addtogroup OpticalFlow OpticalFlow
 * @brief The optical flow sensor data, rotated into body frame.
 *
 *
 * @file       opticalflow.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @author     Tau Labs, http://taulabs.org, Copyright (C) 2012-2015
 * @brief      Include files for the OpticalFlow object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: opticalflow.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef OPTICALFLOW_H
#define OPTICALFLOW_H

#include "pios_queue.h"
#include "uavoversion.h"



// Object constants
#define OPTICALFLOW_OBJID 0x225D3BB8
#define OPTICALFLOW_ISSINGLEINST 1
#define OPTICALFLOW_ISSETTINGS 0
#define OPTICALFLOW_NUMBYTES 13

// Generic interface functions
int32_t OpticalFlowInitialize();
UAVObjHandle OpticalFlowHandle();
void OpticalFlowSetDefaults(UAVObjHandle obj, uint16_t instId);

// Object data
typedef struct {
    float x;
    float y;
    float z;
    uint8_t Quality;

} __attribute__((packed)) __attribute__((aligned(4))) OpticalFlowData;

// Typesafe Object access functions
/**
 * @function OpticalFlowGet(dataOut)
 * @brief Populate a OpticalFlowData object
 * @param[out] dataOut 
 */
static inline int32_t OpticalFlowGet(OpticalFlowData *dataOut) { return UAVObjGetData(OpticalFlowHandle(), dataOut); }

static inline int32_t OpticalFlowSet(const OpticalFlowData *dataIn) { return UAVObjSetData(OpticalFlowHandle(), dataIn); }

static inline int32_t OpticalFlowInstGet(uint16_t instId, OpticalFlowData *dataOut) { return UAVObjGetInstanceData(OpticalFlowHandle(), instId, dataOut); }

static inline int32_t OpticalFlowInstSet(uint16_t instId, const OpticalFlowData *dataIn) { return UAVObjSetInstanceData(OpticalFlowHandle(), instId, dataIn); }

static inline int32_t OpticalFlowConnectQueue(struct pios_queue *queue) { return UAVObjConnectQueue(OpticalFlowHandle(), queue, EV_MASK_ALL_UPDATES); }

static inline int32_t OpticalFlowConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(OpticalFlowHandle(), cb, EV_MASK_ALL_UPDATES); }

static inline uint16_t OpticalFlowCreateInstance() { return UAVObjCreateInstance(OpticalFlowHandle(), &OpticalFlowSetDefaults); }

static inline void OpticalFlowRequestUpdate() { UAVObjRequestUpdate(OpticalFlowHandle()); }

static inline void OpticalFlowRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(OpticalFlowHandle(), instId); }

static inline void OpticalFlowUpdated() { UAVObjUpdated(OpticalFlowHandle()); }

static inline void OpticalFlowInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(OpticalFlowHandle(), instId); }

static inline int32_t OpticalFlowGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(OpticalFlowHandle(), dataOut); }

static inline int32_t OpticalFlowSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(OpticalFlowHandle(), dataIn); }

static inline int8_t OpticalFlowReadOnly() { return UAVObjReadOnly(OpticalFlowHandle()); }

static inline uint16_t OpticalFlowGetNumInstances(){ return UAVObjGetNumInstances(OpticalFlowHandle()); }

static inline uint32_t OpticalFlowGetNumBytes(){ return UAVObjGetNumBytes(OpticalFlowHandle()); }

// Field information
// Field x information
// Field y information
// Field z information
// Field Quality information


// set/Get functions
extern void OpticalFlowxSet( float *Newx );
extern void OpticalFlowxGet( float *Newx );
extern void OpticalFlowySet( float *Newy );
extern void OpticalFlowyGet( float *Newy );
extern void OpticalFlowzSet( float *Newz );
extern void OpticalFlowzGet( float *Newz );
extern void OpticalFlowQualitySet( uint8_t *NewQuality );
extern void OpticalFlowQualityGet( uint8_t *NewQuality );


#endif // OPTICALFLOW_H

/**
 * @}
 * @}
 */
