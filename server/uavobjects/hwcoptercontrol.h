/**
 ******************************************************************************
 * @addtogroup UAVObjects UAVObject set for this firmware
 * @{
 * @addtogroup HwCopterControl HwCopterControl
 * @brief Selection of optional hardware configurations.
 *
 *
 * @file       hwcoptercontrol.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @author     Tau Labs, http://taulabs.org, Copyright (C) 2012-2013
 * @brief      Include files for the HwCopterControl object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: hwcoptercontrol.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef HWCOPTERCONTROL_H
#define HWCOPTERCONTROL_H

// Object constants
#define HWCOPTERCONTROL_OBJID 0xB6FC91FC
#define HWCOPTERCONTROL_ISSINGLEINST 1
#define HWCOPTERCONTROL_ISSETTINGS 1
#define HWCOPTERCONTROL_NUMBYTES 10

// Generic interface functions
int32_t HwCopterControlInitialize();
UAVObjHandle HwCopterControlHandle();
void HwCopterControlSetDefaults(UAVObjHandle obj, uint16_t instId);

// Object data
typedef struct {
    uint8_t RcvrPort;
    uint8_t MainPort;
    uint8_t FlexiPort;
    uint8_t USB_HIDPort;
    uint8_t USB_VCPPort;
    uint8_t DSMxBind;
    uint8_t GyroRange;
    uint8_t AccelRange;
    uint8_t MPU6000Rate;
    uint8_t MPU6000DLPF;

} __attribute__((packed)) __attribute__((aligned(4))) HwCopterControlData;

// Typesafe Object access functions
/**
 * @function HwCopterControlGet(dataOut)
 * @brief Populate a HwCopterControlData object
 * @param[out] dataOut 
 */
static inline int32_t HwCopterControlGet(HwCopterControlData *dataOut) { return UAVObjGetData(HwCopterControlHandle(), dataOut); }

static inline int32_t HwCopterControlSet(const HwCopterControlData *dataIn) { return UAVObjSetData(HwCopterControlHandle(), dataIn); }

static inline int32_t HwCopterControlInstGet(uint16_t instId, HwCopterControlData *dataOut) { return UAVObjGetInstanceData(HwCopterControlHandle(), instId, dataOut); }

static inline int32_t HwCopterControlInstSet(uint16_t instId, const HwCopterControlData *dataIn) { return UAVObjSetInstanceData(HwCopterControlHandle(), instId, dataIn); }

static inline int32_t HwCopterControlConnectQueue(xQueueHandle queue) { return UAVObjConnectQueue(HwCopterControlHandle(), queue, EV_MASK_ALL_UPDATES); }

static inline int32_t HwCopterControlConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(HwCopterControlHandle(), cb, EV_MASK_ALL_UPDATES); }

static inline uint16_t HwCopterControlCreateInstance() { return UAVObjCreateInstance(HwCopterControlHandle(), &HwCopterControlSetDefaults); }

static inline void HwCopterControlRequestUpdate() { UAVObjRequestUpdate(HwCopterControlHandle()); }

static inline void HwCopterControlRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(HwCopterControlHandle(), instId); }

static inline void HwCopterControlUpdated() { UAVObjUpdated(HwCopterControlHandle()); }

static inline void HwCopterControlInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(HwCopterControlHandle(), instId); }

static inline int32_t HwCopterControlGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(HwCopterControlHandle(), dataOut); }

static inline int32_t HwCopterControlSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(HwCopterControlHandle(), dataIn); }

static inline int8_t HwCopterControlReadOnly() { return UAVObjReadOnly(HwCopterControlHandle()); }

static inline uint16_t HwCopterControlGetNumInstances(){ return UAVObjGetNumInstances(HwCopterControlHandle()); }

static inline uint32_t HwCopterControlGetNumBytes(){ return UAVObjGetNumBytes(HwCopterControlHandle()); }

// Field information
// Field RcvrPort information
/* Enumeration options for field RcvrPort */
typedef enum { HWCOPTERCONTROL_RCVRPORT_DISABLED=0, HWCOPTERCONTROL_RCVRPORT_PWM=1, HWCOPTERCONTROL_RCVRPORT_PPM=2, HWCOPTERCONTROL_RCVRPORT_PPMPWM=3, HWCOPTERCONTROL_RCVRPORT_PPMOUTPUTS=4, HWCOPTERCONTROL_RCVRPORT_OUTPUTS=5 }  __attribute__((packed)) HwCopterControlRcvrPortOptions;
// Field MainPort information
/* Enumeration options for field MainPort */
typedef enum { HWCOPTERCONTROL_MAINPORT_DISABLED=0, HWCOPTERCONTROL_MAINPORT_TELEMETRY=1, HWCOPTERCONTROL_MAINPORT_GPS=2, HWCOPTERCONTROL_MAINPORT_SBUS=3, HWCOPTERCONTROL_MAINPORT_DSM2=4, HWCOPTERCONTROL_MAINPORT_DSMX10BIT=5, HWCOPTERCONTROL_MAINPORT_DSMX11BIT=6, HWCOPTERCONTROL_MAINPORT_DEBUGCONSOLE=7, HWCOPTERCONTROL_MAINPORT_COMBRIDGE=8, HWCOPTERCONTROL_MAINPORT_MAVLINKTX=9, HWCOPTERCONTROL_MAINPORT_MAVLINKTX_GPS_RX=10, HWCOPTERCONTROL_MAINPORT_FRSKYSENSORHUB=11, HWCOPTERCONTROL_MAINPORT_LIGHTTELEMETRYTX=12 }  __attribute__((packed)) HwCopterControlMainPortOptions;
// Field FlexiPort information
/* Enumeration options for field FlexiPort */
typedef enum { HWCOPTERCONTROL_FLEXIPORT_DISABLED=0, HWCOPTERCONTROL_FLEXIPORT_TELEMETRY=1, HWCOPTERCONTROL_FLEXIPORT_GPS=2, HWCOPTERCONTROL_FLEXIPORT_I2C=3, HWCOPTERCONTROL_FLEXIPORT_DSM2=4, HWCOPTERCONTROL_FLEXIPORT_DSMX10BIT=5, HWCOPTERCONTROL_FLEXIPORT_DSMX11BIT=6, HWCOPTERCONTROL_FLEXIPORT_DEBUGCONSOLE=7, HWCOPTERCONTROL_FLEXIPORT_COMBRIDGE=8, HWCOPTERCONTROL_FLEXIPORT_MAVLINKTX=9, HWCOPTERCONTROL_FLEXIPORT_FRSKYSENSORHUB=10, HWCOPTERCONTROL_FLEXIPORT_LIGHTTELEMETRYTX=11 }  __attribute__((packed)) HwCopterControlFlexiPortOptions;
// Field USB_HIDPort information
/* Enumeration options for field USB_HIDPort */
typedef enum { HWCOPTERCONTROL_USB_HIDPORT_USBTELEMETRY=0, HWCOPTERCONTROL_USB_HIDPORT_RCTRANSMITTER=1, HWCOPTERCONTROL_USB_HIDPORT_DISABLED=2 }  __attribute__((packed)) HwCopterControlUSB_HIDPortOptions;
// Field USB_VCPPort information
/* Enumeration options for field USB_VCPPort */
typedef enum { HWCOPTERCONTROL_USB_VCPPORT_USBTELEMETRY=0, HWCOPTERCONTROL_USB_VCPPORT_COMBRIDGE=1, HWCOPTERCONTROL_USB_VCPPORT_DEBUGCONSOLE=2, HWCOPTERCONTROL_USB_VCPPORT_DISABLED=3 }  __attribute__((packed)) HwCopterControlUSB_VCPPortOptions;
// Field DSMxBind information
// Field GyroRange information
/* Enumeration options for field GyroRange */
typedef enum { HWCOPTERCONTROL_GYRORANGE_250=0, HWCOPTERCONTROL_GYRORANGE_500=1, HWCOPTERCONTROL_GYRORANGE_1000=2, HWCOPTERCONTROL_GYRORANGE_2000=3 }  __attribute__((packed)) HwCopterControlGyroRangeOptions;
// Field AccelRange information
/* Enumeration options for field AccelRange */
typedef enum { HWCOPTERCONTROL_ACCELRANGE_2G=0, HWCOPTERCONTROL_ACCELRANGE_4G=1, HWCOPTERCONTROL_ACCELRANGE_8G=2, HWCOPTERCONTROL_ACCELRANGE_16G=3 }  __attribute__((packed)) HwCopterControlAccelRangeOptions;
// Field MPU6000Rate information
/* Enumeration options for field MPU6000Rate */
typedef enum { HWCOPTERCONTROL_MPU6000RATE_200=0, HWCOPTERCONTROL_MPU6000RATE_333=1, HWCOPTERCONTROL_MPU6000RATE_500=2, HWCOPTERCONTROL_MPU6000RATE_666=3, HWCOPTERCONTROL_MPU6000RATE_1000=4, HWCOPTERCONTROL_MPU6000RATE_2000=5, HWCOPTERCONTROL_MPU6000RATE_4000=6, HWCOPTERCONTROL_MPU6000RATE_8000=7 }  __attribute__((packed)) HwCopterControlMPU6000RateOptions;
// Field MPU6000DLPF information
/* Enumeration options for field MPU6000DLPF */
typedef enum { HWCOPTERCONTROL_MPU6000DLPF_256=0, HWCOPTERCONTROL_MPU6000DLPF_188=1, HWCOPTERCONTROL_MPU6000DLPF_98=2, HWCOPTERCONTROL_MPU6000DLPF_42=3, HWCOPTERCONTROL_MPU6000DLPF_20=4, HWCOPTERCONTROL_MPU6000DLPF_10=5, HWCOPTERCONTROL_MPU6000DLPF_5=6 }  __attribute__((packed)) HwCopterControlMPU6000DLPFOptions;


// set/Get functions
extern void HwCopterControlRcvrPortSet( uint8_t *NewRcvrPort );
extern void HwCopterControlRcvrPortGet( uint8_t *NewRcvrPort );
extern void HwCopterControlMainPortSet( uint8_t *NewMainPort );
extern void HwCopterControlMainPortGet( uint8_t *NewMainPort );
extern void HwCopterControlFlexiPortSet( uint8_t *NewFlexiPort );
extern void HwCopterControlFlexiPortGet( uint8_t *NewFlexiPort );
extern void HwCopterControlUSB_HIDPortSet( uint8_t *NewUSB_HIDPort );
extern void HwCopterControlUSB_HIDPortGet( uint8_t *NewUSB_HIDPort );
extern void HwCopterControlUSB_VCPPortSet( uint8_t *NewUSB_VCPPort );
extern void HwCopterControlUSB_VCPPortGet( uint8_t *NewUSB_VCPPort );
extern void HwCopterControlDSMxBindSet( uint8_t *NewDSMxBind );
extern void HwCopterControlDSMxBindGet( uint8_t *NewDSMxBind );
extern void HwCopterControlGyroRangeSet( uint8_t *NewGyroRange );
extern void HwCopterControlGyroRangeGet( uint8_t *NewGyroRange );
extern void HwCopterControlAccelRangeSet( uint8_t *NewAccelRange );
extern void HwCopterControlAccelRangeGet( uint8_t *NewAccelRange );
extern void HwCopterControlMPU6000RateSet( uint8_t *NewMPU6000Rate );
extern void HwCopterControlMPU6000RateGet( uint8_t *NewMPU6000Rate );
extern void HwCopterControlMPU6000DLPFSet( uint8_t *NewMPU6000DLPF );
extern void HwCopterControlMPU6000DLPFGet( uint8_t *NewMPU6000DLPF );


#endif // HWCOPTERCONTROL_H

/**
 * @}
 * @}
 */
