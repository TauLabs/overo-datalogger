/**
 ******************************************************************************
 * @addtogroup UAVObjects UAVObject set for this firmware
 * @{
 * @addtogroup TrimAnglesSettings TrimAnglesSettings
 * @brief The trim angle required for the UAV to fly straight and level.
 *
 *
 * @file       trimanglessettings.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @author     Tau Labs, http://taulabs.org, Copyright (C) 2012-2015
 * @brief      Include files for the TrimAnglesSettings object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: trimanglessettings.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef TRIMANGLESSETTINGS_H
#define TRIMANGLESSETTINGS_H

#include "pios_queue.h"
#include "uavoversion.h"



// Object constants
#define TRIMANGLESSETTINGS_OBJID 0x4E09A748
#define TRIMANGLESSETTINGS_ISSINGLEINST 1
#define TRIMANGLESSETTINGS_ISSETTINGS 1
#define TRIMANGLESSETTINGS_NUMBYTES 8

// Generic interface functions
int32_t TrimAnglesSettingsInitialize();
UAVObjHandle TrimAnglesSettingsHandle();
void TrimAnglesSettingsSetDefaults(UAVObjHandle obj, uint16_t instId);

// Object data
typedef struct {
    float Roll;
    float Pitch;

} __attribute__((packed)) __attribute__((aligned(4))) TrimAnglesSettingsData;

// Typesafe Object access functions
/**
 * @function TrimAnglesSettingsGet(dataOut)
 * @brief Populate a TrimAnglesSettingsData object
 * @param[out] dataOut 
 */
static inline int32_t TrimAnglesSettingsGet(TrimAnglesSettingsData *dataOut) { return UAVObjGetData(TrimAnglesSettingsHandle(), dataOut); }

static inline int32_t TrimAnglesSettingsSet(const TrimAnglesSettingsData *dataIn) { return UAVObjSetData(TrimAnglesSettingsHandle(), dataIn); }

static inline int32_t TrimAnglesSettingsInstGet(uint16_t instId, TrimAnglesSettingsData *dataOut) { return UAVObjGetInstanceData(TrimAnglesSettingsHandle(), instId, dataOut); }

static inline int32_t TrimAnglesSettingsInstSet(uint16_t instId, const TrimAnglesSettingsData *dataIn) { return UAVObjSetInstanceData(TrimAnglesSettingsHandle(), instId, dataIn); }

static inline int32_t TrimAnglesSettingsConnectQueue(struct pios_queue *queue) { return UAVObjConnectQueue(TrimAnglesSettingsHandle(), queue, EV_MASK_ALL_UPDATES); }

static inline int32_t TrimAnglesSettingsConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(TrimAnglesSettingsHandle(), cb, EV_MASK_ALL_UPDATES); }

static inline uint16_t TrimAnglesSettingsCreateInstance() { return UAVObjCreateInstance(TrimAnglesSettingsHandle(), &TrimAnglesSettingsSetDefaults); }

static inline void TrimAnglesSettingsRequestUpdate() { UAVObjRequestUpdate(TrimAnglesSettingsHandle()); }

static inline void TrimAnglesSettingsRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(TrimAnglesSettingsHandle(), instId); }

static inline void TrimAnglesSettingsUpdated() { UAVObjUpdated(TrimAnglesSettingsHandle()); }

static inline void TrimAnglesSettingsInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(TrimAnglesSettingsHandle(), instId); }

static inline int32_t TrimAnglesSettingsGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(TrimAnglesSettingsHandle(), dataOut); }

static inline int32_t TrimAnglesSettingsSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(TrimAnglesSettingsHandle(), dataIn); }

static inline int8_t TrimAnglesSettingsReadOnly() { return UAVObjReadOnly(TrimAnglesSettingsHandle()); }

static inline uint16_t TrimAnglesSettingsGetNumInstances(){ return UAVObjGetNumInstances(TrimAnglesSettingsHandle()); }

static inline uint32_t TrimAnglesSettingsGetNumBytes(){ return UAVObjGetNumBytes(TrimAnglesSettingsHandle()); }

// Field information
// Field Roll information
// Field Pitch information


// set/Get functions
extern void TrimAnglesSettingsRollSet( float *NewRoll );
extern void TrimAnglesSettingsRollGet( float *NewRoll );
extern void TrimAnglesSettingsPitchSet( float *NewPitch );
extern void TrimAnglesSettingsPitchGet( float *NewPitch );


#endif // TRIMANGLESSETTINGS_H

/**
 * @}
 * @}
 */
