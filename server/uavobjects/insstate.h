/**
 ******************************************************************************
 * @addtogroup UAVObjects UAVObject set for this firmware
 * @{
 * @addtogroup INSState INSState
 * @brief Contains the INS state estimate
 *
 *
 * @file       insstate.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @author     Tau Labs, http://taulabs.org, Copyright (C) 2012-2013
 * @brief      Include files for the INSState object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: insstate.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef INSSTATE_H
#define INSSTATE_H

// Object constants
#define INSSTATE_OBJID 0xAE367E26
#define INSSTATE_ISSINGLEINST 1
#define INSSTATE_ISSETTINGS 0
#define INSSTATE_NUMBYTES 104

// Generic interface functions
int32_t INSStateInitialize();
UAVObjHandle INSStateHandle();
void INSStateSetDefaults(UAVObjHandle obj, uint16_t instId);

// Object data
typedef struct {
    float State[13];
    float Var[13];

} __attribute__((packed)) __attribute__((aligned(4))) INSStateData;

// Typesafe Object access functions
/**
 * @function INSStateGet(dataOut)
 * @brief Populate a INSStateData object
 * @param[out] dataOut 
 */
static inline int32_t INSStateGet(INSStateData *dataOut) { return UAVObjGetData(INSStateHandle(), dataOut); }

static inline int32_t INSStateSet(const INSStateData *dataIn) { return UAVObjSetData(INSStateHandle(), dataIn); }

static inline int32_t INSStateInstGet(uint16_t instId, INSStateData *dataOut) { return UAVObjGetInstanceData(INSStateHandle(), instId, dataOut); }

static inline int32_t INSStateInstSet(uint16_t instId, const INSStateData *dataIn) { return UAVObjSetInstanceData(INSStateHandle(), instId, dataIn); }

static inline int32_t INSStateConnectQueue(xQueueHandle queue) { return UAVObjConnectQueue(INSStateHandle(), queue, EV_MASK_ALL_UPDATES); }

static inline int32_t INSStateConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(INSStateHandle(), cb, EV_MASK_ALL_UPDATES); }

static inline uint16_t INSStateCreateInstance() { return UAVObjCreateInstance(INSStateHandle(), &INSStateSetDefaults); }

static inline void INSStateRequestUpdate() { UAVObjRequestUpdate(INSStateHandle()); }

static inline void INSStateRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(INSStateHandle(), instId); }

static inline void INSStateUpdated() { UAVObjUpdated(INSStateHandle()); }

static inline void INSStateInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(INSStateHandle(), instId); }

static inline int32_t INSStateGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(INSStateHandle(), dataOut); }

static inline int32_t INSStateSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(INSStateHandle(), dataIn); }

static inline int8_t INSStateReadOnly() { return UAVObjReadOnly(INSStateHandle()); }

static inline uint16_t INSStateGetNumInstances(){ return UAVObjGetNumInstances(INSStateHandle()); }

static inline uint32_t INSStateGetNumBytes(){ return UAVObjGetNumBytes(INSStateHandle()); }

// Field information
// Field State information
/* Number of elements for field State */
#define INSSTATE_STATE_NUMELEM 13
// Field Var information
/* Number of elements for field Var */
#define INSSTATE_VAR_NUMELEM 13


// set/Get functions
extern void INSStateStateSet( float *NewState );
extern void INSStateStateGet( float *NewState );
extern void INSStateVarSet( float *NewVar );
extern void INSStateVarGet( float *NewVar );


#endif // INSSTATE_H

/**
 * @}
 * @}
 */
