/**
 ******************************************************************************
 * @addtogroup UAVObjects UAVObject set for this firmware
 * @{
 * @addtogroup ActuatorSettings ActuatorSettings
 * @brief Settings for the @ref ActuatorModule that controls the channel assignments for the mixer based on AircraftType
 *
 *
 * @file       actuatorsettings.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @author     Tau Labs, http://taulabs.org, Copyright (C) 2012-2015
 * @brief      Include files for the ActuatorSettings object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: actuatorsettings.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef ACTUATORSETTINGS_H
#define ACTUATORSETTINGS_H

#include "pios_queue.h"
#include "uavoversion.h"



// Object constants
#define ACTUATORSETTINGS_OBJID 0x3557036A
#define ACTUATORSETTINGS_ISSINGLEINST 1
#define ACTUATORSETTINGS_ISSETTINGS 1
#define ACTUATORSETTINGS_NUMBYTES 97

// Generic interface functions
int32_t ActuatorSettingsInitialize();
UAVObjHandle ActuatorSettingsHandle();
void ActuatorSettingsSetDefaults(UAVObjHandle obj, uint16_t instId);

// Object data
typedef struct {
    float MotorInputOutputCurveFit[2];
    uint16_t TimerUpdateFreq[6];
    uint16_t ChannelMax[10];
    uint16_t ChannelNeutral[10];
    uint16_t ChannelMin[10];
    uint8_t TimerPwmResolution[6];
    uint8_t ChannelType[10];
    uint8_t MotorsSpinWhileArmed;

} __attribute__((packed)) __attribute__((aligned(4))) ActuatorSettingsData;

// Typesafe Object access functions
/**
 * @function ActuatorSettingsGet(dataOut)
 * @brief Populate a ActuatorSettingsData object
 * @param[out] dataOut 
 */
static inline int32_t ActuatorSettingsGet(ActuatorSettingsData *dataOut) { return UAVObjGetData(ActuatorSettingsHandle(), dataOut); }

static inline int32_t ActuatorSettingsSet(const ActuatorSettingsData *dataIn) { return UAVObjSetData(ActuatorSettingsHandle(), dataIn); }

static inline int32_t ActuatorSettingsInstGet(uint16_t instId, ActuatorSettingsData *dataOut) { return UAVObjGetInstanceData(ActuatorSettingsHandle(), instId, dataOut); }

static inline int32_t ActuatorSettingsInstSet(uint16_t instId, const ActuatorSettingsData *dataIn) { return UAVObjSetInstanceData(ActuatorSettingsHandle(), instId, dataIn); }

static inline int32_t ActuatorSettingsConnectQueue(struct pios_queue *queue) { return UAVObjConnectQueue(ActuatorSettingsHandle(), queue, EV_MASK_ALL_UPDATES); }

static inline int32_t ActuatorSettingsConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(ActuatorSettingsHandle(), cb, EV_MASK_ALL_UPDATES); }

static inline uint16_t ActuatorSettingsCreateInstance() { return UAVObjCreateInstance(ActuatorSettingsHandle(), &ActuatorSettingsSetDefaults); }

static inline void ActuatorSettingsRequestUpdate() { UAVObjRequestUpdate(ActuatorSettingsHandle()); }

static inline void ActuatorSettingsRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(ActuatorSettingsHandle(), instId); }

static inline void ActuatorSettingsUpdated() { UAVObjUpdated(ActuatorSettingsHandle()); }

static inline void ActuatorSettingsInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(ActuatorSettingsHandle(), instId); }

static inline int32_t ActuatorSettingsGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(ActuatorSettingsHandle(), dataOut); }

static inline int32_t ActuatorSettingsSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(ActuatorSettingsHandle(), dataIn); }

static inline int8_t ActuatorSettingsReadOnly() { return UAVObjReadOnly(ActuatorSettingsHandle()); }

static inline uint16_t ActuatorSettingsGetNumInstances(){ return UAVObjGetNumInstances(ActuatorSettingsHandle()); }

static inline uint32_t ActuatorSettingsGetNumBytes(){ return UAVObjGetNumBytes(ActuatorSettingsHandle()); }

// Field information
// Field MotorInputOutputCurveFit information
/* Array element names for field MotorInputOutputCurveFit */
typedef enum { ACTUATORSETTINGS_MOTORINPUTOUTPUTCURVEFIT_A=0, ACTUATORSETTINGS_MOTORINPUTOUTPUTCURVEFIT_B=1 } __attribute__((packed)) ActuatorSettingsMotorInputOutputCurveFitElem;
/* Number of elements for field MotorInputOutputCurveFit */
#define ACTUATORSETTINGS_MOTORINPUTOUTPUTCURVEFIT_NUMELEM 2
// Field TimerUpdateFreq information
/* Number of elements for field TimerUpdateFreq */
#define ACTUATORSETTINGS_TIMERUPDATEFREQ_NUMELEM 6
// Field ChannelMax information
/* Number of elements for field ChannelMax */
#define ACTUATORSETTINGS_CHANNELMAX_NUMELEM 10
// Field ChannelNeutral information
/* Number of elements for field ChannelNeutral */
#define ACTUATORSETTINGS_CHANNELNEUTRAL_NUMELEM 10
// Field ChannelMin information
/* Number of elements for field ChannelMin */
#define ACTUATORSETTINGS_CHANNELMIN_NUMELEM 10
// Field TimerPwmResolution information
/* Enumeration options for field TimerPwmResolution */
typedef enum { ACTUATORSETTINGS_TIMERPWMRESOLUTION_1MHZ=0, ACTUATORSETTINGS_TIMERPWMRESOLUTION_12MHZ=1 }  __attribute__((packed)) ActuatorSettingsTimerPwmResolutionOptions;
/* Max value of any option in topmost parent TimerPwmResolution of field TimerPwmResolution */
#define ACTUATORSETTINGS_TIMERPWMRESOLUTION_GLOBAL_MAXOPTVAL 1
/* Max value of any option in field TimerPwmResolution */
#define ACTUATORSETTINGS_TIMERPWMRESOLUTION_MAXOPTVAL 1
/* Ensure field TimerPwmResolution contains valid data */
static inline bool ActuatorSettingsTimerPwmResolutionIsValid( uint8_t CurrentTimerPwmResolution ) { return CurrentTimerPwmResolution < ACTUATORSETTINGS_TIMERPWMRESOLUTION_MAXOPTVAL; }
/* Number of elements for field TimerPwmResolution */
#define ACTUATORSETTINGS_TIMERPWMRESOLUTION_NUMELEM 6
// Field ChannelType information
/* Enumeration options for field ChannelType */
typedef enum { ACTUATORSETTINGS_CHANNELTYPE_PWM=0, ACTUATORSETTINGS_CHANNELTYPE_PWMALARM=1, ACTUATORSETTINGS_CHANNELTYPE_ARMINGLED=2, ACTUATORSETTINGS_CHANNELTYPE_INFOLED=3 }  __attribute__((packed)) ActuatorSettingsChannelTypeOptions;
/* Max value of any option in topmost parent ChannelType of field ChannelType */
#define ACTUATORSETTINGS_CHANNELTYPE_GLOBAL_MAXOPTVAL 3
/* Max value of any option in field ChannelType */
#define ACTUATORSETTINGS_CHANNELTYPE_MAXOPTVAL 3
/* Ensure field ChannelType contains valid data */
static inline bool ActuatorSettingsChannelTypeIsValid( uint8_t CurrentChannelType ) { return CurrentChannelType < ACTUATORSETTINGS_CHANNELTYPE_MAXOPTVAL; }
/* Number of elements for field ChannelType */
#define ACTUATORSETTINGS_CHANNELTYPE_NUMELEM 10
// Field MotorsSpinWhileArmed information
/* Enumeration options for field MotorsSpinWhileArmed */
typedef enum { ACTUATORSETTINGS_MOTORSSPINWHILEARMED_FALSE=0, ACTUATORSETTINGS_MOTORSSPINWHILEARMED_TRUE=1 }  __attribute__((packed)) ActuatorSettingsMotorsSpinWhileArmedOptions;
/* Max value of any option in topmost parent MotorsSpinWhileArmed of field MotorsSpinWhileArmed */
#define ACTUATORSETTINGS_MOTORSSPINWHILEARMED_GLOBAL_MAXOPTVAL 1
/* Max value of any option in field MotorsSpinWhileArmed */
#define ACTUATORSETTINGS_MOTORSSPINWHILEARMED_MAXOPTVAL 1
/* Ensure field MotorsSpinWhileArmed contains valid data */
static inline bool ActuatorSettingsMotorsSpinWhileArmedIsValid( uint8_t CurrentMotorsSpinWhileArmed ) { return CurrentMotorsSpinWhileArmed < ACTUATORSETTINGS_MOTORSSPINWHILEARMED_MAXOPTVAL; }


// set/Get functions
extern void ActuatorSettingsMotorInputOutputCurveFitSet( float *NewMotorInputOutputCurveFit );
extern void ActuatorSettingsMotorInputOutputCurveFitGet( float *NewMotorInputOutputCurveFit );
extern void ActuatorSettingsTimerUpdateFreqSet( uint16_t *NewTimerUpdateFreq );
extern void ActuatorSettingsTimerUpdateFreqGet( uint16_t *NewTimerUpdateFreq );
extern void ActuatorSettingsChannelMaxSet( uint16_t *NewChannelMax );
extern void ActuatorSettingsChannelMaxGet( uint16_t *NewChannelMax );
extern void ActuatorSettingsChannelNeutralSet( uint16_t *NewChannelNeutral );
extern void ActuatorSettingsChannelNeutralGet( uint16_t *NewChannelNeutral );
extern void ActuatorSettingsChannelMinSet( uint16_t *NewChannelMin );
extern void ActuatorSettingsChannelMinGet( uint16_t *NewChannelMin );
extern void ActuatorSettingsTimerPwmResolutionSet( uint8_t *NewTimerPwmResolution );
extern void ActuatorSettingsTimerPwmResolutionGet( uint8_t *NewTimerPwmResolution );
extern void ActuatorSettingsChannelTypeSet( uint8_t *NewChannelType );
extern void ActuatorSettingsChannelTypeGet( uint8_t *NewChannelType );
extern void ActuatorSettingsMotorsSpinWhileArmedSet( uint8_t *NewMotorsSpinWhileArmed );
extern void ActuatorSettingsMotorsSpinWhileArmedGet( uint8_t *NewMotorsSpinWhileArmed );


#endif // ACTUATORSETTINGS_H

/**
 * @}
 * @}
 */
