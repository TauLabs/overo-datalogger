/**
 ******************************************************************************
 * @addtogroup UAVObjects UAVObject set for this firmware
 * @{
 * @addtogroup SystemIdent SystemIdent
 * @brief The input to the relay tuning.
 *
 *
 * @file       systemident.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @author     Tau Labs, http://taulabs.org, Copyright (C) 2012-2015
 * @brief      Include files for the SystemIdent object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: systemident.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef SYSTEMIDENT_H
#define SYSTEMIDENT_H

#include "pios_queue.h"
#include "uavoversion.h"



// Object constants
#define SYSTEMIDENT_OBJID 0xE45C8910
#define SYSTEMIDENT_ISSINGLEINST 1
#define SYSTEMIDENT_ISSETTINGS 1
#define SYSTEMIDENT_NUMBYTES 48

// Generic interface functions
int32_t SystemIdentInitialize();
UAVObjHandle SystemIdentHandle();
void SystemIdentSetDefaults(UAVObjHandle obj, uint16_t instId);

// Object data
typedef struct {
    float Tau;
    float Beta[3];
    float Bias[3];
    float Noise[3];
    float Period;
    uint32_t NumAfPredicts;

} __attribute__((packed)) __attribute__((aligned(4))) SystemIdentData;

// Typesafe Object access functions
/**
 * @function SystemIdentGet(dataOut)
 * @brief Populate a SystemIdentData object
 * @param[out] dataOut 
 */
static inline int32_t SystemIdentGet(SystemIdentData *dataOut) { return UAVObjGetData(SystemIdentHandle(), dataOut); }

static inline int32_t SystemIdentSet(const SystemIdentData *dataIn) { return UAVObjSetData(SystemIdentHandle(), dataIn); }

static inline int32_t SystemIdentInstGet(uint16_t instId, SystemIdentData *dataOut) { return UAVObjGetInstanceData(SystemIdentHandle(), instId, dataOut); }

static inline int32_t SystemIdentInstSet(uint16_t instId, const SystemIdentData *dataIn) { return UAVObjSetInstanceData(SystemIdentHandle(), instId, dataIn); }

static inline int32_t SystemIdentConnectQueue(struct pios_queue *queue) { return UAVObjConnectQueue(SystemIdentHandle(), queue, EV_MASK_ALL_UPDATES); }

static inline int32_t SystemIdentConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(SystemIdentHandle(), cb, EV_MASK_ALL_UPDATES); }

static inline uint16_t SystemIdentCreateInstance() { return UAVObjCreateInstance(SystemIdentHandle(), &SystemIdentSetDefaults); }

static inline void SystemIdentRequestUpdate() { UAVObjRequestUpdate(SystemIdentHandle()); }

static inline void SystemIdentRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(SystemIdentHandle(), instId); }

static inline void SystemIdentUpdated() { UAVObjUpdated(SystemIdentHandle()); }

static inline void SystemIdentInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(SystemIdentHandle(), instId); }

static inline int32_t SystemIdentGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(SystemIdentHandle(), dataOut); }

static inline int32_t SystemIdentSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(SystemIdentHandle(), dataIn); }

static inline int8_t SystemIdentReadOnly() { return UAVObjReadOnly(SystemIdentHandle()); }

static inline uint16_t SystemIdentGetNumInstances(){ return UAVObjGetNumInstances(SystemIdentHandle()); }

static inline uint32_t SystemIdentGetNumBytes(){ return UAVObjGetNumBytes(SystemIdentHandle()); }

// Field information
// Field Tau information
// Field Beta information
/* Array element names for field Beta */
typedef enum { SYSTEMIDENT_BETA_ROLL=0, SYSTEMIDENT_BETA_PITCH=1, SYSTEMIDENT_BETA_YAW=2 } __attribute__((packed)) SystemIdentBetaElem;
/* Number of elements for field Beta */
#define SYSTEMIDENT_BETA_NUMELEM 3
// Field Bias information
/* Array element names for field Bias */
typedef enum { SYSTEMIDENT_BIAS_ROLL=0, SYSTEMIDENT_BIAS_PITCH=1, SYSTEMIDENT_BIAS_YAW=2 } __attribute__((packed)) SystemIdentBiasElem;
/* Number of elements for field Bias */
#define SYSTEMIDENT_BIAS_NUMELEM 3
// Field Noise information
/* Array element names for field Noise */
typedef enum { SYSTEMIDENT_NOISE_ROLL=0, SYSTEMIDENT_NOISE_PITCH=1, SYSTEMIDENT_NOISE_YAW=2 } __attribute__((packed)) SystemIdentNoiseElem;
/* Number of elements for field Noise */
#define SYSTEMIDENT_NOISE_NUMELEM 3
// Field Period information
// Field NumAfPredicts information


// set/Get functions
extern void SystemIdentTauSet( float *NewTau );
extern void SystemIdentTauGet( float *NewTau );
extern void SystemIdentBetaSet( float *NewBeta );
extern void SystemIdentBetaGet( float *NewBeta );
extern void SystemIdentBiasSet( float *NewBias );
extern void SystemIdentBiasGet( float *NewBias );
extern void SystemIdentNoiseSet( float *NewNoise );
extern void SystemIdentNoiseGet( float *NewNoise );
extern void SystemIdentPeriodSet( float *NewPeriod );
extern void SystemIdentPeriodGet( float *NewPeriod );
extern void SystemIdentNumAfPredictsSet( uint32_t *NewNumAfPredicts );
extern void SystemIdentNumAfPredictsGet( uint32_t *NewNumAfPredicts );


#endif // SYSTEMIDENT_H

/**
 * @}
 * @}
 */
