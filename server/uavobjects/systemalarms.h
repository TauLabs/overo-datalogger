/**
 ******************************************************************************
 * @addtogroup UAVObjects OpenPilot UAVObjects
 * @{ 
 * @addtogroup SystemAlarms SystemAlarms 
 * @brief Alarms from OpenPilot to indicate failure conditions or warnings.  Set by various modules.
 *
 * Autogenerated files and functions for SystemAlarms Object
 
 * @{ 
 *
 * @file       systemalarms.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @author     PhoenixPilot, http://github.com/PhoenixPilot, Copyright (C) 2012
 * @brief      Implementation of the SystemAlarms object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: systemalarms.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef SYSTEMALARMS_H
#define SYSTEMALARMS_H

// Object constants
#define SYSTEMALARMS_OBJID 0x9A4361D2
#define SYSTEMALARMS_ISSINGLEINST 1
#define SYSTEMALARMS_ISSETTINGS 0
#define SYSTEMALARMS_NUMBYTES 20

// Generic interface functions
int32_t SystemAlarmsInitialize();
UAVObjHandle SystemAlarmsHandle();
void SystemAlarmsSetDefaults(UAVObjHandle obj, uint16_t instId);

// Object data
typedef struct {
    uint8_t Alarm[18];
    uint8_t ConfigError;
    uint8_t ManualControl;

} __attribute__((packed)) __attribute__((aligned(4))) SystemAlarmsData;

// Typesafe Object access functions
/**
 * @function SystemAlarmsGet(dataOut)
 * @brief Populate a SystemAlarmsData object
 * @param[out] dataOut 
 */
static inline int32_t SystemAlarmsGet(SystemAlarmsData *dataOut) { return UAVObjGetData(SystemAlarmsHandle(), dataOut); }

static inline int32_t SystemAlarmsSet(const SystemAlarmsData *dataIn) { return UAVObjSetData(SystemAlarmsHandle(), dataIn); }

static inline int32_t SystemAlarmsInstGet(uint16_t instId, SystemAlarmsData *dataOut) { return UAVObjGetInstanceData(SystemAlarmsHandle(), instId, dataOut); }

static inline int32_t SystemAlarmsInstSet(uint16_t instId, const SystemAlarmsData *dataIn) { return UAVObjSetInstanceData(SystemAlarmsHandle(), instId, dataIn); }

static inline int32_t SystemAlarmsConnectQueue(xQueueHandle queue) { return UAVObjConnectQueue(SystemAlarmsHandle(), queue, EV_MASK_ALL_UPDATES); }

static inline int32_t SystemAlarmsConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(SystemAlarmsHandle(), cb, EV_MASK_ALL_UPDATES); }

static inline uint16_t SystemAlarmsCreateInstance() { return UAVObjCreateInstance(SystemAlarmsHandle(), &SystemAlarmsSetDefaults); }

static inline void SystemAlarmsRequestUpdate() { UAVObjRequestUpdate(SystemAlarmsHandle()); }

static inline void SystemAlarmsRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(SystemAlarmsHandle(), instId); }

static inline void SystemAlarmsUpdated() { UAVObjUpdated(SystemAlarmsHandle()); }

static inline void SystemAlarmsInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(SystemAlarmsHandle(), instId); }

static inline int32_t SystemAlarmsGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(SystemAlarmsHandle(), dataOut); }

static inline int32_t SystemAlarmsSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(SystemAlarmsHandle(), dataIn); }

static inline int8_t SystemAlarmsReadOnly() { return UAVObjReadOnly(SystemAlarmsHandle()); }

// Field information
// Field Alarm information
/* Enumeration options for field Alarm */
typedef enum { SYSTEMALARMS_ALARM_UNINITIALISED=0, SYSTEMALARMS_ALARM_OK=1, SYSTEMALARMS_ALARM_WARNING=2, SYSTEMALARMS_ALARM_ERROR=3, SYSTEMALARMS_ALARM_CRITICAL=4 } SystemAlarmsAlarmOptions;
/* Array element names for field Alarm */
typedef enum { SYSTEMALARMS_ALARM_OUTOFMEMORY=0, SYSTEMALARMS_ALARM_CPUOVERLOAD=1, SYSTEMALARMS_ALARM_STACKOVERFLOW=2, SYSTEMALARMS_ALARM_SYSTEMCONFIGURATION=3, SYSTEMALARMS_ALARM_EVENTSYSTEM=4, SYSTEMALARMS_ALARM_TELEMETRY=5, SYSTEMALARMS_ALARM_MANUALCONTROL=6, SYSTEMALARMS_ALARM_ACTUATOR=7, SYSTEMALARMS_ALARM_ATTITUDE=8, SYSTEMALARMS_ALARM_SENSORS=9, SYSTEMALARMS_ALARM_STABILIZATION=10, SYSTEMALARMS_ALARM_PATHFOLLOWER=11, SYSTEMALARMS_ALARM_PATHPLANNER=12, SYSTEMALARMS_ALARM_BATTERY=13, SYSTEMALARMS_ALARM_FLIGHTTIME=14, SYSTEMALARMS_ALARM_I2C=15, SYSTEMALARMS_ALARM_GPS=16, SYSTEMALARMS_ALARM_BOOTFAULT=17 } SystemAlarmsAlarmElem;
/* Number of elements for field Alarm */
#define SYSTEMALARMS_ALARM_NUMELEM 18
// Field ConfigError information
/* Enumeration options for field ConfigError */
typedef enum { SYSTEMALARMS_CONFIGERROR_STABILIZATION=0, SYSTEMALARMS_CONFIGERROR_MULTIROTOR=1, SYSTEMALARMS_CONFIGERROR_AUTOTUNE=2, SYSTEMALARMS_CONFIGERROR_ALTITUDEHOLD=3, SYSTEMALARMS_CONFIGERROR_VELOCITYCONTROL=4, SYSTEMALARMS_CONFIGERROR_POSITIONHOLD=5, SYSTEMALARMS_CONFIGERROR_PATHPLANNER=6, SYSTEMALARMS_CONFIGERROR_UNDEFINED=7, SYSTEMALARMS_CONFIGERROR_NONE=8 } SystemAlarmsConfigErrorOptions;
// Field ManualControl information
/* Enumeration options for field ManualControl */
typedef enum { SYSTEMALARMS_MANUALCONTROL_SETTINGS=0, SYSTEMALARMS_MANUALCONTROL_NORX=1, SYSTEMALARMS_MANUALCONTROL_ACCESSORY=2, SYSTEMALARMS_MANUALCONTROL_ALTITUDEHOLD=3, SYSTEMALARMS_MANUALCONTROL_UNDEFINED=4, SYSTEMALARMS_MANUALCONTROL_NONE=5 } SystemAlarmsManualControlOptions;


// set/Get functions
extern void SystemAlarmsAlarmSet( uint8_t *NewAlarm );
extern void SystemAlarmsAlarmGet( uint8_t *NewAlarm );
extern void SystemAlarmsConfigErrorSet( uint8_t *NewConfigError );
extern void SystemAlarmsConfigErrorGet( uint8_t *NewConfigError );
extern void SystemAlarmsManualControlSet( uint8_t *NewManualControl );
extern void SystemAlarmsManualControlGet( uint8_t *NewManualControl );


#endif // SYSTEMALARMS_H

/**
 * @}
 * @}
 */
