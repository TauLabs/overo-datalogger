/**
 ******************************************************************************
 * @addtogroup UAVObjects UAVObject set for this firmware
 * @{
 * @addtogroup ManualControlCommand ManualControlCommand
 * @brief The output from the @ref ManualControlModule which decodes the receiver inputs.
 *
 *
 * @file       manualcontrolcommand.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @author     Tau Labs, http://taulabs.org, Copyright (C) 2012-2015
 * @brief      Include files for the ManualControlCommand object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: manualcontrolcommand.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef MANUALCONTROLCOMMAND_H
#define MANUALCONTROLCOMMAND_H

#include "pios_queue.h"
#include "uavoversion.h"



// Object constants
#define MANUALCONTROLCOMMAND_OBJID 0xD3CE626C
#define MANUALCONTROLCOMMAND_ISSINGLEINST 1
#define MANUALCONTROLCOMMAND_ISSETTINGS 0
#define MANUALCONTROLCOMMAND_NUMBYTES 48

// Generic interface functions
int32_t ManualControlCommandInitialize();
UAVObjHandle ManualControlCommandHandle();
void ManualControlCommandSetDefaults(UAVObjHandle obj, uint16_t instId);

// Object data
typedef struct {
    float Throttle;
    float Roll;
    float Pitch;
    float Yaw;
    uint32_t RawRssi;
    float Collective;
    int16_t Rssi;
    uint16_t Channel[10];
    uint8_t Connected;
    uint8_t ArmSwitch;

} __attribute__((packed)) __attribute__((aligned(4))) ManualControlCommandData;

// Typesafe Object access functions
/**
 * @function ManualControlCommandGet(dataOut)
 * @brief Populate a ManualControlCommandData object
 * @param[out] dataOut 
 */
static inline int32_t ManualControlCommandGet(ManualControlCommandData *dataOut) { return UAVObjGetData(ManualControlCommandHandle(), dataOut); }

static inline int32_t ManualControlCommandSet(const ManualControlCommandData *dataIn) { return UAVObjSetData(ManualControlCommandHandle(), dataIn); }

static inline int32_t ManualControlCommandInstGet(uint16_t instId, ManualControlCommandData *dataOut) { return UAVObjGetInstanceData(ManualControlCommandHandle(), instId, dataOut); }

static inline int32_t ManualControlCommandInstSet(uint16_t instId, const ManualControlCommandData *dataIn) { return UAVObjSetInstanceData(ManualControlCommandHandle(), instId, dataIn); }

static inline int32_t ManualControlCommandConnectQueue(struct pios_queue *queue) { return UAVObjConnectQueue(ManualControlCommandHandle(), queue, EV_MASK_ALL_UPDATES); }

static inline int32_t ManualControlCommandConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(ManualControlCommandHandle(), cb, EV_MASK_ALL_UPDATES); }

static inline uint16_t ManualControlCommandCreateInstance() { return UAVObjCreateInstance(ManualControlCommandHandle(), &ManualControlCommandSetDefaults); }

static inline void ManualControlCommandRequestUpdate() { UAVObjRequestUpdate(ManualControlCommandHandle()); }

static inline void ManualControlCommandRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(ManualControlCommandHandle(), instId); }

static inline void ManualControlCommandUpdated() { UAVObjUpdated(ManualControlCommandHandle()); }

static inline void ManualControlCommandInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(ManualControlCommandHandle(), instId); }

static inline int32_t ManualControlCommandGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(ManualControlCommandHandle(), dataOut); }

static inline int32_t ManualControlCommandSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(ManualControlCommandHandle(), dataIn); }

static inline int8_t ManualControlCommandReadOnly() { return UAVObjReadOnly(ManualControlCommandHandle()); }

static inline uint16_t ManualControlCommandGetNumInstances(){ return UAVObjGetNumInstances(ManualControlCommandHandle()); }

static inline uint32_t ManualControlCommandGetNumBytes(){ return UAVObjGetNumBytes(ManualControlCommandHandle()); }

// Field information
// Field Throttle information
// Field Roll information
// Field Pitch information
// Field Yaw information
// Field RawRssi information
// Field Collective information
// Field Rssi information
// Field Channel information
/* Array element names for field Channel */
typedef enum { MANUALCONTROLCOMMAND_CHANNEL_THROTTLE=0, MANUALCONTROLCOMMAND_CHANNEL_ROLL=1, MANUALCONTROLCOMMAND_CHANNEL_PITCH=2, MANUALCONTROLCOMMAND_CHANNEL_YAW=3, MANUALCONTROLCOMMAND_CHANNEL_FLIGHTMODE=4, MANUALCONTROLCOMMAND_CHANNEL_COLLECTIVE=5, MANUALCONTROLCOMMAND_CHANNEL_ACCESSORY0=6, MANUALCONTROLCOMMAND_CHANNEL_ACCESSORY1=7, MANUALCONTROLCOMMAND_CHANNEL_ACCESSORY2=8, MANUALCONTROLCOMMAND_CHANNEL_ARMING=9 } __attribute__((packed)) ManualControlCommandChannelElem;
/* Number of elements for field Channel */
#define MANUALCONTROLCOMMAND_CHANNEL_NUMELEM 10
// Field Connected information
/* Enumeration options for field Connected */
typedef enum { MANUALCONTROLCOMMAND_CONNECTED_FALSE=0, MANUALCONTROLCOMMAND_CONNECTED_TRUE=1 }  __attribute__((packed)) ManualControlCommandConnectedOptions;
/* Max value of any option in topmost parent Connected of field Connected */
#define MANUALCONTROLCOMMAND_CONNECTED_GLOBAL_MAXOPTVAL 1
/* Max value of any option in field Connected */
#define MANUALCONTROLCOMMAND_CONNECTED_MAXOPTVAL 1
/* Ensure field Connected contains valid data */
static inline bool ManualControlCommandConnectedIsValid( uint8_t CurrentConnected ) { return CurrentConnected < MANUALCONTROLCOMMAND_CONNECTED_MAXOPTVAL; }
// Field ArmSwitch information
/* Enumeration options for field ArmSwitch */
typedef enum { MANUALCONTROLCOMMAND_ARMSWITCH_DISARMED=0, MANUALCONTROLCOMMAND_ARMSWITCH_ARMED=1 }  __attribute__((packed)) ManualControlCommandArmSwitchOptions;
/* Max value of any option in topmost parent ArmSwitch of field ArmSwitch */
#define MANUALCONTROLCOMMAND_ARMSWITCH_GLOBAL_MAXOPTVAL 1
/* Max value of any option in field ArmSwitch */
#define MANUALCONTROLCOMMAND_ARMSWITCH_MAXOPTVAL 1
/* Ensure field ArmSwitch contains valid data */
static inline bool ManualControlCommandArmSwitchIsValid( uint8_t CurrentArmSwitch ) { return CurrentArmSwitch < MANUALCONTROLCOMMAND_ARMSWITCH_MAXOPTVAL; }


// set/Get functions
extern void ManualControlCommandThrottleSet( float *NewThrottle );
extern void ManualControlCommandThrottleGet( float *NewThrottle );
extern void ManualControlCommandRollSet( float *NewRoll );
extern void ManualControlCommandRollGet( float *NewRoll );
extern void ManualControlCommandPitchSet( float *NewPitch );
extern void ManualControlCommandPitchGet( float *NewPitch );
extern void ManualControlCommandYawSet( float *NewYaw );
extern void ManualControlCommandYawGet( float *NewYaw );
extern void ManualControlCommandRawRssiSet( uint32_t *NewRawRssi );
extern void ManualControlCommandRawRssiGet( uint32_t *NewRawRssi );
extern void ManualControlCommandCollectiveSet( float *NewCollective );
extern void ManualControlCommandCollectiveGet( float *NewCollective );
extern void ManualControlCommandRssiSet( int16_t *NewRssi );
extern void ManualControlCommandRssiGet( int16_t *NewRssi );
extern void ManualControlCommandChannelSet( uint16_t *NewChannel );
extern void ManualControlCommandChannelGet( uint16_t *NewChannel );
extern void ManualControlCommandConnectedSet( uint8_t *NewConnected );
extern void ManualControlCommandConnectedGet( uint8_t *NewConnected );
extern void ManualControlCommandArmSwitchSet( uint8_t *NewArmSwitch );
extern void ManualControlCommandArmSwitchGet( uint8_t *NewArmSwitch );


#endif // MANUALCONTROLCOMMAND_H

/**
 * @}
 * @}
 */
