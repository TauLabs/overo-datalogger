/**
 ******************************************************************************
 * @addtogroup UAVObjects UAVObject set for this firmware
 * @{
 * @addtogroup Gyros Gyros
 * @brief The rate gyroscope sensor data, in body frame.
 *
 *
 * @file       gyros.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @author     Tau Labs, http://taulabs.org, Copyright (C) 2012-2013
 * @brief      Include files for the Gyros object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: gyros.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef GYROS_H
#define GYROS_H

// Object constants
#define GYROS_OBJID 0x4228AF6
#define GYROS_ISSINGLEINST 1
#define GYROS_ISSETTINGS 0
#define GYROS_NUMBYTES 16

// Generic interface functions
int32_t GyrosInitialize();
UAVObjHandle GyrosHandle();
void GyrosSetDefaults(UAVObjHandle obj, uint16_t instId);

// Object data
typedef struct {
    float x;
    float y;
    float z;
    float temperature;

} __attribute__((packed)) __attribute__((aligned(4))) GyrosData;

// Typesafe Object access functions
/**
 * @function GyrosGet(dataOut)
 * @brief Populate a GyrosData object
 * @param[out] dataOut 
 */
static inline int32_t GyrosGet(GyrosData *dataOut) { return UAVObjGetData(GyrosHandle(), dataOut); }

static inline int32_t GyrosSet(const GyrosData *dataIn) { return UAVObjSetData(GyrosHandle(), dataIn); }

static inline int32_t GyrosInstGet(uint16_t instId, GyrosData *dataOut) { return UAVObjGetInstanceData(GyrosHandle(), instId, dataOut); }

static inline int32_t GyrosInstSet(uint16_t instId, const GyrosData *dataIn) { return UAVObjSetInstanceData(GyrosHandle(), instId, dataIn); }

static inline int32_t GyrosConnectQueue(xQueueHandle queue) { return UAVObjConnectQueue(GyrosHandle(), queue, EV_MASK_ALL_UPDATES); }

static inline int32_t GyrosConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(GyrosHandle(), cb, EV_MASK_ALL_UPDATES); }

static inline uint16_t GyrosCreateInstance() { return UAVObjCreateInstance(GyrosHandle(), &GyrosSetDefaults); }

static inline void GyrosRequestUpdate() { UAVObjRequestUpdate(GyrosHandle()); }

static inline void GyrosRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(GyrosHandle(), instId); }

static inline void GyrosUpdated() { UAVObjUpdated(GyrosHandle()); }

static inline void GyrosInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(GyrosHandle(), instId); }

static inline int32_t GyrosGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(GyrosHandle(), dataOut); }

static inline int32_t GyrosSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(GyrosHandle(), dataIn); }

static inline int8_t GyrosReadOnly() { return UAVObjReadOnly(GyrosHandle()); }

static inline uint16_t GyrosGetNumInstances(){ return UAVObjGetNumInstances(GyrosHandle()); }

static inline uint32_t GyrosGetNumBytes(){ return UAVObjGetNumBytes(GyrosHandle()); }

// Field information
// Field x information
// Field y information
// Field z information
// Field temperature information


// set/Get functions
extern void GyrosxSet( float *Newx );
extern void GyrosxGet( float *Newx );
extern void GyrosySet( float *Newy );
extern void GyrosyGet( float *Newy );
extern void GyroszSet( float *Newz );
extern void GyroszGet( float *Newz );
extern void GyrostemperatureSet( float *Newtemperature );
extern void GyrostemperatureGet( float *Newtemperature );


#endif // GYROS_H

/**
 * @}
 * @}
 */
