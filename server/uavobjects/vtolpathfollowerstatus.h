/**
 ******************************************************************************
 * @addtogroup UAVObjects UAVObject set for this firmware
 * @{
 * @addtogroup VtolPathFollowerStatus VtolPathFollowerStatus
 * @brief Monitoring of the VTOL path follower
 *
 *
 * @file       vtolpathfollowerstatus.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @author     Tau Labs, http://taulabs.org, Copyright (C) 2012-2015
 * @brief      Include files for the VtolPathFollowerStatus object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: vtolpathfollowerstatus.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef VTOLPATHFOLLOWERSTATUS_H
#define VTOLPATHFOLLOWERSTATUS_H

#include "pios_queue.h"
#include "uavoversion.h"



// Object constants
#define VTOLPATHFOLLOWERSTATUS_OBJID 0x3238594C
#define VTOLPATHFOLLOWERSTATUS_ISSINGLEINST 1
#define VTOLPATHFOLLOWERSTATUS_ISSETTINGS 0
#define VTOLPATHFOLLOWERSTATUS_NUMBYTES 1

// Generic interface functions
int32_t VtolPathFollowerStatusInitialize();
UAVObjHandle VtolPathFollowerStatusHandle();
void VtolPathFollowerStatusSetDefaults(UAVObjHandle obj, uint16_t instId);

// Object data
typedef struct {
    uint8_t FSM_State;

} __attribute__((packed)) __attribute__((aligned(4))) VtolPathFollowerStatusData;

// Typesafe Object access functions
/**
 * @function VtolPathFollowerStatusGet(dataOut)
 * @brief Populate a VtolPathFollowerStatusData object
 * @param[out] dataOut 
 */
static inline int32_t VtolPathFollowerStatusGet(VtolPathFollowerStatusData *dataOut) { return UAVObjGetData(VtolPathFollowerStatusHandle(), dataOut); }

static inline int32_t VtolPathFollowerStatusSet(const VtolPathFollowerStatusData *dataIn) { return UAVObjSetData(VtolPathFollowerStatusHandle(), dataIn); }

static inline int32_t VtolPathFollowerStatusInstGet(uint16_t instId, VtolPathFollowerStatusData *dataOut) { return UAVObjGetInstanceData(VtolPathFollowerStatusHandle(), instId, dataOut); }

static inline int32_t VtolPathFollowerStatusInstSet(uint16_t instId, const VtolPathFollowerStatusData *dataIn) { return UAVObjSetInstanceData(VtolPathFollowerStatusHandle(), instId, dataIn); }

static inline int32_t VtolPathFollowerStatusConnectQueue(struct pios_queue *queue) { return UAVObjConnectQueue(VtolPathFollowerStatusHandle(), queue, EV_MASK_ALL_UPDATES); }

static inline int32_t VtolPathFollowerStatusConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(VtolPathFollowerStatusHandle(), cb, EV_MASK_ALL_UPDATES); }

static inline uint16_t VtolPathFollowerStatusCreateInstance() { return UAVObjCreateInstance(VtolPathFollowerStatusHandle(), &VtolPathFollowerStatusSetDefaults); }

static inline void VtolPathFollowerStatusRequestUpdate() { UAVObjRequestUpdate(VtolPathFollowerStatusHandle()); }

static inline void VtolPathFollowerStatusRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(VtolPathFollowerStatusHandle(), instId); }

static inline void VtolPathFollowerStatusUpdated() { UAVObjUpdated(VtolPathFollowerStatusHandle()); }

static inline void VtolPathFollowerStatusInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(VtolPathFollowerStatusHandle(), instId); }

static inline int32_t VtolPathFollowerStatusGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(VtolPathFollowerStatusHandle(), dataOut); }

static inline int32_t VtolPathFollowerStatusSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(VtolPathFollowerStatusHandle(), dataIn); }

static inline int8_t VtolPathFollowerStatusReadOnly() { return UAVObjReadOnly(VtolPathFollowerStatusHandle()); }

static inline uint16_t VtolPathFollowerStatusGetNumInstances(){ return UAVObjGetNumInstances(VtolPathFollowerStatusHandle()); }

static inline uint32_t VtolPathFollowerStatusGetNumBytes(){ return UAVObjGetNumBytes(VtolPathFollowerStatusHandle()); }

// Field information
// Field FSM_State information


// set/Get functions
extern void VtolPathFollowerStatusFSM_StateSet( uint8_t *NewFSM_State );
extern void VtolPathFollowerStatusFSM_StateGet( uint8_t *NewFSM_State );


#endif // VTOLPATHFOLLOWERSTATUS_H

/**
 * @}
 * @}
 */
