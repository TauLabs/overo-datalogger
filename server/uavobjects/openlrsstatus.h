/**
 ******************************************************************************
 * @addtogroup UAVObjects UAVObject set for this firmware
 * @{
 * @addtogroup OpenLRSStatus OpenLRSStatus
 * @brief OpenLRS link status.
 *
 *
 * @file       openlrsstatus.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @author     Tau Labs, http://taulabs.org, Copyright (C) 2012-2015
 * @brief      Include files for the OpenLRSStatus object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: openlrsstatus.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef OPENLRSSTATUS_H
#define OPENLRSSTATUS_H

#include "pios_queue.h"
#include "uavoversion.h"



// Object constants
#define OPENLRSSTATUS_OBJID 0xB26781CA
#define OPENLRSSTATUS_ISSINGLEINST 1
#define OPENLRSSTATUS_ISSETTINGS 0
#define OPENLRSSTATUS_NUMBYTES 4

// Generic interface functions
int32_t OpenLRSStatusInitialize();
UAVObjHandle OpenLRSStatusHandle();
void OpenLRSStatusSetDefaults(UAVObjHandle obj, uint16_t instId);

// Object data
typedef struct {
    uint16_t LinkQuality;
    uint8_t LastRSSI;
    uint8_t FailsafeActive;

} __attribute__((packed)) __attribute__((aligned(4))) OpenLRSStatusData;

// Typesafe Object access functions
/**
 * @function OpenLRSStatusGet(dataOut)
 * @brief Populate a OpenLRSStatusData object
 * @param[out] dataOut 
 */
static inline int32_t OpenLRSStatusGet(OpenLRSStatusData *dataOut) { return UAVObjGetData(OpenLRSStatusHandle(), dataOut); }

static inline int32_t OpenLRSStatusSet(const OpenLRSStatusData *dataIn) { return UAVObjSetData(OpenLRSStatusHandle(), dataIn); }

static inline int32_t OpenLRSStatusInstGet(uint16_t instId, OpenLRSStatusData *dataOut) { return UAVObjGetInstanceData(OpenLRSStatusHandle(), instId, dataOut); }

static inline int32_t OpenLRSStatusInstSet(uint16_t instId, const OpenLRSStatusData *dataIn) { return UAVObjSetInstanceData(OpenLRSStatusHandle(), instId, dataIn); }

static inline int32_t OpenLRSStatusConnectQueue(struct pios_queue *queue) { return UAVObjConnectQueue(OpenLRSStatusHandle(), queue, EV_MASK_ALL_UPDATES); }

static inline int32_t OpenLRSStatusConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(OpenLRSStatusHandle(), cb, EV_MASK_ALL_UPDATES); }

static inline uint16_t OpenLRSStatusCreateInstance() { return UAVObjCreateInstance(OpenLRSStatusHandle(), &OpenLRSStatusSetDefaults); }

static inline void OpenLRSStatusRequestUpdate() { UAVObjRequestUpdate(OpenLRSStatusHandle()); }

static inline void OpenLRSStatusRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(OpenLRSStatusHandle(), instId); }

static inline void OpenLRSStatusUpdated() { UAVObjUpdated(OpenLRSStatusHandle()); }

static inline void OpenLRSStatusInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(OpenLRSStatusHandle(), instId); }

static inline int32_t OpenLRSStatusGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(OpenLRSStatusHandle(), dataOut); }

static inline int32_t OpenLRSStatusSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(OpenLRSStatusHandle(), dataIn); }

static inline int8_t OpenLRSStatusReadOnly() { return UAVObjReadOnly(OpenLRSStatusHandle()); }

static inline uint16_t OpenLRSStatusGetNumInstances(){ return UAVObjGetNumInstances(OpenLRSStatusHandle()); }

static inline uint32_t OpenLRSStatusGetNumBytes(){ return UAVObjGetNumBytes(OpenLRSStatusHandle()); }

// Field information
// Field LinkQuality information
// Field LastRSSI information
// Field FailsafeActive information
/* Enumeration options for field FailsafeActive */
typedef enum { OPENLRSSTATUS_FAILSAFEACTIVE_INACTIVE=0, OPENLRSSTATUS_FAILSAFEACTIVE_ACTIVE=1 }  __attribute__((packed)) OpenLRSStatusFailsafeActiveOptions;
/* Max value of any option in topmost parent FailsafeActive of field FailsafeActive */
#define OPENLRSSTATUS_FAILSAFEACTIVE_GLOBAL_MAXOPTVAL 1
/* Max value of any option in field FailsafeActive */
#define OPENLRSSTATUS_FAILSAFEACTIVE_MAXOPTVAL 1
/* Ensure field FailsafeActive contains valid data */
static inline bool OpenLRSStatusFailsafeActiveIsValid( uint8_t CurrentFailsafeActive ) { return CurrentFailsafeActive < OPENLRSSTATUS_FAILSAFEACTIVE_MAXOPTVAL; }


// set/Get functions
extern void OpenLRSStatusLinkQualitySet( uint16_t *NewLinkQuality );
extern void OpenLRSStatusLinkQualityGet( uint16_t *NewLinkQuality );
extern void OpenLRSStatusLastRSSISet( uint8_t *NewLastRSSI );
extern void OpenLRSStatusLastRSSIGet( uint8_t *NewLastRSSI );
extern void OpenLRSStatusFailsafeActiveSet( uint8_t *NewFailsafeActive );
extern void OpenLRSStatusFailsafeActiveGet( uint8_t *NewFailsafeActive );


#endif // OPENLRSSTATUS_H

/**
 * @}
 * @}
 */
