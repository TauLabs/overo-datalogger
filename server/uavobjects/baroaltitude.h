/**
 ******************************************************************************
 * @addtogroup UAVObjects UAVObject set for this firmware
 * @{
 * @addtogroup BaroAltitude BaroAltitude
 * @brief The raw data from the barometric sensor with pressure, temperature and altitude estimate.
 *
 *
 * @file       baroaltitude.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @author     Tau Labs, http://taulabs.org, Copyright (C) 2012-2015
 * @brief      Include files for the BaroAltitude object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: baroaltitude.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef BAROALTITUDE_H
#define BAROALTITUDE_H

#include "pios_queue.h"
#include "uavoversion.h"



// Object constants
#define BAROALTITUDE_OBJID 0x99622E6A
#define BAROALTITUDE_ISSINGLEINST 1
#define BAROALTITUDE_ISSETTINGS 0
#define BAROALTITUDE_NUMBYTES 12

// Generic interface functions
int32_t BaroAltitudeInitialize();
UAVObjHandle BaroAltitudeHandle();
void BaroAltitudeSetDefaults(UAVObjHandle obj, uint16_t instId);

// Object data
typedef struct {
    float Altitude;
    float Temperature;
    float Pressure;

} __attribute__((packed)) __attribute__((aligned(4))) BaroAltitudeData;

// Typesafe Object access functions
/**
 * @function BaroAltitudeGet(dataOut)
 * @brief Populate a BaroAltitudeData object
 * @param[out] dataOut 
 */
static inline int32_t BaroAltitudeGet(BaroAltitudeData *dataOut) { return UAVObjGetData(BaroAltitudeHandle(), dataOut); }

static inline int32_t BaroAltitudeSet(const BaroAltitudeData *dataIn) { return UAVObjSetData(BaroAltitudeHandle(), dataIn); }

static inline int32_t BaroAltitudeInstGet(uint16_t instId, BaroAltitudeData *dataOut) { return UAVObjGetInstanceData(BaroAltitudeHandle(), instId, dataOut); }

static inline int32_t BaroAltitudeInstSet(uint16_t instId, const BaroAltitudeData *dataIn) { return UAVObjSetInstanceData(BaroAltitudeHandle(), instId, dataIn); }

static inline int32_t BaroAltitudeConnectQueue(struct pios_queue *queue) { return UAVObjConnectQueue(BaroAltitudeHandle(), queue, EV_MASK_ALL_UPDATES); }

static inline int32_t BaroAltitudeConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(BaroAltitudeHandle(), cb, EV_MASK_ALL_UPDATES); }

static inline uint16_t BaroAltitudeCreateInstance() { return UAVObjCreateInstance(BaroAltitudeHandle(), &BaroAltitudeSetDefaults); }

static inline void BaroAltitudeRequestUpdate() { UAVObjRequestUpdate(BaroAltitudeHandle()); }

static inline void BaroAltitudeRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(BaroAltitudeHandle(), instId); }

static inline void BaroAltitudeUpdated() { UAVObjUpdated(BaroAltitudeHandle()); }

static inline void BaroAltitudeInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(BaroAltitudeHandle(), instId); }

static inline int32_t BaroAltitudeGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(BaroAltitudeHandle(), dataOut); }

static inline int32_t BaroAltitudeSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(BaroAltitudeHandle(), dataIn); }

static inline int8_t BaroAltitudeReadOnly() { return UAVObjReadOnly(BaroAltitudeHandle()); }

static inline uint16_t BaroAltitudeGetNumInstances(){ return UAVObjGetNumInstances(BaroAltitudeHandle()); }

static inline uint32_t BaroAltitudeGetNumBytes(){ return UAVObjGetNumBytes(BaroAltitudeHandle()); }

// Field information
// Field Altitude information
// Field Temperature information
// Field Pressure information


// set/Get functions
extern void BaroAltitudeAltitudeSet( float *NewAltitude );
extern void BaroAltitudeAltitudeGet( float *NewAltitude );
extern void BaroAltitudeTemperatureSet( float *NewTemperature );
extern void BaroAltitudeTemperatureGet( float *NewTemperature );
extern void BaroAltitudePressureSet( float *NewPressure );
extern void BaroAltitudePressureGet( float *NewPressure );


#endif // BAROALTITUDE_H

/**
 * @}
 * @}
 */
