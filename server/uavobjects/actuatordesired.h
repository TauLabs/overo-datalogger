/**
 ******************************************************************************
 * @addtogroup UAVObjects UAVObject set for this firmware
 * @{
 * @addtogroup ActuatorDesired ActuatorDesired
 * @brief Desired raw, pitch and yaw actuator settings.  Comes from either @ref StabilizationModule or @ref ManualControlModule depending on FlightMode.
 *
 *
 * @file       actuatordesired.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @author     Tau Labs, http://taulabs.org, Copyright (C) 2012-2013
 * @brief      Include files for the ActuatorDesired object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: actuatordesired.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef ACTUATORDESIRED_H
#define ACTUATORDESIRED_H

// Object constants
#define ACTUATORDESIRED_OBJID 0xCA4BC4A4
#define ACTUATORDESIRED_ISSINGLEINST 1
#define ACTUATORDESIRED_ISSETTINGS 0
#define ACTUATORDESIRED_NUMBYTES 24

// Generic interface functions
int32_t ActuatorDesiredInitialize();
UAVObjHandle ActuatorDesiredHandle();
void ActuatorDesiredSetDefaults(UAVObjHandle obj, uint16_t instId);

// Object data
typedef struct {
    float Roll;
    float Pitch;
    float Yaw;
    float Throttle;
    float UpdateTime;
    float NumLongUpdates;

} __attribute__((packed)) __attribute__((aligned(4))) ActuatorDesiredData;

// Typesafe Object access functions
/**
 * @function ActuatorDesiredGet(dataOut)
 * @brief Populate a ActuatorDesiredData object
 * @param[out] dataOut 
 */
static inline int32_t ActuatorDesiredGet(ActuatorDesiredData *dataOut) { return UAVObjGetData(ActuatorDesiredHandle(), dataOut); }

static inline int32_t ActuatorDesiredSet(const ActuatorDesiredData *dataIn) { return UAVObjSetData(ActuatorDesiredHandle(), dataIn); }

static inline int32_t ActuatorDesiredInstGet(uint16_t instId, ActuatorDesiredData *dataOut) { return UAVObjGetInstanceData(ActuatorDesiredHandle(), instId, dataOut); }

static inline int32_t ActuatorDesiredInstSet(uint16_t instId, const ActuatorDesiredData *dataIn) { return UAVObjSetInstanceData(ActuatorDesiredHandle(), instId, dataIn); }

static inline int32_t ActuatorDesiredConnectQueue(xQueueHandle queue) { return UAVObjConnectQueue(ActuatorDesiredHandle(), queue, EV_MASK_ALL_UPDATES); }

static inline int32_t ActuatorDesiredConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(ActuatorDesiredHandle(), cb, EV_MASK_ALL_UPDATES); }

static inline uint16_t ActuatorDesiredCreateInstance() { return UAVObjCreateInstance(ActuatorDesiredHandle(), &ActuatorDesiredSetDefaults); }

static inline void ActuatorDesiredRequestUpdate() { UAVObjRequestUpdate(ActuatorDesiredHandle()); }

static inline void ActuatorDesiredRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(ActuatorDesiredHandle(), instId); }

static inline void ActuatorDesiredUpdated() { UAVObjUpdated(ActuatorDesiredHandle()); }

static inline void ActuatorDesiredInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(ActuatorDesiredHandle(), instId); }

static inline int32_t ActuatorDesiredGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(ActuatorDesiredHandle(), dataOut); }

static inline int32_t ActuatorDesiredSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(ActuatorDesiredHandle(), dataIn); }

static inline int8_t ActuatorDesiredReadOnly() { return UAVObjReadOnly(ActuatorDesiredHandle()); }

static inline uint16_t ActuatorDesiredGetNumInstances(){ return UAVObjGetNumInstances(ActuatorDesiredHandle()); }

static inline uint32_t ActuatorDesiredGetNumBytes(){ return UAVObjGetNumBytes(ActuatorDesiredHandle()); }

// Field information
// Field Roll information
// Field Pitch information
// Field Yaw information
// Field Throttle information
// Field UpdateTime information
// Field NumLongUpdates information


// set/Get functions
extern void ActuatorDesiredRollSet( float *NewRoll );
extern void ActuatorDesiredRollGet( float *NewRoll );
extern void ActuatorDesiredPitchSet( float *NewPitch );
extern void ActuatorDesiredPitchGet( float *NewPitch );
extern void ActuatorDesiredYawSet( float *NewYaw );
extern void ActuatorDesiredYawGet( float *NewYaw );
extern void ActuatorDesiredThrottleSet( float *NewThrottle );
extern void ActuatorDesiredThrottleGet( float *NewThrottle );
extern void ActuatorDesiredUpdateTimeSet( float *NewUpdateTime );
extern void ActuatorDesiredUpdateTimeGet( float *NewUpdateTime );
extern void ActuatorDesiredNumLongUpdatesSet( float *NewNumLongUpdates );
extern void ActuatorDesiredNumLongUpdatesGet( float *NewNumLongUpdates );


#endif // ACTUATORDESIRED_H

/**
 * @}
 * @}
 */
