/**
 ******************************************************************************
 * @addtogroup UAVObjects UAVObject set for this firmware
 * @{
 * @addtogroup TrimAngles TrimAngles
 * @brief The trim angle required for the UAV to fly straight and level.
 *
 *
 * @file       trimangles.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @author     Tau Labs, http://taulabs.org, Copyright (C) 2012-2015
 * @brief      Include files for the TrimAngles object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: trimangles.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef TRIMANGLES_H
#define TRIMANGLES_H

#include "pios_queue.h"
#include "uavoversion.h"



// Object constants
#define TRIMANGLES_OBJID 0x90B8C0DE
#define TRIMANGLES_ISSINGLEINST 1
#define TRIMANGLES_ISSETTINGS 0
#define TRIMANGLES_NUMBYTES 8

// Generic interface functions
int32_t TrimAnglesInitialize();
UAVObjHandle TrimAnglesHandle();
void TrimAnglesSetDefaults(UAVObjHandle obj, uint16_t instId);

// Object data
typedef struct {
    float Roll;
    float Pitch;

} __attribute__((packed)) __attribute__((aligned(4))) TrimAnglesData;

// Typesafe Object access functions
/**
 * @function TrimAnglesGet(dataOut)
 * @brief Populate a TrimAnglesData object
 * @param[out] dataOut 
 */
static inline int32_t TrimAnglesGet(TrimAnglesData *dataOut) { return UAVObjGetData(TrimAnglesHandle(), dataOut); }

static inline int32_t TrimAnglesSet(const TrimAnglesData *dataIn) { return UAVObjSetData(TrimAnglesHandle(), dataIn); }

static inline int32_t TrimAnglesInstGet(uint16_t instId, TrimAnglesData *dataOut) { return UAVObjGetInstanceData(TrimAnglesHandle(), instId, dataOut); }

static inline int32_t TrimAnglesInstSet(uint16_t instId, const TrimAnglesData *dataIn) { return UAVObjSetInstanceData(TrimAnglesHandle(), instId, dataIn); }

static inline int32_t TrimAnglesConnectQueue(struct pios_queue *queue) { return UAVObjConnectQueue(TrimAnglesHandle(), queue, EV_MASK_ALL_UPDATES); }

static inline int32_t TrimAnglesConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(TrimAnglesHandle(), cb, EV_MASK_ALL_UPDATES); }

static inline uint16_t TrimAnglesCreateInstance() { return UAVObjCreateInstance(TrimAnglesHandle(), &TrimAnglesSetDefaults); }

static inline void TrimAnglesRequestUpdate() { UAVObjRequestUpdate(TrimAnglesHandle()); }

static inline void TrimAnglesRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(TrimAnglesHandle(), instId); }

static inline void TrimAnglesUpdated() { UAVObjUpdated(TrimAnglesHandle()); }

static inline void TrimAnglesInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(TrimAnglesHandle(), instId); }

static inline int32_t TrimAnglesGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(TrimAnglesHandle(), dataOut); }

static inline int32_t TrimAnglesSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(TrimAnglesHandle(), dataIn); }

static inline int8_t TrimAnglesReadOnly() { return UAVObjReadOnly(TrimAnglesHandle()); }

static inline uint16_t TrimAnglesGetNumInstances(){ return UAVObjGetNumInstances(TrimAnglesHandle()); }

static inline uint32_t TrimAnglesGetNumBytes(){ return UAVObjGetNumBytes(TrimAnglesHandle()); }

// Field information
// Field Roll information
// Field Pitch information


// set/Get functions
extern void TrimAnglesRollSet( float *NewRoll );
extern void TrimAnglesRollGet( float *NewRoll );
extern void TrimAnglesPitchSet( float *NewPitch );
extern void TrimAnglesPitchGet( float *NewPitch );


#endif // TRIMANGLES_H

/**
 * @}
 * @}
 */
