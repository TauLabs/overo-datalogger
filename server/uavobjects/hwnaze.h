/**
 ******************************************************************************
 * @addtogroup UAVObjects UAVObject set for this firmware
 * @{
 * @addtogroup HwNaze HwNaze
 * @brief Selection of optional hardware configurations.
 *
 *
 * @file       hwnaze.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @author     Tau Labs, http://taulabs.org, Copyright (C) 2012-2015
 * @brief      Include files for the HwNaze object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: hwnaze.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef HWNAZE_H
#define HWNAZE_H

#include "pios_queue.h"
#include "uavoversion.h"

#include <hwshared.h>


// Object constants
#define HWNAZE_OBJID 0x43EA0B18
#define HWNAZE_ISSINGLEINST 1
#define HWNAZE_ISSETTINGS 1
#define HWNAZE_NUMBYTES 8

// Generic interface functions
int32_t HwNazeInitialize();
UAVObjHandle HwNazeHandle();
void HwNazeSetDefaults(UAVObjHandle obj, uint16_t instId);

// Object data
typedef struct {
    uint8_t MainPort;
    uint8_t RcvrPort;
    uint8_t RcvrSerial;
    uint8_t DSMxMode;
    uint8_t GyroRange;
    uint8_t AccelRange;
    uint8_t MPU6050Rate;
    uint8_t MPU6050DLPF;

} __attribute__((packed)) __attribute__((aligned(4))) HwNazeData;

// Typesafe Object access functions
/**
 * @function HwNazeGet(dataOut)
 * @brief Populate a HwNazeData object
 * @param[out] dataOut 
 */
static inline int32_t HwNazeGet(HwNazeData *dataOut) { return UAVObjGetData(HwNazeHandle(), dataOut); }

static inline int32_t HwNazeSet(const HwNazeData *dataIn) { return UAVObjSetData(HwNazeHandle(), dataIn); }

static inline int32_t HwNazeInstGet(uint16_t instId, HwNazeData *dataOut) { return UAVObjGetInstanceData(HwNazeHandle(), instId, dataOut); }

static inline int32_t HwNazeInstSet(uint16_t instId, const HwNazeData *dataIn) { return UAVObjSetInstanceData(HwNazeHandle(), instId, dataIn); }

static inline int32_t HwNazeConnectQueue(struct pios_queue *queue) { return UAVObjConnectQueue(HwNazeHandle(), queue, EV_MASK_ALL_UPDATES); }

static inline int32_t HwNazeConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(HwNazeHandle(), cb, EV_MASK_ALL_UPDATES); }

static inline uint16_t HwNazeCreateInstance() { return UAVObjCreateInstance(HwNazeHandle(), &HwNazeSetDefaults); }

static inline void HwNazeRequestUpdate() { UAVObjRequestUpdate(HwNazeHandle()); }

static inline void HwNazeRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(HwNazeHandle(), instId); }

static inline void HwNazeUpdated() { UAVObjUpdated(HwNazeHandle()); }

static inline void HwNazeInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(HwNazeHandle(), instId); }

static inline int32_t HwNazeGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(HwNazeHandle(), dataOut); }

static inline int32_t HwNazeSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(HwNazeHandle(), dataIn); }

static inline int8_t HwNazeReadOnly() { return UAVObjReadOnly(HwNazeHandle()); }

static inline uint16_t HwNazeGetNumInstances(){ return UAVObjGetNumInstances(HwNazeHandle()); }

static inline uint32_t HwNazeGetNumBytes(){ return UAVObjGetNumBytes(HwNazeHandle()); }

// Field information
// Field MainPort information
/* Enumeration options for field MainPort */
typedef enum { HWNAZE_MAINPORT_TELEMETRY=0, HWNAZE_MAINPORT_MSP=1 }  __attribute__((packed)) HwNazeMainPortOptions;
/* Max value of any option in topmost parent MainPort of field MainPort */
#define HWNAZE_MAINPORT_GLOBAL_MAXOPTVAL 1
/* Max value of any option in field MainPort */
#define HWNAZE_MAINPORT_MAXOPTVAL 1
/* Ensure field MainPort contains valid data */
static inline bool HwNazeMainPortIsValid( uint8_t CurrentMainPort ) { return CurrentMainPort < HWNAZE_MAINPORT_MAXOPTVAL; }
// Field RcvrPort information
/* Enumeration options for field RcvrPort */
typedef enum { HWNAZE_RCVRPORT_DISABLED=0, HWNAZE_RCVRPORT_PWM=1, HWNAZE_RCVRPORT_PPM=2, HWNAZE_RCVRPORT_PPMPWM=3, HWNAZE_RCVRPORT_PPMSERIAL=4, HWNAZE_RCVRPORT_PPMOUTPUTS=5, HWNAZE_RCVRPORT_OUTPUTS=6, HWNAZE_RCVRPORT_SERIAL=7 }  __attribute__((packed)) HwNazeRcvrPortOptions;
/* Max value of any option in topmost parent RcvrPort of field RcvrPort */
#define HWNAZE_RCVRPORT_GLOBAL_MAXOPTVAL 7
/* Max value of any option in field RcvrPort */
#define HWNAZE_RCVRPORT_MAXOPTVAL 7
/* Ensure field RcvrPort contains valid data */
static inline bool HwNazeRcvrPortIsValid( uint8_t CurrentRcvrPort ) { return CurrentRcvrPort < HWNAZE_RCVRPORT_MAXOPTVAL; }
// Field RcvrSerial information
/* Enumeration options for field RcvrSerial */
typedef enum { HWNAZE_RCVRSERIAL_DISABLED=HWSHARED_PORTTYPES_DISABLED, HWNAZE_RCVRSERIAL_TELEMETRY=HWSHARED_PORTTYPES_TELEMETRY, HWNAZE_RCVRSERIAL_GPS=HWSHARED_PORTTYPES_GPS, HWNAZE_RCVRSERIAL_DSM=HWSHARED_PORTTYPES_DSM, HWNAZE_RCVRSERIAL_DEBUGCONSOLE=HWSHARED_PORTTYPES_DEBUGCONSOLE, HWNAZE_RCVRSERIAL_COMBRIDGE=HWSHARED_PORTTYPES_COMBRIDGE, HWNAZE_RCVRSERIAL_MAVLINKTX=HWSHARED_PORTTYPES_MAVLINKTX, HWNAZE_RCVRSERIAL_MSP=HWSHARED_PORTTYPES_MSP, HWNAZE_RCVRSERIAL_FRSKYSENSORHUB=HWSHARED_PORTTYPES_FRSKYSENSORHUB, HWNAZE_RCVRSERIAL_LIGHTTELEMETRYTX=HWSHARED_PORTTYPES_LIGHTTELEMETRYTX, HWNAZE_RCVRSERIAL_HOTTSUMD=HWSHARED_PORTTYPES_HOTTSUMD, HWNAZE_RCVRSERIAL_HOTTSUMH=HWSHARED_PORTTYPES_HOTTSUMH, HWNAZE_RCVRSERIAL_DONTSWITCHONCHILDENUMS=255 }  __attribute__((packed)) HwNazeRcvrSerialOptions;
/* Max value of any option in topmost parent PortTypes of field RcvrSerial */
#define HWNAZE_RCVRSERIAL_GLOBAL_MAXOPTVAL 20
/* Max value of any option in field RcvrSerial */
#define HWNAZE_RCVRSERIAL_MAXOPTVAL 15
/* Ensure field RcvrSerial contains valid data */
static inline bool HwNazeRcvrSerialIsValid( uint8_t CurrentRcvrSerial ) { return CurrentRcvrSerial < HWNAZE_RCVRSERIAL_MAXOPTVAL; }
// Field DSMxMode information
/* Enumeration options for field DSMxMode */
typedef enum { HWNAZE_DSMXMODE_AUTODETECT=HWSHARED_DSMXMODE_AUTODETECT, HWNAZE_DSMXMODE_FORCE10BIT=HWSHARED_DSMXMODE_FORCE10BIT, HWNAZE_DSMXMODE_FORCE11BIT=HWSHARED_DSMXMODE_FORCE11BIT, HWNAZE_DSMXMODE_BIND3PULSES=HWSHARED_DSMXMODE_BIND3PULSES, HWNAZE_DSMXMODE_BIND4PULSES=HWSHARED_DSMXMODE_BIND4PULSES, HWNAZE_DSMXMODE_BIND5PULSES=HWSHARED_DSMXMODE_BIND5PULSES, HWNAZE_DSMXMODE_BIND6PULSES=HWSHARED_DSMXMODE_BIND6PULSES, HWNAZE_DSMXMODE_BIND7PULSES=HWSHARED_DSMXMODE_BIND7PULSES, HWNAZE_DSMXMODE_BIND8PULSES=HWSHARED_DSMXMODE_BIND8PULSES, HWNAZE_DSMXMODE_BIND9PULSES=HWSHARED_DSMXMODE_BIND9PULSES, HWNAZE_DSMXMODE_BIND10PULSES=HWSHARED_DSMXMODE_BIND10PULSES, HWNAZE_DSMXMODE_DONTSWITCHONCHILDENUMS=255 }  __attribute__((packed)) HwNazeDSMxModeOptions;
/* Max value of any option in topmost parent DSMxMode of field DSMxMode */
#define HWNAZE_DSMXMODE_GLOBAL_MAXOPTVAL 10
/* Max value of any option in field DSMxMode */
#define HWNAZE_DSMXMODE_MAXOPTVAL 10
/* Ensure field DSMxMode contains valid data */
static inline bool HwNazeDSMxModeIsValid( uint8_t CurrentDSMxMode ) { return CurrentDSMxMode < HWNAZE_DSMXMODE_MAXOPTVAL; }
// Field GyroRange information
/* Enumeration options for field GyroRange */
typedef enum { HWNAZE_GYRORANGE_250=0, HWNAZE_GYRORANGE_500=1, HWNAZE_GYRORANGE_1000=2, HWNAZE_GYRORANGE_2000=3 }  __attribute__((packed)) HwNazeGyroRangeOptions;
/* Max value of any option in topmost parent GyroRange of field GyroRange */
#define HWNAZE_GYRORANGE_GLOBAL_MAXOPTVAL 3
/* Max value of any option in field GyroRange */
#define HWNAZE_GYRORANGE_MAXOPTVAL 3
/* Ensure field GyroRange contains valid data */
static inline bool HwNazeGyroRangeIsValid( uint8_t CurrentGyroRange ) { return CurrentGyroRange < HWNAZE_GYRORANGE_MAXOPTVAL; }
// Field AccelRange information
/* Enumeration options for field AccelRange */
typedef enum { HWNAZE_ACCELRANGE_2G=0, HWNAZE_ACCELRANGE_4G=1, HWNAZE_ACCELRANGE_8G=2, HWNAZE_ACCELRANGE_16G=3 }  __attribute__((packed)) HwNazeAccelRangeOptions;
/* Max value of any option in topmost parent AccelRange of field AccelRange */
#define HWNAZE_ACCELRANGE_GLOBAL_MAXOPTVAL 3
/* Max value of any option in field AccelRange */
#define HWNAZE_ACCELRANGE_MAXOPTVAL 3
/* Ensure field AccelRange contains valid data */
static inline bool HwNazeAccelRangeIsValid( uint8_t CurrentAccelRange ) { return CurrentAccelRange < HWNAZE_ACCELRANGE_MAXOPTVAL; }
// Field MPU6050Rate information
/* Enumeration options for field MPU6050Rate */
typedef enum { HWNAZE_MPU6050RATE_200=0, HWNAZE_MPU6050RATE_333=1, HWNAZE_MPU6050RATE_500=2 }  __attribute__((packed)) HwNazeMPU6050RateOptions;
/* Max value of any option in topmost parent MPU6050Rate of field MPU6050Rate */
#define HWNAZE_MPU6050RATE_GLOBAL_MAXOPTVAL 2
/* Max value of any option in field MPU6050Rate */
#define HWNAZE_MPU6050RATE_MAXOPTVAL 2
/* Ensure field MPU6050Rate contains valid data */
static inline bool HwNazeMPU6050RateIsValid( uint8_t CurrentMPU6050Rate ) { return CurrentMPU6050Rate < HWNAZE_MPU6050RATE_MAXOPTVAL; }
// Field MPU6050DLPF information
/* Enumeration options for field MPU6050DLPF */
typedef enum { HWNAZE_MPU6050DLPF_256=0, HWNAZE_MPU6050DLPF_188=1, HWNAZE_MPU6050DLPF_98=2, HWNAZE_MPU6050DLPF_42=3, HWNAZE_MPU6050DLPF_20=4, HWNAZE_MPU6050DLPF_10=5, HWNAZE_MPU6050DLPF_5=6 }  __attribute__((packed)) HwNazeMPU6050DLPFOptions;
/* Max value of any option in topmost parent MPU6050DLPF of field MPU6050DLPF */
#define HWNAZE_MPU6050DLPF_GLOBAL_MAXOPTVAL 6
/* Max value of any option in field MPU6050DLPF */
#define HWNAZE_MPU6050DLPF_MAXOPTVAL 6
/* Ensure field MPU6050DLPF contains valid data */
static inline bool HwNazeMPU6050DLPFIsValid( uint8_t CurrentMPU6050DLPF ) { return CurrentMPU6050DLPF < HWNAZE_MPU6050DLPF_MAXOPTVAL; }


// set/Get functions
extern void HwNazeMainPortSet( uint8_t *NewMainPort );
extern void HwNazeMainPortGet( uint8_t *NewMainPort );
extern void HwNazeRcvrPortSet( uint8_t *NewRcvrPort );
extern void HwNazeRcvrPortGet( uint8_t *NewRcvrPort );
extern void HwNazeRcvrSerialSet( uint8_t *NewRcvrSerial );
extern void HwNazeRcvrSerialGet( uint8_t *NewRcvrSerial );
extern void HwNazeDSMxModeSet( uint8_t *NewDSMxMode );
extern void HwNazeDSMxModeGet( uint8_t *NewDSMxMode );
extern void HwNazeGyroRangeSet( uint8_t *NewGyroRange );
extern void HwNazeGyroRangeGet( uint8_t *NewGyroRange );
extern void HwNazeAccelRangeSet( uint8_t *NewAccelRange );
extern void HwNazeAccelRangeGet( uint8_t *NewAccelRange );
extern void HwNazeMPU6050RateSet( uint8_t *NewMPU6050Rate );
extern void HwNazeMPU6050RateGet( uint8_t *NewMPU6050Rate );
extern void HwNazeMPU6050DLPFSet( uint8_t *NewMPU6050DLPF );
extern void HwNazeMPU6050DLPFGet( uint8_t *NewMPU6050DLPF );


#endif // HWNAZE_H

/**
 * @}
 * @}
 */
