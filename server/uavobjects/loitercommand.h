/**
 ******************************************************************************
 * @addtogroup UAVObjects UAVObject set for this firmware
 * @{
 * @addtogroup LoiterCommand LoiterCommand
 * @brief Requested movement while in loiter mode
 *
 *
 * @file       loitercommand.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @author     Tau Labs, http://taulabs.org, Copyright (C) 2012-2015
 * @brief      Include files for the LoiterCommand object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: loitercommand.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef LOITERCOMMAND_H
#define LOITERCOMMAND_H

#include "pios_queue.h"
#include "uavoversion.h"



// Object constants
#define LOITERCOMMAND_OBJID 0xBC5E5AF0
#define LOITERCOMMAND_ISSINGLEINST 1
#define LOITERCOMMAND_ISSETTINGS 0
#define LOITERCOMMAND_NUMBYTES 13

// Generic interface functions
int32_t LoiterCommandInitialize();
UAVObjHandle LoiterCommandHandle();
void LoiterCommandSetDefaults(UAVObjHandle obj, uint16_t instId);

// Object data
typedef struct {
    float Pitch;
    float Roll;
    float Throttle;
    uint8_t Frame;

} __attribute__((packed)) __attribute__((aligned(4))) LoiterCommandData;

// Typesafe Object access functions
/**
 * @function LoiterCommandGet(dataOut)
 * @brief Populate a LoiterCommandData object
 * @param[out] dataOut 
 */
static inline int32_t LoiterCommandGet(LoiterCommandData *dataOut) { return UAVObjGetData(LoiterCommandHandle(), dataOut); }

static inline int32_t LoiterCommandSet(const LoiterCommandData *dataIn) { return UAVObjSetData(LoiterCommandHandle(), dataIn); }

static inline int32_t LoiterCommandInstGet(uint16_t instId, LoiterCommandData *dataOut) { return UAVObjGetInstanceData(LoiterCommandHandle(), instId, dataOut); }

static inline int32_t LoiterCommandInstSet(uint16_t instId, const LoiterCommandData *dataIn) { return UAVObjSetInstanceData(LoiterCommandHandle(), instId, dataIn); }

static inline int32_t LoiterCommandConnectQueue(struct pios_queue *queue) { return UAVObjConnectQueue(LoiterCommandHandle(), queue, EV_MASK_ALL_UPDATES); }

static inline int32_t LoiterCommandConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(LoiterCommandHandle(), cb, EV_MASK_ALL_UPDATES); }

static inline uint16_t LoiterCommandCreateInstance() { return UAVObjCreateInstance(LoiterCommandHandle(), &LoiterCommandSetDefaults); }

static inline void LoiterCommandRequestUpdate() { UAVObjRequestUpdate(LoiterCommandHandle()); }

static inline void LoiterCommandRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(LoiterCommandHandle(), instId); }

static inline void LoiterCommandUpdated() { UAVObjUpdated(LoiterCommandHandle()); }

static inline void LoiterCommandInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(LoiterCommandHandle(), instId); }

static inline int32_t LoiterCommandGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(LoiterCommandHandle(), dataOut); }

static inline int32_t LoiterCommandSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(LoiterCommandHandle(), dataIn); }

static inline int8_t LoiterCommandReadOnly() { return UAVObjReadOnly(LoiterCommandHandle()); }

static inline uint16_t LoiterCommandGetNumInstances(){ return UAVObjGetNumInstances(LoiterCommandHandle()); }

static inline uint32_t LoiterCommandGetNumBytes(){ return UAVObjGetNumBytes(LoiterCommandHandle()); }

// Field information
// Field Pitch information
// Field Roll information
// Field Throttle information
// Field Frame information
/* Enumeration options for field Frame */
typedef enum { LOITERCOMMAND_FRAME_BODY=0, LOITERCOMMAND_FRAME_EARTH=1 }  __attribute__((packed)) LoiterCommandFrameOptions;
/* Max value of any option in topmost parent Frame of field Frame */
#define LOITERCOMMAND_FRAME_GLOBAL_MAXOPTVAL 1
/* Max value of any option in field Frame */
#define LOITERCOMMAND_FRAME_MAXOPTVAL 1
/* Ensure field Frame contains valid data */
static inline bool LoiterCommandFrameIsValid( uint8_t CurrentFrame ) { return CurrentFrame < LOITERCOMMAND_FRAME_MAXOPTVAL; }


// set/Get functions
extern void LoiterCommandPitchSet( float *NewPitch );
extern void LoiterCommandPitchGet( float *NewPitch );
extern void LoiterCommandRollSet( float *NewRoll );
extern void LoiterCommandRollGet( float *NewRoll );
extern void LoiterCommandThrottleSet( float *NewThrottle );
extern void LoiterCommandThrottleGet( float *NewThrottle );
extern void LoiterCommandFrameSet( uint8_t *NewFrame );
extern void LoiterCommandFrameGet( uint8_t *NewFrame );


#endif // LOITERCOMMAND_H

/**
 * @}
 * @}
 */
