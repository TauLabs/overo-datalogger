/**
 ******************************************************************************
 * @addtogroup UAVObjects UAVObject set for this firmware
 * @{
 * @addtogroup HwFreedom HwFreedom
 * @brief Selection of optional hardware configurations.
 *
 *
 * @file       hwfreedom.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @author     Tau Labs, http://taulabs.org, Copyright (C) 2012-2015
 * @brief      Include files for the HwFreedom object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: hwfreedom.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef HWFREEDOM_H
#define HWFREEDOM_H

#include "pios_queue.h"
#include "uavoversion.h"

#include <hwshared.h>


// Object constants
#define HWFREEDOM_OBJID 0x98592960
#define HWFREEDOM_ISSINGLEINST 1
#define HWFREEDOM_ISSETTINGS 1
#define HWFREEDOM_NUMBYTES 21

// Generic interface functions
int32_t HwFreedomInitialize();
UAVObjHandle HwFreedomHandle();
void HwFreedomSetDefaults(UAVObjHandle obj, uint16_t instId);

// Object data
typedef struct {
    uint32_t CoordID;
    uint8_t Output;
    uint8_t MainPort;
    uint8_t FlexiPort;
    uint8_t RcvrPort;
    uint8_t USB_HIDPort;
    uint8_t USB_VCPPort;
    uint8_t DSMxMode;
    uint8_t Radio;
    uint8_t MaxRfSpeed;
    uint8_t MaxRfPower;
    uint8_t RfBand;
    uint8_t MinChannel;
    uint8_t MaxChannel;
    uint8_t GyroRange;
    uint8_t AccelRange;
    uint8_t MPU6000Rate;
    uint8_t MPU6000DLPF;

} __attribute__((packed)) __attribute__((aligned(4))) HwFreedomData;

// Typesafe Object access functions
/**
 * @function HwFreedomGet(dataOut)
 * @brief Populate a HwFreedomData object
 * @param[out] dataOut 
 */
static inline int32_t HwFreedomGet(HwFreedomData *dataOut) { return UAVObjGetData(HwFreedomHandle(), dataOut); }

static inline int32_t HwFreedomSet(const HwFreedomData *dataIn) { return UAVObjSetData(HwFreedomHandle(), dataIn); }

static inline int32_t HwFreedomInstGet(uint16_t instId, HwFreedomData *dataOut) { return UAVObjGetInstanceData(HwFreedomHandle(), instId, dataOut); }

static inline int32_t HwFreedomInstSet(uint16_t instId, const HwFreedomData *dataIn) { return UAVObjSetInstanceData(HwFreedomHandle(), instId, dataIn); }

static inline int32_t HwFreedomConnectQueue(struct pios_queue *queue) { return UAVObjConnectQueue(HwFreedomHandle(), queue, EV_MASK_ALL_UPDATES); }

static inline int32_t HwFreedomConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(HwFreedomHandle(), cb, EV_MASK_ALL_UPDATES); }

static inline uint16_t HwFreedomCreateInstance() { return UAVObjCreateInstance(HwFreedomHandle(), &HwFreedomSetDefaults); }

static inline void HwFreedomRequestUpdate() { UAVObjRequestUpdate(HwFreedomHandle()); }

static inline void HwFreedomRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(HwFreedomHandle(), instId); }

static inline void HwFreedomUpdated() { UAVObjUpdated(HwFreedomHandle()); }

static inline void HwFreedomInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(HwFreedomHandle(), instId); }

static inline int32_t HwFreedomGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(HwFreedomHandle(), dataOut); }

static inline int32_t HwFreedomSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(HwFreedomHandle(), dataIn); }

static inline int8_t HwFreedomReadOnly() { return UAVObjReadOnly(HwFreedomHandle()); }

static inline uint16_t HwFreedomGetNumInstances(){ return UAVObjGetNumInstances(HwFreedomHandle()); }

static inline uint32_t HwFreedomGetNumBytes(){ return UAVObjGetNumBytes(HwFreedomHandle()); }

// Field information
// Field CoordID information
// Field Output information
/* Enumeration options for field Output */
typedef enum { HWFREEDOM_OUTPUT_DISABLED=0, HWFREEDOM_OUTPUT_PWM=1 }  __attribute__((packed)) HwFreedomOutputOptions;
/* Max value of any option in topmost parent Output of field Output */
#define HWFREEDOM_OUTPUT_GLOBAL_MAXOPTVAL 1
/* Max value of any option in field Output */
#define HWFREEDOM_OUTPUT_MAXOPTVAL 1
/* Ensure field Output contains valid data */
static inline bool HwFreedomOutputIsValid( uint8_t CurrentOutput ) { return CurrentOutput < HWFREEDOM_OUTPUT_MAXOPTVAL; }
// Field MainPort information
/* Enumeration options for field MainPort */
typedef enum { HWFREEDOM_MAINPORT_DISABLED=HWSHARED_PORTTYPES_DISABLED, HWFREEDOM_MAINPORT_TELEMETRY=HWSHARED_PORTTYPES_TELEMETRY, HWFREEDOM_MAINPORT_GPS=HWSHARED_PORTTYPES_GPS, HWFREEDOM_MAINPORT_DSM=HWSHARED_PORTTYPES_DSM, HWFREEDOM_MAINPORT_DEBUGCONSOLE=HWSHARED_PORTTYPES_DEBUGCONSOLE, HWFREEDOM_MAINPORT_COMBRIDGE=HWSHARED_PORTTYPES_COMBRIDGE, HWFREEDOM_MAINPORT_MAVLINKTX=HWSHARED_PORTTYPES_MAVLINKTX, HWFREEDOM_MAINPORT_MAVLINKTX_GPS_RX=HWSHARED_PORTTYPES_MAVLINKTX_GPS_RX, HWFREEDOM_MAINPORT_MSP=HWSHARED_PORTTYPES_MSP, HWFREEDOM_MAINPORT_HOTTSUMD=HWSHARED_PORTTYPES_HOTTSUMD, HWFREEDOM_MAINPORT_HOTTSUMH=HWSHARED_PORTTYPES_HOTTSUMH, HWFREEDOM_MAINPORT_HOTTTELEMETRY=HWSHARED_PORTTYPES_HOTTTELEMETRY, HWFREEDOM_MAINPORT_FRSKYSENSORHUB=HWSHARED_PORTTYPES_FRSKYSENSORHUB, HWFREEDOM_MAINPORT_FRSKYSPORTTELEMETRY=HWSHARED_PORTTYPES_FRSKYSPORTTELEMETRY, HWFREEDOM_MAINPORT_LIGHTTELEMETRYTX=HWSHARED_PORTTYPES_LIGHTTELEMETRYTX, HWFREEDOM_MAINPORT_PICOC=HWSHARED_PORTTYPES_PICOC, HWFREEDOM_MAINPORT_DONTSWITCHONCHILDENUMS=255 }  __attribute__((packed)) HwFreedomMainPortOptions;
/* Max value of any option in topmost parent PortTypes of field MainPort */
#define HWFREEDOM_MAINPORT_GLOBAL_MAXOPTVAL 20
/* Max value of any option in field MainPort */
#define HWFREEDOM_MAINPORT_MAXOPTVAL 16
/* Ensure field MainPort contains valid data */
static inline bool HwFreedomMainPortIsValid( uint8_t CurrentMainPort ) { return CurrentMainPort < HWFREEDOM_MAINPORT_MAXOPTVAL; }
// Field FlexiPort information
/* Enumeration options for field FlexiPort */
typedef enum { HWFREEDOM_FLEXIPORT_DISABLED=HWSHARED_PORTTYPES_DISABLED, HWFREEDOM_FLEXIPORT_TELEMETRY=HWSHARED_PORTTYPES_TELEMETRY, HWFREEDOM_FLEXIPORT_GPS=HWSHARED_PORTTYPES_GPS, HWFREEDOM_FLEXIPORT_I2C=HWSHARED_PORTTYPES_I2C, HWFREEDOM_FLEXIPORT_DSM=HWSHARED_PORTTYPES_DSM, HWFREEDOM_FLEXIPORT_DEBUGCONSOLE=HWSHARED_PORTTYPES_DEBUGCONSOLE, HWFREEDOM_FLEXIPORT_COMBRIDGE=HWSHARED_PORTTYPES_COMBRIDGE, HWFREEDOM_FLEXIPORT_MAVLINKTX=HWSHARED_PORTTYPES_MAVLINKTX, HWFREEDOM_FLEXIPORT_MAVLINKTX_GPS_RX=HWSHARED_PORTTYPES_MAVLINKTX_GPS_RX, HWFREEDOM_FLEXIPORT_MSP=HWSHARED_PORTTYPES_MSP, HWFREEDOM_FLEXIPORT_HOTTSUMD=HWSHARED_PORTTYPES_HOTTSUMD, HWFREEDOM_FLEXIPORT_HOTTSUMH=HWSHARED_PORTTYPES_HOTTSUMH, HWFREEDOM_FLEXIPORT_HOTTTELEMETRY=HWSHARED_PORTTYPES_HOTTTELEMETRY, HWFREEDOM_FLEXIPORT_FRSKYSENSORHUB=HWSHARED_PORTTYPES_FRSKYSENSORHUB, HWFREEDOM_FLEXIPORT_FRSKYSPORTTELEMETRY=HWSHARED_PORTTYPES_FRSKYSPORTTELEMETRY, HWFREEDOM_FLEXIPORT_LIGHTTELEMETRYTX=HWSHARED_PORTTYPES_LIGHTTELEMETRYTX, HWFREEDOM_FLEXIPORT_PICOC=HWSHARED_PORTTYPES_PICOC, HWFREEDOM_FLEXIPORT_DONTSWITCHONCHILDENUMS=255 }  __attribute__((packed)) HwFreedomFlexiPortOptions;
/* Max value of any option in topmost parent PortTypes of field FlexiPort */
#define HWFREEDOM_FLEXIPORT_GLOBAL_MAXOPTVAL 20
/* Max value of any option in field FlexiPort */
#define HWFREEDOM_FLEXIPORT_MAXOPTVAL 18
/* Ensure field FlexiPort contains valid data */
static inline bool HwFreedomFlexiPortIsValid( uint8_t CurrentFlexiPort ) { return CurrentFlexiPort < HWFREEDOM_FLEXIPORT_MAXOPTVAL; }
// Field RcvrPort information
/* Enumeration options for field RcvrPort */
typedef enum { HWFREEDOM_RCVRPORT_DISABLED=HWSHARED_PORTTYPES_DISABLED, HWFREEDOM_RCVRPORT_PPM=HWSHARED_PORTTYPES_PPM, HWFREEDOM_RCVRPORT_SBUS=HWSHARED_PORTTYPES_SBUS, HWFREEDOM_RCVRPORT_DSM=HWSHARED_PORTTYPES_DSM, HWFREEDOM_RCVRPORT_HOTTSUMD=HWSHARED_PORTTYPES_HOTTSUMD, HWFREEDOM_RCVRPORT_HOTTSUMH=HWSHARED_PORTTYPES_HOTTSUMH, HWFREEDOM_RCVRPORT_DONTSWITCHONCHILDENUMS=255 }  __attribute__((packed)) HwFreedomRcvrPortOptions;
/* Max value of any option in topmost parent PortTypes of field RcvrPort */
#define HWFREEDOM_RCVRPORT_GLOBAL_MAXOPTVAL 20
/* Max value of any option in field RcvrPort */
#define HWFREEDOM_RCVRPORT_MAXOPTVAL 19
/* Ensure field RcvrPort contains valid data */
static inline bool HwFreedomRcvrPortIsValid( uint8_t CurrentRcvrPort ) { return CurrentRcvrPort < HWFREEDOM_RCVRPORT_MAXOPTVAL; }
// Field USB_HIDPort information
/* Enumeration options for field USB_HIDPort */
typedef enum { HWFREEDOM_USB_HIDPORT_USBTELEMETRY=HWSHARED_USB_HIDPORT_USBTELEMETRY, HWFREEDOM_USB_HIDPORT_DISABLED=HWSHARED_USB_HIDPORT_DISABLED, HWFREEDOM_USB_HIDPORT_DONTSWITCHONCHILDENUMS=255 }  __attribute__((packed)) HwFreedomUSB_HIDPortOptions;
/* Max value of any option in topmost parent USB_HIDPort of field USB_HIDPort */
#define HWFREEDOM_USB_HIDPORT_GLOBAL_MAXOPTVAL 1
/* Max value of any option in field USB_HIDPort */
#define HWFREEDOM_USB_HIDPORT_MAXOPTVAL 1
/* Ensure field USB_HIDPort contains valid data */
static inline bool HwFreedomUSB_HIDPortIsValid( uint8_t CurrentUSB_HIDPort ) { return CurrentUSB_HIDPort < HWFREEDOM_USB_HIDPORT_MAXOPTVAL; }
// Field USB_VCPPort information
/* Enumeration options for field USB_VCPPort */
typedef enum { HWFREEDOM_USB_VCPPORT_USBTELEMETRY=HWSHARED_USB_VCPPORT_USBTELEMETRY, HWFREEDOM_USB_VCPPORT_COMBRIDGE=HWSHARED_USB_VCPPORT_COMBRIDGE, HWFREEDOM_USB_VCPPORT_DEBUGCONSOLE=HWSHARED_USB_VCPPORT_DEBUGCONSOLE, HWFREEDOM_USB_VCPPORT_PICOC=HWSHARED_USB_VCPPORT_PICOC, HWFREEDOM_USB_VCPPORT_DISABLED=HWSHARED_USB_VCPPORT_DISABLED, HWFREEDOM_USB_VCPPORT_DONTSWITCHONCHILDENUMS=255 }  __attribute__((packed)) HwFreedomUSB_VCPPortOptions;
/* Max value of any option in topmost parent USB_VCPPort of field USB_VCPPort */
#define HWFREEDOM_USB_VCPPORT_GLOBAL_MAXOPTVAL 4
/* Max value of any option in field USB_VCPPort */
#define HWFREEDOM_USB_VCPPORT_MAXOPTVAL 4
/* Ensure field USB_VCPPort contains valid data */
static inline bool HwFreedomUSB_VCPPortIsValid( uint8_t CurrentUSB_VCPPort ) { return CurrentUSB_VCPPort < HWFREEDOM_USB_VCPPORT_MAXOPTVAL; }
// Field DSMxMode information
/* Enumeration options for field DSMxMode */
typedef enum { HWFREEDOM_DSMXMODE_AUTODETECT=HWSHARED_DSMXMODE_AUTODETECT, HWFREEDOM_DSMXMODE_FORCE10BIT=HWSHARED_DSMXMODE_FORCE10BIT, HWFREEDOM_DSMXMODE_FORCE11BIT=HWSHARED_DSMXMODE_FORCE11BIT, HWFREEDOM_DSMXMODE_BIND3PULSES=HWSHARED_DSMXMODE_BIND3PULSES, HWFREEDOM_DSMXMODE_BIND4PULSES=HWSHARED_DSMXMODE_BIND4PULSES, HWFREEDOM_DSMXMODE_BIND5PULSES=HWSHARED_DSMXMODE_BIND5PULSES, HWFREEDOM_DSMXMODE_BIND6PULSES=HWSHARED_DSMXMODE_BIND6PULSES, HWFREEDOM_DSMXMODE_BIND7PULSES=HWSHARED_DSMXMODE_BIND7PULSES, HWFREEDOM_DSMXMODE_BIND8PULSES=HWSHARED_DSMXMODE_BIND8PULSES, HWFREEDOM_DSMXMODE_BIND9PULSES=HWSHARED_DSMXMODE_BIND9PULSES, HWFREEDOM_DSMXMODE_BIND10PULSES=HWSHARED_DSMXMODE_BIND10PULSES, HWFREEDOM_DSMXMODE_DONTSWITCHONCHILDENUMS=255 }  __attribute__((packed)) HwFreedomDSMxModeOptions;
/* Max value of any option in topmost parent DSMxMode of field DSMxMode */
#define HWFREEDOM_DSMXMODE_GLOBAL_MAXOPTVAL 10
/* Max value of any option in field DSMxMode */
#define HWFREEDOM_DSMXMODE_MAXOPTVAL 10
/* Ensure field DSMxMode contains valid data */
static inline bool HwFreedomDSMxModeIsValid( uint8_t CurrentDSMxMode ) { return CurrentDSMxMode < HWFREEDOM_DSMXMODE_MAXOPTVAL; }
// Field Radio information
/* Enumeration options for field Radio */
typedef enum { HWFREEDOM_RADIO_DISABLED=HWSHARED_RADIOPORT_DISABLED, HWFREEDOM_RADIO_TELEM=HWSHARED_RADIOPORT_TELEM, HWFREEDOM_RADIO_TELEMPPM=HWSHARED_RADIOPORT_TELEMPPM, HWFREEDOM_RADIO_PPM=HWSHARED_RADIOPORT_PPM, HWFREEDOM_RADIO_OPENLRS=HWSHARED_RADIOPORT_OPENLRS, HWFREEDOM_RADIO_DONTSWITCHONCHILDENUMS=255 }  __attribute__((packed)) HwFreedomRadioOptions;
/* Max value of any option in topmost parent RadioPort of field Radio */
#define HWFREEDOM_RADIO_GLOBAL_MAXOPTVAL 4
/* Max value of any option in field Radio */
#define HWFREEDOM_RADIO_MAXOPTVAL 4
/* Ensure field Radio contains valid data */
static inline bool HwFreedomRadioIsValid( uint8_t CurrentRadio ) { return CurrentRadio < HWFREEDOM_RADIO_MAXOPTVAL; }
// Field MaxRfSpeed information
/* Enumeration options for field MaxRfSpeed */
typedef enum { HWFREEDOM_MAXRFSPEED_9600=0, HWFREEDOM_MAXRFSPEED_19200=1, HWFREEDOM_MAXRFSPEED_32000=2, HWFREEDOM_MAXRFSPEED_64000=3, HWFREEDOM_MAXRFSPEED_100000=4, HWFREEDOM_MAXRFSPEED_192000=5 }  __attribute__((packed)) HwFreedomMaxRfSpeedOptions;
/* Max value of any option in topmost parent MaxRfSpeed of field MaxRfSpeed */
#define HWFREEDOM_MAXRFSPEED_GLOBAL_MAXOPTVAL 5
/* Max value of any option in field MaxRfSpeed */
#define HWFREEDOM_MAXRFSPEED_MAXOPTVAL 5
/* Ensure field MaxRfSpeed contains valid data */
static inline bool HwFreedomMaxRfSpeedIsValid( uint8_t CurrentMaxRfSpeed ) { return CurrentMaxRfSpeed < HWFREEDOM_MAXRFSPEED_MAXOPTVAL; }
// Field MaxRfPower information
/* Enumeration options for field MaxRfPower */
typedef enum { HWFREEDOM_MAXRFPOWER_0=0, HWFREEDOM_MAXRFPOWER_125=1, HWFREEDOM_MAXRFPOWER_16=2, HWFREEDOM_MAXRFPOWER_316=3, HWFREEDOM_MAXRFPOWER_63=4, HWFREEDOM_MAXRFPOWER_126=5, HWFREEDOM_MAXRFPOWER_25=6, HWFREEDOM_MAXRFPOWER_50=7, HWFREEDOM_MAXRFPOWER_100=8 }  __attribute__((packed)) HwFreedomMaxRfPowerOptions;
/* Max value of any option in topmost parent MaxRfPower of field MaxRfPower */
#define HWFREEDOM_MAXRFPOWER_GLOBAL_MAXOPTVAL 8
/* Max value of any option in field MaxRfPower */
#define HWFREEDOM_MAXRFPOWER_MAXOPTVAL 8
/* Ensure field MaxRfPower contains valid data */
static inline bool HwFreedomMaxRfPowerIsValid( uint8_t CurrentMaxRfPower ) { return CurrentMaxRfPower < HWFREEDOM_MAXRFPOWER_MAXOPTVAL; }
// Field RfBand information
/* Enumeration options for field RfBand */
typedef enum { HWFREEDOM_RFBAND_BOARDDEFAULT=HWSHARED_RFBAND_BOARDDEFAULT, HWFREEDOM_RFBAND_433=HWSHARED_RFBAND_433, HWFREEDOM_RFBAND_868=HWSHARED_RFBAND_868, HWFREEDOM_RFBAND_915=HWSHARED_RFBAND_915, HWFREEDOM_RFBAND_DONTSWITCHONCHILDENUMS=255 }  __attribute__((packed)) HwFreedomRfBandOptions;
/* Max value of any option in topmost parent RfBand of field RfBand */
#define HWFREEDOM_RFBAND_GLOBAL_MAXOPTVAL 3
/* Max value of any option in field RfBand */
#define HWFREEDOM_RFBAND_MAXOPTVAL 3
/* Ensure field RfBand contains valid data */
static inline bool HwFreedomRfBandIsValid( uint8_t CurrentRfBand ) { return CurrentRfBand < HWFREEDOM_RFBAND_MAXOPTVAL; }
// Field MinChannel information
// Field MaxChannel information
// Field GyroRange information
/* Enumeration options for field GyroRange */
typedef enum { HWFREEDOM_GYRORANGE_250=0, HWFREEDOM_GYRORANGE_500=1, HWFREEDOM_GYRORANGE_1000=2, HWFREEDOM_GYRORANGE_2000=3 }  __attribute__((packed)) HwFreedomGyroRangeOptions;
/* Max value of any option in topmost parent GyroRange of field GyroRange */
#define HWFREEDOM_GYRORANGE_GLOBAL_MAXOPTVAL 3
/* Max value of any option in field GyroRange */
#define HWFREEDOM_GYRORANGE_MAXOPTVAL 3
/* Ensure field GyroRange contains valid data */
static inline bool HwFreedomGyroRangeIsValid( uint8_t CurrentGyroRange ) { return CurrentGyroRange < HWFREEDOM_GYRORANGE_MAXOPTVAL; }
// Field AccelRange information
/* Enumeration options for field AccelRange */
typedef enum { HWFREEDOM_ACCELRANGE_2G=0, HWFREEDOM_ACCELRANGE_4G=1, HWFREEDOM_ACCELRANGE_8G=2, HWFREEDOM_ACCELRANGE_16G=3 }  __attribute__((packed)) HwFreedomAccelRangeOptions;
/* Max value of any option in topmost parent AccelRange of field AccelRange */
#define HWFREEDOM_ACCELRANGE_GLOBAL_MAXOPTVAL 3
/* Max value of any option in field AccelRange */
#define HWFREEDOM_ACCELRANGE_MAXOPTVAL 3
/* Ensure field AccelRange contains valid data */
static inline bool HwFreedomAccelRangeIsValid( uint8_t CurrentAccelRange ) { return CurrentAccelRange < HWFREEDOM_ACCELRANGE_MAXOPTVAL; }
// Field MPU6000Rate information
/* Enumeration options for field MPU6000Rate */
typedef enum { HWFREEDOM_MPU6000RATE_200=0, HWFREEDOM_MPU6000RATE_333=1, HWFREEDOM_MPU6000RATE_500=2, HWFREEDOM_MPU6000RATE_666=3, HWFREEDOM_MPU6000RATE_1000=4, HWFREEDOM_MPU6000RATE_2000=5, HWFREEDOM_MPU6000RATE_4000=6, HWFREEDOM_MPU6000RATE_8000=7 }  __attribute__((packed)) HwFreedomMPU6000RateOptions;
/* Max value of any option in topmost parent MPU6000Rate of field MPU6000Rate */
#define HWFREEDOM_MPU6000RATE_GLOBAL_MAXOPTVAL 7
/* Max value of any option in field MPU6000Rate */
#define HWFREEDOM_MPU6000RATE_MAXOPTVAL 7
/* Ensure field MPU6000Rate contains valid data */
static inline bool HwFreedomMPU6000RateIsValid( uint8_t CurrentMPU6000Rate ) { return CurrentMPU6000Rate < HWFREEDOM_MPU6000RATE_MAXOPTVAL; }
// Field MPU6000DLPF information
/* Enumeration options for field MPU6000DLPF */
typedef enum { HWFREEDOM_MPU6000DLPF_256=0, HWFREEDOM_MPU6000DLPF_188=1, HWFREEDOM_MPU6000DLPF_98=2, HWFREEDOM_MPU6000DLPF_42=3, HWFREEDOM_MPU6000DLPF_20=4, HWFREEDOM_MPU6000DLPF_10=5, HWFREEDOM_MPU6000DLPF_5=6 }  __attribute__((packed)) HwFreedomMPU6000DLPFOptions;
/* Max value of any option in topmost parent MPU6000DLPF of field MPU6000DLPF */
#define HWFREEDOM_MPU6000DLPF_GLOBAL_MAXOPTVAL 6
/* Max value of any option in field MPU6000DLPF */
#define HWFREEDOM_MPU6000DLPF_MAXOPTVAL 6
/* Ensure field MPU6000DLPF contains valid data */
static inline bool HwFreedomMPU6000DLPFIsValid( uint8_t CurrentMPU6000DLPF ) { return CurrentMPU6000DLPF < HWFREEDOM_MPU6000DLPF_MAXOPTVAL; }


// set/Get functions
extern void HwFreedomCoordIDSet( uint32_t *NewCoordID );
extern void HwFreedomCoordIDGet( uint32_t *NewCoordID );
extern void HwFreedomOutputSet( uint8_t *NewOutput );
extern void HwFreedomOutputGet( uint8_t *NewOutput );
extern void HwFreedomMainPortSet( uint8_t *NewMainPort );
extern void HwFreedomMainPortGet( uint8_t *NewMainPort );
extern void HwFreedomFlexiPortSet( uint8_t *NewFlexiPort );
extern void HwFreedomFlexiPortGet( uint8_t *NewFlexiPort );
extern void HwFreedomRcvrPortSet( uint8_t *NewRcvrPort );
extern void HwFreedomRcvrPortGet( uint8_t *NewRcvrPort );
extern void HwFreedomUSB_HIDPortSet( uint8_t *NewUSB_HIDPort );
extern void HwFreedomUSB_HIDPortGet( uint8_t *NewUSB_HIDPort );
extern void HwFreedomUSB_VCPPortSet( uint8_t *NewUSB_VCPPort );
extern void HwFreedomUSB_VCPPortGet( uint8_t *NewUSB_VCPPort );
extern void HwFreedomDSMxModeSet( uint8_t *NewDSMxMode );
extern void HwFreedomDSMxModeGet( uint8_t *NewDSMxMode );
extern void HwFreedomRadioSet( uint8_t *NewRadio );
extern void HwFreedomRadioGet( uint8_t *NewRadio );
extern void HwFreedomMaxRfSpeedSet( uint8_t *NewMaxRfSpeed );
extern void HwFreedomMaxRfSpeedGet( uint8_t *NewMaxRfSpeed );
extern void HwFreedomMaxRfPowerSet( uint8_t *NewMaxRfPower );
extern void HwFreedomMaxRfPowerGet( uint8_t *NewMaxRfPower );
extern void HwFreedomRfBandSet( uint8_t *NewRfBand );
extern void HwFreedomRfBandGet( uint8_t *NewRfBand );
extern void HwFreedomMinChannelSet( uint8_t *NewMinChannel );
extern void HwFreedomMinChannelGet( uint8_t *NewMinChannel );
extern void HwFreedomMaxChannelSet( uint8_t *NewMaxChannel );
extern void HwFreedomMaxChannelGet( uint8_t *NewMaxChannel );
extern void HwFreedomGyroRangeSet( uint8_t *NewGyroRange );
extern void HwFreedomGyroRangeGet( uint8_t *NewGyroRange );
extern void HwFreedomAccelRangeSet( uint8_t *NewAccelRange );
extern void HwFreedomAccelRangeGet( uint8_t *NewAccelRange );
extern void HwFreedomMPU6000RateSet( uint8_t *NewMPU6000Rate );
extern void HwFreedomMPU6000RateGet( uint8_t *NewMPU6000Rate );
extern void HwFreedomMPU6000DLPFSet( uint8_t *NewMPU6000DLPF );
extern void HwFreedomMPU6000DLPFGet( uint8_t *NewMPU6000DLPF );


#endif // HWFREEDOM_H

/**
 * @}
 * @}
 */
