/**
 ******************************************************************************
 * @addtogroup UAVObjects UAVObject set for this firmware
 * @{
 * @addtogroup HwSparky2 HwSparky2
 * @brief Selection of optional hardware configurations.
 *
 *
 * @file       hwsparky2.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @author     Tau Labs, http://taulabs.org, Copyright (C) 2012-2013
 * @brief      Include files for the HwSparky2 object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: hwsparky2.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef HWSPARKY2_H
#define HWSPARKY2_H

// Object constants
#define HWSPARKY2_OBJID 0x110615A8
#define HWSPARKY2_ISSINGLEINST 1
#define HWSPARKY2_ISSETTINGS 1
#define HWSPARKY2_NUMBYTES 11

// Generic interface functions
int32_t HwSparky2Initialize();
UAVObjHandle HwSparky2Handle();
void HwSparky2SetDefaults(UAVObjHandle obj, uint16_t instId);

// Object data
typedef struct {
    uint8_t RcvrPort;
    uint8_t MainPort;
    uint8_t FlexiPort;
    uint8_t RadioPort;
    uint8_t USB_HIDPort;
    uint8_t USB_VCPPort;
    uint8_t DSMxBind;
    uint8_t GyroRange;
    uint8_t AccelRange;
    uint8_t MPU9250Rate;
    uint8_t MPU9250DLPF;

} __attribute__((packed)) __attribute__((aligned(4))) HwSparky2Data;

// Typesafe Object access functions
/**
 * @function HwSparky2Get(dataOut)
 * @brief Populate a HwSparky2Data object
 * @param[out] dataOut 
 */
static inline int32_t HwSparky2Get(HwSparky2Data *dataOut) { return UAVObjGetData(HwSparky2Handle(), dataOut); }

static inline int32_t HwSparky2Set(const HwSparky2Data *dataIn) { return UAVObjSetData(HwSparky2Handle(), dataIn); }

static inline int32_t HwSparky2InstGet(uint16_t instId, HwSparky2Data *dataOut) { return UAVObjGetInstanceData(HwSparky2Handle(), instId, dataOut); }

static inline int32_t HwSparky2InstSet(uint16_t instId, const HwSparky2Data *dataIn) { return UAVObjSetInstanceData(HwSparky2Handle(), instId, dataIn); }

static inline int32_t HwSparky2ConnectQueue(xQueueHandle queue) { return UAVObjConnectQueue(HwSparky2Handle(), queue, EV_MASK_ALL_UPDATES); }

static inline int32_t HwSparky2ConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(HwSparky2Handle(), cb, EV_MASK_ALL_UPDATES); }

static inline uint16_t HwSparky2CreateInstance() { return UAVObjCreateInstance(HwSparky2Handle(), &HwSparky2SetDefaults); }

static inline void HwSparky2RequestUpdate() { UAVObjRequestUpdate(HwSparky2Handle()); }

static inline void HwSparky2RequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(HwSparky2Handle(), instId); }

static inline void HwSparky2Updated() { UAVObjUpdated(HwSparky2Handle()); }

static inline void HwSparky2InstUpdated(uint16_t instId) { UAVObjInstanceUpdated(HwSparky2Handle(), instId); }

static inline int32_t HwSparky2GetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(HwSparky2Handle(), dataOut); }

static inline int32_t HwSparky2SetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(HwSparky2Handle(), dataIn); }

static inline int8_t HwSparky2ReadOnly() { return UAVObjReadOnly(HwSparky2Handle()); }

static inline uint16_t HwSparky2GetNumInstances(){ return UAVObjGetNumInstances(HwSparky2Handle()); }

static inline uint32_t HwSparky2GetNumBytes(){ return UAVObjGetNumBytes(HwSparky2Handle()); }

// Field information
// Field RcvrPort information
/* Enumeration options for field RcvrPort */
typedef enum { HWSPARKY2_RCVRPORT_DISABLED=0, HWSPARKY2_RCVRPORT_PPM=1, HWSPARKY2_RCVRPORT_SBUS=2, HWSPARKY2_RCVRPORT_DSM2=3, HWSPARKY2_RCVRPORT_DSMX10BIT=4, HWSPARKY2_RCVRPORT_DSMX11BIT=5, HWSPARKY2_RCVRPORT_HOTTSUMD=6, HWSPARKY2_RCVRPORT_HOTTSUMH=7 }  __attribute__((packed)) HwSparky2RcvrPortOptions;
// Field MainPort information
/* Enumeration options for field MainPort */
typedef enum { HWSPARKY2_MAINPORT_DISABLED=0, HWSPARKY2_MAINPORT_TELEMETRY=1, HWSPARKY2_MAINPORT_GPS=2, HWSPARKY2_MAINPORT_DSM2=3, HWSPARKY2_MAINPORT_DSMX10BIT=4, HWSPARKY2_MAINPORT_DSMX11BIT=5, HWSPARKY2_MAINPORT_DEBUGCONSOLE=6, HWSPARKY2_MAINPORT_COMBRIDGE=7, HWSPARKY2_MAINPORT_MAVLINKTX=8, HWSPARKY2_MAINPORT_MAVLINKTX_GPS_RX=9, HWSPARKY2_MAINPORT_HOTTSUMD=10, HWSPARKY2_MAINPORT_HOTTSUMH=11, HWSPARKY2_MAINPORT_HOTTTELEMETRY=12, HWSPARKY2_MAINPORT_FRSKYSENSORHUB=13, HWSPARKY2_MAINPORT_LIGHTTELEMETRYTX=14, HWSPARKY2_MAINPORT_PICOC=15 }  __attribute__((packed)) HwSparky2MainPortOptions;
// Field FlexiPort information
/* Enumeration options for field FlexiPort */
typedef enum { HWSPARKY2_FLEXIPORT_DISABLED=0, HWSPARKY2_FLEXIPORT_TELEMETRY=1, HWSPARKY2_FLEXIPORT_GPS=2, HWSPARKY2_FLEXIPORT_I2C=3, HWSPARKY2_FLEXIPORT_DSM2=4, HWSPARKY2_FLEXIPORT_DSMX10BIT=5, HWSPARKY2_FLEXIPORT_DSMX11BIT=6, HWSPARKY2_FLEXIPORT_DEBUGCONSOLE=7, HWSPARKY2_FLEXIPORT_COMBRIDGE=8, HWSPARKY2_FLEXIPORT_MAVLINKTX=9, HWSPARKY2_FLEXIPORT_MAVLINKTX_GPS_RX=10, HWSPARKY2_FLEXIPORT_HOTTSUMD=11, HWSPARKY2_FLEXIPORT_HOTTSUMH=12, HWSPARKY2_FLEXIPORT_HOTTTELEMETRY=13, HWSPARKY2_FLEXIPORT_FRSKYSENSORHUB=14, HWSPARKY2_FLEXIPORT_LIGHTTELEMETRYTX=15, HWSPARKY2_FLEXIPORT_PICOC=16 }  __attribute__((packed)) HwSparky2FlexiPortOptions;
// Field RadioPort information
/* Enumeration options for field RadioPort */
typedef enum { HWSPARKY2_RADIOPORT_DISABLED=0, HWSPARKY2_RADIOPORT_TELEMETRY=1 }  __attribute__((packed)) HwSparky2RadioPortOptions;
// Field USB_HIDPort information
/* Enumeration options for field USB_HIDPort */
typedef enum { HWSPARKY2_USB_HIDPORT_USBTELEMETRY=0, HWSPARKY2_USB_HIDPORT_RCTRANSMITTER=1, HWSPARKY2_USB_HIDPORT_DISABLED=2 }  __attribute__((packed)) HwSparky2USB_HIDPortOptions;
// Field USB_VCPPort information
/* Enumeration options for field USB_VCPPort */
typedef enum { HWSPARKY2_USB_VCPPORT_USBTELEMETRY=0, HWSPARKY2_USB_VCPPORT_COMBRIDGE=1, HWSPARKY2_USB_VCPPORT_DEBUGCONSOLE=2, HWSPARKY2_USB_VCPPORT_PICOC=3, HWSPARKY2_USB_VCPPORT_DISABLED=4 }  __attribute__((packed)) HwSparky2USB_VCPPortOptions;
// Field DSMxBind information
// Field GyroRange information
/* Enumeration options for field GyroRange */
typedef enum { HWSPARKY2_GYRORANGE_250=0, HWSPARKY2_GYRORANGE_500=1, HWSPARKY2_GYRORANGE_1000=2, HWSPARKY2_GYRORANGE_2000=3 }  __attribute__((packed)) HwSparky2GyroRangeOptions;
// Field AccelRange information
/* Enumeration options for field AccelRange */
typedef enum { HWSPARKY2_ACCELRANGE_2G=0, HWSPARKY2_ACCELRANGE_4G=1, HWSPARKY2_ACCELRANGE_8G=2, HWSPARKY2_ACCELRANGE_16G=3 }  __attribute__((packed)) HwSparky2AccelRangeOptions;
// Field MPU9250Rate information
/* Enumeration options for field MPU9250Rate */
typedef enum { HWSPARKY2_MPU9250RATE_200=0, HWSPARKY2_MPU9250RATE_333=1, HWSPARKY2_MPU9250RATE_500=2, HWSPARKY2_MPU9250RATE_666=3, HWSPARKY2_MPU9250RATE_1000=4, HWSPARKY2_MPU9250RATE_2000=5, HWSPARKY2_MPU9250RATE_4000=6, HWSPARKY2_MPU9250RATE_8000=7 }  __attribute__((packed)) HwSparky2MPU9250RateOptions;
// Field MPU9250DLPF information
/* Enumeration options for field MPU9250DLPF */
typedef enum { HWSPARKY2_MPU9250DLPF_256=0, HWSPARKY2_MPU9250DLPF_188=1, HWSPARKY2_MPU9250DLPF_98=2, HWSPARKY2_MPU9250DLPF_42=3, HWSPARKY2_MPU9250DLPF_20=4, HWSPARKY2_MPU9250DLPF_10=5, HWSPARKY2_MPU9250DLPF_5=6 }  __attribute__((packed)) HwSparky2MPU9250DLPFOptions;


// set/Get functions
extern void HwSparky2RcvrPortSet( uint8_t *NewRcvrPort );
extern void HwSparky2RcvrPortGet( uint8_t *NewRcvrPort );
extern void HwSparky2MainPortSet( uint8_t *NewMainPort );
extern void HwSparky2MainPortGet( uint8_t *NewMainPort );
extern void HwSparky2FlexiPortSet( uint8_t *NewFlexiPort );
extern void HwSparky2FlexiPortGet( uint8_t *NewFlexiPort );
extern void HwSparky2RadioPortSet( uint8_t *NewRadioPort );
extern void HwSparky2RadioPortGet( uint8_t *NewRadioPort );
extern void HwSparky2USB_HIDPortSet( uint8_t *NewUSB_HIDPort );
extern void HwSparky2USB_HIDPortGet( uint8_t *NewUSB_HIDPort );
extern void HwSparky2USB_VCPPortSet( uint8_t *NewUSB_VCPPort );
extern void HwSparky2USB_VCPPortGet( uint8_t *NewUSB_VCPPort );
extern void HwSparky2DSMxBindSet( uint8_t *NewDSMxBind );
extern void HwSparky2DSMxBindGet( uint8_t *NewDSMxBind );
extern void HwSparky2GyroRangeSet( uint8_t *NewGyroRange );
extern void HwSparky2GyroRangeGet( uint8_t *NewGyroRange );
extern void HwSparky2AccelRangeSet( uint8_t *NewAccelRange );
extern void HwSparky2AccelRangeGet( uint8_t *NewAccelRange );
extern void HwSparky2MPU9250RateSet( uint8_t *NewMPU9250Rate );
extern void HwSparky2MPU9250RateGet( uint8_t *NewMPU9250Rate );
extern void HwSparky2MPU9250DLPFSet( uint8_t *NewMPU9250DLPF );
extern void HwSparky2MPU9250DLPFGet( uint8_t *NewMPU9250DLPF );


#endif // HWSPARKY2_H

/**
 * @}
 * @}
 */
