/**
 ******************************************************************************
 * @addtogroup UAVObjects UAVObject set for this firmware
 * @{
 * @addtogroup HwSparky2 HwSparky2
 * @brief Selection of optional hardware configurations.
 *
 *
 * @file       hwsparky2.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @author     Tau Labs, http://taulabs.org, Copyright (C) 2012-2015
 * @brief      Include files for the HwSparky2 object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: hwsparky2.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef HWSPARKY2_H
#define HWSPARKY2_H

#include "pios_queue.h"
#include "uavoversion.h"

#include <hwshared.h>


// Object constants
#define HWSPARKY2_OBJID 0x35169E38
#define HWSPARKY2_ISSINGLEINST 1
#define HWSPARKY2_ISSETTINGS 1
#define HWSPARKY2_NUMBYTES 25

// Generic interface functions
int32_t HwSparky2Initialize();
UAVObjHandle HwSparky2Handle();
void HwSparky2SetDefaults(UAVObjHandle obj, uint16_t instId);

// Object data
typedef struct {
    uint32_t CoordID;
    uint8_t RcvrPort;
    uint8_t MainPort;
    uint8_t FlexiPort;
    uint8_t USB_HIDPort;
    uint8_t USB_VCPPort;
    uint8_t DSMxMode;
    uint8_t Radio;
    uint8_t MaxRfSpeed;
    uint8_t MaxRfPower;
    uint8_t RfBand;
    uint8_t MinChannel;
    uint8_t MaxChannel;
    uint8_t GyroRange;
    uint8_t AccelRange;
    uint8_t MPU9250Rate;
    uint8_t MPU9250GyroLPF;
    uint8_t MPU9250AccelLPF;
    uint8_t VTX_Ch;
    uint8_t Magnetometer;
    uint8_t ExtMagOrientation;
    uint8_t AdcDac;

} __attribute__((packed)) __attribute__((aligned(4))) HwSparky2Data;

// Typesafe Object access functions
/**
 * @function HwSparky2Get(dataOut)
 * @brief Populate a HwSparky2Data object
 * @param[out] dataOut 
 */
static inline int32_t HwSparky2Get(HwSparky2Data *dataOut) { return UAVObjGetData(HwSparky2Handle(), dataOut); }

static inline int32_t HwSparky2Set(const HwSparky2Data *dataIn) { return UAVObjSetData(HwSparky2Handle(), dataIn); }

static inline int32_t HwSparky2InstGet(uint16_t instId, HwSparky2Data *dataOut) { return UAVObjGetInstanceData(HwSparky2Handle(), instId, dataOut); }

static inline int32_t HwSparky2InstSet(uint16_t instId, const HwSparky2Data *dataIn) { return UAVObjSetInstanceData(HwSparky2Handle(), instId, dataIn); }

static inline int32_t HwSparky2ConnectQueue(struct pios_queue *queue) { return UAVObjConnectQueue(HwSparky2Handle(), queue, EV_MASK_ALL_UPDATES); }

static inline int32_t HwSparky2ConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(HwSparky2Handle(), cb, EV_MASK_ALL_UPDATES); }

static inline uint16_t HwSparky2CreateInstance() { return UAVObjCreateInstance(HwSparky2Handle(), &HwSparky2SetDefaults); }

static inline void HwSparky2RequestUpdate() { UAVObjRequestUpdate(HwSparky2Handle()); }

static inline void HwSparky2RequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(HwSparky2Handle(), instId); }

static inline void HwSparky2Updated() { UAVObjUpdated(HwSparky2Handle()); }

static inline void HwSparky2InstUpdated(uint16_t instId) { UAVObjInstanceUpdated(HwSparky2Handle(), instId); }

static inline int32_t HwSparky2GetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(HwSparky2Handle(), dataOut); }

static inline int32_t HwSparky2SetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(HwSparky2Handle(), dataIn); }

static inline int8_t HwSparky2ReadOnly() { return UAVObjReadOnly(HwSparky2Handle()); }

static inline uint16_t HwSparky2GetNumInstances(){ return UAVObjGetNumInstances(HwSparky2Handle()); }

static inline uint32_t HwSparky2GetNumBytes(){ return UAVObjGetNumBytes(HwSparky2Handle()); }

// Field information
// Field CoordID information
// Field RcvrPort information
/* Enumeration options for field RcvrPort */
typedef enum { HWSPARKY2_RCVRPORT_DISABLED=HWSHARED_PORTTYPES_DISABLED, HWSPARKY2_RCVRPORT_PPM=HWSHARED_PORTTYPES_PPM, HWSPARKY2_RCVRPORT_SBUS=HWSHARED_PORTTYPES_SBUS, HWSPARKY2_RCVRPORT_DSM=HWSHARED_PORTTYPES_DSM, HWSPARKY2_RCVRPORT_HOTTSUMD=HWSHARED_PORTTYPES_HOTTSUMD, HWSPARKY2_RCVRPORT_HOTTSUMH=HWSHARED_PORTTYPES_HOTTSUMH, HWSPARKY2_RCVRPORT_DONTSWITCHONCHILDENUMS=255 }  __attribute__((packed)) HwSparky2RcvrPortOptions;
/* Max value of any option in topmost parent PortTypes of field RcvrPort */
#define HWSPARKY2_RCVRPORT_GLOBAL_MAXOPTVAL 20
/* Max value of any option in field RcvrPort */
#define HWSPARKY2_RCVRPORT_MAXOPTVAL 19
/* Ensure field RcvrPort contains valid data */
static inline bool HwSparky2RcvrPortIsValid( uint8_t CurrentRcvrPort ) { return CurrentRcvrPort < HWSPARKY2_RCVRPORT_MAXOPTVAL; }
// Field MainPort information
/* Enumeration options for field MainPort */
typedef enum { HWSPARKY2_MAINPORT_DISABLED=HWSHARED_PORTTYPES_DISABLED, HWSPARKY2_MAINPORT_TELEMETRY=HWSHARED_PORTTYPES_TELEMETRY, HWSPARKY2_MAINPORT_GPS=HWSHARED_PORTTYPES_GPS, HWSPARKY2_MAINPORT_DSM=HWSHARED_PORTTYPES_DSM, HWSPARKY2_MAINPORT_DEBUGCONSOLE=HWSHARED_PORTTYPES_DEBUGCONSOLE, HWSPARKY2_MAINPORT_COMBRIDGE=HWSHARED_PORTTYPES_COMBRIDGE, HWSPARKY2_MAINPORT_MAVLINKTX=HWSHARED_PORTTYPES_MAVLINKTX, HWSPARKY2_MAINPORT_MAVLINKTX_GPS_RX=HWSHARED_PORTTYPES_MAVLINKTX_GPS_RX, HWSPARKY2_MAINPORT_MSP=HWSHARED_PORTTYPES_MSP, HWSPARKY2_MAINPORT_HOTTSUMD=HWSHARED_PORTTYPES_HOTTSUMD, HWSPARKY2_MAINPORT_HOTTSUMH=HWSHARED_PORTTYPES_HOTTSUMH, HWSPARKY2_MAINPORT_HOTTTELEMETRY=HWSHARED_PORTTYPES_HOTTTELEMETRY, HWSPARKY2_MAINPORT_FRSKYSENSORHUB=HWSHARED_PORTTYPES_FRSKYSENSORHUB, HWSPARKY2_MAINPORT_FRSKYSPORTTELEMETRY=HWSHARED_PORTTYPES_FRSKYSPORTTELEMETRY, HWSPARKY2_MAINPORT_LIGHTTELEMETRYTX=HWSHARED_PORTTYPES_LIGHTTELEMETRYTX, HWSPARKY2_MAINPORT_PICOC=HWSHARED_PORTTYPES_PICOC, HWSPARKY2_MAINPORT_OPENLOG=HWSHARED_PORTTYPES_OPENLOG, HWSPARKY2_MAINPORT_DONTSWITCHONCHILDENUMS=255 }  __attribute__((packed)) HwSparky2MainPortOptions;
/* Max value of any option in topmost parent PortTypes of field MainPort */
#define HWSPARKY2_MAINPORT_GLOBAL_MAXOPTVAL 20
/* Max value of any option in field MainPort */
#define HWSPARKY2_MAINPORT_MAXOPTVAL 17
/* Ensure field MainPort contains valid data */
static inline bool HwSparky2MainPortIsValid( uint8_t CurrentMainPort ) { return CurrentMainPort < HWSPARKY2_MAINPORT_MAXOPTVAL; }
// Field FlexiPort information
/* Enumeration options for field FlexiPort */
typedef enum { HWSPARKY2_FLEXIPORT_DISABLED=HWSHARED_PORTTYPES_DISABLED, HWSPARKY2_FLEXIPORT_TELEMETRY=HWSHARED_PORTTYPES_TELEMETRY, HWSPARKY2_FLEXIPORT_GPS=HWSHARED_PORTTYPES_GPS, HWSPARKY2_FLEXIPORT_I2C=HWSHARED_PORTTYPES_I2C, HWSPARKY2_FLEXIPORT_DSM=HWSHARED_PORTTYPES_DSM, HWSPARKY2_FLEXIPORT_DEBUGCONSOLE=HWSHARED_PORTTYPES_DEBUGCONSOLE, HWSPARKY2_FLEXIPORT_COMBRIDGE=HWSHARED_PORTTYPES_COMBRIDGE, HWSPARKY2_FLEXIPORT_MAVLINKTX=HWSHARED_PORTTYPES_MAVLINKTX, HWSPARKY2_FLEXIPORT_MAVLINKTX_GPS_RX=HWSHARED_PORTTYPES_MAVLINKTX_GPS_RX, HWSPARKY2_FLEXIPORT_MSP=HWSHARED_PORTTYPES_MSP, HWSPARKY2_FLEXIPORT_HOTTSUMD=HWSHARED_PORTTYPES_HOTTSUMD, HWSPARKY2_FLEXIPORT_HOTTSUMH=HWSHARED_PORTTYPES_HOTTSUMH, HWSPARKY2_FLEXIPORT_HOTTTELEMETRY=HWSHARED_PORTTYPES_HOTTTELEMETRY, HWSPARKY2_FLEXIPORT_FRSKYSENSORHUB=HWSHARED_PORTTYPES_FRSKYSENSORHUB, HWSPARKY2_FLEXIPORT_FRSKYSPORTTELEMETRY=HWSHARED_PORTTYPES_FRSKYSPORTTELEMETRY, HWSPARKY2_FLEXIPORT_LIGHTTELEMETRYTX=HWSHARED_PORTTYPES_LIGHTTELEMETRYTX, HWSPARKY2_FLEXIPORT_PICOC=HWSHARED_PORTTYPES_PICOC, HWSPARKY2_FLEXIPORT_OPENLOG=HWSHARED_PORTTYPES_OPENLOG, HWSPARKY2_FLEXIPORT_DONTSWITCHONCHILDENUMS=255 }  __attribute__((packed)) HwSparky2FlexiPortOptions;
/* Max value of any option in topmost parent PortTypes of field FlexiPort */
#define HWSPARKY2_FLEXIPORT_GLOBAL_MAXOPTVAL 20
/* Max value of any option in field FlexiPort */
#define HWSPARKY2_FLEXIPORT_MAXOPTVAL 18
/* Ensure field FlexiPort contains valid data */
static inline bool HwSparky2FlexiPortIsValid( uint8_t CurrentFlexiPort ) { return CurrentFlexiPort < HWSPARKY2_FLEXIPORT_MAXOPTVAL; }
// Field USB_HIDPort information
/* Enumeration options for field USB_HIDPort */
typedef enum { HWSPARKY2_USB_HIDPORT_USBTELEMETRY=HWSHARED_USB_HIDPORT_USBTELEMETRY, HWSPARKY2_USB_HIDPORT_DISABLED=HWSHARED_USB_HIDPORT_DISABLED, HWSPARKY2_USB_HIDPORT_DONTSWITCHONCHILDENUMS=255 }  __attribute__((packed)) HwSparky2USB_HIDPortOptions;
/* Max value of any option in topmost parent USB_HIDPort of field USB_HIDPort */
#define HWSPARKY2_USB_HIDPORT_GLOBAL_MAXOPTVAL 1
/* Max value of any option in field USB_HIDPort */
#define HWSPARKY2_USB_HIDPORT_MAXOPTVAL 1
/* Ensure field USB_HIDPort contains valid data */
static inline bool HwSparky2USB_HIDPortIsValid( uint8_t CurrentUSB_HIDPort ) { return CurrentUSB_HIDPort < HWSPARKY2_USB_HIDPORT_MAXOPTVAL; }
// Field USB_VCPPort information
/* Enumeration options for field USB_VCPPort */
typedef enum { HWSPARKY2_USB_VCPPORT_USBTELEMETRY=HWSHARED_USB_VCPPORT_USBTELEMETRY, HWSPARKY2_USB_VCPPORT_COMBRIDGE=HWSHARED_USB_VCPPORT_COMBRIDGE, HWSPARKY2_USB_VCPPORT_DEBUGCONSOLE=HWSHARED_USB_VCPPORT_DEBUGCONSOLE, HWSPARKY2_USB_VCPPORT_PICOC=HWSHARED_USB_VCPPORT_PICOC, HWSPARKY2_USB_VCPPORT_DISABLED=HWSHARED_USB_VCPPORT_DISABLED, HWSPARKY2_USB_VCPPORT_DONTSWITCHONCHILDENUMS=255 }  __attribute__((packed)) HwSparky2USB_VCPPortOptions;
/* Max value of any option in topmost parent USB_VCPPort of field USB_VCPPort */
#define HWSPARKY2_USB_VCPPORT_GLOBAL_MAXOPTVAL 4
/* Max value of any option in field USB_VCPPort */
#define HWSPARKY2_USB_VCPPORT_MAXOPTVAL 4
/* Ensure field USB_VCPPort contains valid data */
static inline bool HwSparky2USB_VCPPortIsValid( uint8_t CurrentUSB_VCPPort ) { return CurrentUSB_VCPPort < HWSPARKY2_USB_VCPPORT_MAXOPTVAL; }
// Field DSMxMode information
/* Enumeration options for field DSMxMode */
typedef enum { HWSPARKY2_DSMXMODE_AUTODETECT=HWSHARED_DSMXMODE_AUTODETECT, HWSPARKY2_DSMXMODE_FORCE10BIT=HWSHARED_DSMXMODE_FORCE10BIT, HWSPARKY2_DSMXMODE_FORCE11BIT=HWSHARED_DSMXMODE_FORCE11BIT, HWSPARKY2_DSMXMODE_BIND3PULSES=HWSHARED_DSMXMODE_BIND3PULSES, HWSPARKY2_DSMXMODE_BIND4PULSES=HWSHARED_DSMXMODE_BIND4PULSES, HWSPARKY2_DSMXMODE_BIND5PULSES=HWSHARED_DSMXMODE_BIND5PULSES, HWSPARKY2_DSMXMODE_BIND6PULSES=HWSHARED_DSMXMODE_BIND6PULSES, HWSPARKY2_DSMXMODE_BIND7PULSES=HWSHARED_DSMXMODE_BIND7PULSES, HWSPARKY2_DSMXMODE_BIND8PULSES=HWSHARED_DSMXMODE_BIND8PULSES, HWSPARKY2_DSMXMODE_BIND9PULSES=HWSHARED_DSMXMODE_BIND9PULSES, HWSPARKY2_DSMXMODE_BIND10PULSES=HWSHARED_DSMXMODE_BIND10PULSES, HWSPARKY2_DSMXMODE_DONTSWITCHONCHILDENUMS=255 }  __attribute__((packed)) HwSparky2DSMxModeOptions;
/* Max value of any option in topmost parent DSMxMode of field DSMxMode */
#define HWSPARKY2_DSMXMODE_GLOBAL_MAXOPTVAL 10
/* Max value of any option in field DSMxMode */
#define HWSPARKY2_DSMXMODE_MAXOPTVAL 10
/* Ensure field DSMxMode contains valid data */
static inline bool HwSparky2DSMxModeIsValid( uint8_t CurrentDSMxMode ) { return CurrentDSMxMode < HWSPARKY2_DSMXMODE_MAXOPTVAL; }
// Field Radio information
/* Enumeration options for field Radio */
typedef enum { HWSPARKY2_RADIO_DISABLED=HWSHARED_RADIOPORT_DISABLED, HWSPARKY2_RADIO_TELEM=HWSHARED_RADIOPORT_TELEM, HWSPARKY2_RADIO_TELEMPPM=HWSHARED_RADIOPORT_TELEMPPM, HWSPARKY2_RADIO_PPM=HWSHARED_RADIOPORT_PPM, HWSPARKY2_RADIO_OPENLRS=HWSHARED_RADIOPORT_OPENLRS, HWSPARKY2_RADIO_DONTSWITCHONCHILDENUMS=255 }  __attribute__((packed)) HwSparky2RadioOptions;
/* Max value of any option in topmost parent RadioPort of field Radio */
#define HWSPARKY2_RADIO_GLOBAL_MAXOPTVAL 4
/* Max value of any option in field Radio */
#define HWSPARKY2_RADIO_MAXOPTVAL 4
/* Ensure field Radio contains valid data */
static inline bool HwSparky2RadioIsValid( uint8_t CurrentRadio ) { return CurrentRadio < HWSPARKY2_RADIO_MAXOPTVAL; }
// Field MaxRfSpeed information
/* Enumeration options for field MaxRfSpeed */
typedef enum { HWSPARKY2_MAXRFSPEED_9600=HWSHARED_MAXRFSPEED_9600, HWSPARKY2_MAXRFSPEED_19200=HWSHARED_MAXRFSPEED_19200, HWSPARKY2_MAXRFSPEED_32000=HWSHARED_MAXRFSPEED_32000, HWSPARKY2_MAXRFSPEED_64000=HWSHARED_MAXRFSPEED_64000, HWSPARKY2_MAXRFSPEED_100000=HWSHARED_MAXRFSPEED_100000, HWSPARKY2_MAXRFSPEED_192000=HWSHARED_MAXRFSPEED_192000, HWSPARKY2_MAXRFSPEED_DONTSWITCHONCHILDENUMS=255 }  __attribute__((packed)) HwSparky2MaxRfSpeedOptions;
/* Max value of any option in topmost parent MaxRfSpeed of field MaxRfSpeed */
#define HWSPARKY2_MAXRFSPEED_GLOBAL_MAXOPTVAL 5
/* Max value of any option in field MaxRfSpeed */
#define HWSPARKY2_MAXRFSPEED_MAXOPTVAL 5
/* Ensure field MaxRfSpeed contains valid data */
static inline bool HwSparky2MaxRfSpeedIsValid( uint8_t CurrentMaxRfSpeed ) { return CurrentMaxRfSpeed < HWSPARKY2_MAXRFSPEED_MAXOPTVAL; }
// Field MaxRfPower information
/* Enumeration options for field MaxRfPower */
typedef enum { HWSPARKY2_MAXRFPOWER_0=HWSHARED_MAXRFPOWER_0, HWSPARKY2_MAXRFPOWER_125=HWSHARED_MAXRFPOWER_125, HWSPARKY2_MAXRFPOWER_16=HWSHARED_MAXRFPOWER_16, HWSPARKY2_MAXRFPOWER_316=HWSHARED_MAXRFPOWER_316, HWSPARKY2_MAXRFPOWER_63=HWSHARED_MAXRFPOWER_63, HWSPARKY2_MAXRFPOWER_126=HWSHARED_MAXRFPOWER_126, HWSPARKY2_MAXRFPOWER_25=HWSHARED_MAXRFPOWER_25, HWSPARKY2_MAXRFPOWER_50=HWSHARED_MAXRFPOWER_50, HWSPARKY2_MAXRFPOWER_100=HWSHARED_MAXRFPOWER_100, HWSPARKY2_MAXRFPOWER_DONTSWITCHONCHILDENUMS=255 }  __attribute__((packed)) HwSparky2MaxRfPowerOptions;
/* Max value of any option in topmost parent MaxRfPower of field MaxRfPower */
#define HWSPARKY2_MAXRFPOWER_GLOBAL_MAXOPTVAL 8
/* Max value of any option in field MaxRfPower */
#define HWSPARKY2_MAXRFPOWER_MAXOPTVAL 8
/* Ensure field MaxRfPower contains valid data */
static inline bool HwSparky2MaxRfPowerIsValid( uint8_t CurrentMaxRfPower ) { return CurrentMaxRfPower < HWSPARKY2_MAXRFPOWER_MAXOPTVAL; }
// Field RfBand information
/* Enumeration options for field RfBand */
typedef enum { HWSPARKY2_RFBAND_BOARDDEFAULT=HWSHARED_RFBAND_BOARDDEFAULT, HWSPARKY2_RFBAND_433=HWSHARED_RFBAND_433, HWSPARKY2_RFBAND_868=HWSHARED_RFBAND_868, HWSPARKY2_RFBAND_915=HWSHARED_RFBAND_915, HWSPARKY2_RFBAND_DONTSWITCHONCHILDENUMS=255 }  __attribute__((packed)) HwSparky2RfBandOptions;
/* Max value of any option in topmost parent RfBand of field RfBand */
#define HWSPARKY2_RFBAND_GLOBAL_MAXOPTVAL 3
/* Max value of any option in field RfBand */
#define HWSPARKY2_RFBAND_MAXOPTVAL 3
/* Ensure field RfBand contains valid data */
static inline bool HwSparky2RfBandIsValid( uint8_t CurrentRfBand ) { return CurrentRfBand < HWSPARKY2_RFBAND_MAXOPTVAL; }
// Field MinChannel information
// Field MaxChannel information
// Field GyroRange information
/* Enumeration options for field GyroRange */
typedef enum { HWSPARKY2_GYRORANGE_250=0, HWSPARKY2_GYRORANGE_500=1, HWSPARKY2_GYRORANGE_1000=2, HWSPARKY2_GYRORANGE_2000=3 }  __attribute__((packed)) HwSparky2GyroRangeOptions;
/* Max value of any option in topmost parent GyroRange of field GyroRange */
#define HWSPARKY2_GYRORANGE_GLOBAL_MAXOPTVAL 3
/* Max value of any option in field GyroRange */
#define HWSPARKY2_GYRORANGE_MAXOPTVAL 3
/* Ensure field GyroRange contains valid data */
static inline bool HwSparky2GyroRangeIsValid( uint8_t CurrentGyroRange ) { return CurrentGyroRange < HWSPARKY2_GYRORANGE_MAXOPTVAL; }
// Field AccelRange information
/* Enumeration options for field AccelRange */
typedef enum { HWSPARKY2_ACCELRANGE_2G=0, HWSPARKY2_ACCELRANGE_4G=1, HWSPARKY2_ACCELRANGE_8G=2, HWSPARKY2_ACCELRANGE_16G=3 }  __attribute__((packed)) HwSparky2AccelRangeOptions;
/* Max value of any option in topmost parent AccelRange of field AccelRange */
#define HWSPARKY2_ACCELRANGE_GLOBAL_MAXOPTVAL 3
/* Max value of any option in field AccelRange */
#define HWSPARKY2_ACCELRANGE_MAXOPTVAL 3
/* Ensure field AccelRange contains valid data */
static inline bool HwSparky2AccelRangeIsValid( uint8_t CurrentAccelRange ) { return CurrentAccelRange < HWSPARKY2_ACCELRANGE_MAXOPTVAL; }
// Field MPU9250Rate information
/* Enumeration options for field MPU9250Rate */
typedef enum { HWSPARKY2_MPU9250RATE_200=0, HWSPARKY2_MPU9250RATE_250=1, HWSPARKY2_MPU9250RATE_333=2, HWSPARKY2_MPU9250RATE_500=3, HWSPARKY2_MPU9250RATE_1000=4 }  __attribute__((packed)) HwSparky2MPU9250RateOptions;
/* Max value of any option in topmost parent MPU9250Rate of field MPU9250Rate */
#define HWSPARKY2_MPU9250RATE_GLOBAL_MAXOPTVAL 4
/* Max value of any option in field MPU9250Rate */
#define HWSPARKY2_MPU9250RATE_MAXOPTVAL 4
/* Ensure field MPU9250Rate contains valid data */
static inline bool HwSparky2MPU9250RateIsValid( uint8_t CurrentMPU9250Rate ) { return CurrentMPU9250Rate < HWSPARKY2_MPU9250RATE_MAXOPTVAL; }
// Field MPU9250GyroLPF information
/* Enumeration options for field MPU9250GyroLPF */
typedef enum { HWSPARKY2_MPU9250GYROLPF_184=0, HWSPARKY2_MPU9250GYROLPF_92=1, HWSPARKY2_MPU9250GYROLPF_41=2, HWSPARKY2_MPU9250GYROLPF_20=3, HWSPARKY2_MPU9250GYROLPF_10=4, HWSPARKY2_MPU9250GYROLPF_5=5 }  __attribute__((packed)) HwSparky2MPU9250GyroLPFOptions;
/* Max value of any option in topmost parent MPU9250GyroLPF of field MPU9250GyroLPF */
#define HWSPARKY2_MPU9250GYROLPF_GLOBAL_MAXOPTVAL 5
/* Max value of any option in field MPU9250GyroLPF */
#define HWSPARKY2_MPU9250GYROLPF_MAXOPTVAL 5
/* Ensure field MPU9250GyroLPF contains valid data */
static inline bool HwSparky2MPU9250GyroLPFIsValid( uint8_t CurrentMPU9250GyroLPF ) { return CurrentMPU9250GyroLPF < HWSPARKY2_MPU9250GYROLPF_MAXOPTVAL; }
// Field MPU9250AccelLPF information
/* Enumeration options for field MPU9250AccelLPF */
typedef enum { HWSPARKY2_MPU9250ACCELLPF_460=0, HWSPARKY2_MPU9250ACCELLPF_184=1, HWSPARKY2_MPU9250ACCELLPF_92=2, HWSPARKY2_MPU9250ACCELLPF_41=3, HWSPARKY2_MPU9250ACCELLPF_20=4, HWSPARKY2_MPU9250ACCELLPF_10=5, HWSPARKY2_MPU9250ACCELLPF_5=6 }  __attribute__((packed)) HwSparky2MPU9250AccelLPFOptions;
/* Max value of any option in topmost parent MPU9250AccelLPF of field MPU9250AccelLPF */
#define HWSPARKY2_MPU9250ACCELLPF_GLOBAL_MAXOPTVAL 6
/* Max value of any option in field MPU9250AccelLPF */
#define HWSPARKY2_MPU9250ACCELLPF_MAXOPTVAL 6
/* Ensure field MPU9250AccelLPF contains valid data */
static inline bool HwSparky2MPU9250AccelLPFIsValid( uint8_t CurrentMPU9250AccelLPF ) { return CurrentMPU9250AccelLPF < HWSPARKY2_MPU9250ACCELLPF_MAXOPTVAL; }
// Field VTX_Ch information
/* Enumeration options for field VTX_Ch */
typedef enum { HWSPARKY2_VTX_CH_BOSCAMACH15725=0, HWSPARKY2_VTX_CH_BOSCAMACH25745=1, HWSPARKY2_VTX_CH_BOSCAMACH35765=2, HWSPARKY2_VTX_CH_BOSCAMACH45785=3, HWSPARKY2_VTX_CH_BOSCAMACH55805=4, HWSPARKY2_VTX_CH_BOSCAMACH65825=5, HWSPARKY2_VTX_CH_BOSCAMACH75845=6, HWSPARKY2_VTX_CH_BOSCAMACH85865=7, HWSPARKY2_VTX_CH_BOSCAMBCH15733=8, HWSPARKY2_VTX_CH_BOSCAMBCH25752=9, HWSPARKY2_VTX_CH_BOSCAMBCH35771=10, HWSPARKY2_VTX_CH_BOSCAMBCH45790=11, HWSPARKY2_VTX_CH_BOSCAMBCH55809=12, HWSPARKY2_VTX_CH_BOSCAMBCH65828=13, HWSPARKY2_VTX_CH_BOSCAMBCH75847=14, HWSPARKY2_VTX_CH_BOSCAMBCH85866=15, HWSPARKY2_VTX_CH_BOSCAMECH15705=16, HWSPARKY2_VTX_CH_BOSCAMECH25685=17, HWSPARKY2_VTX_CH_BOSCAMECH35665=18, HWSPARKY2_VTX_CH_BOSCAMECH45645=19, HWSPARKY2_VTX_CH_BOSCAMECH55885=20, HWSPARKY2_VTX_CH_BOSCAMECH65905=21, HWSPARKY2_VTX_CH_BOSCAMECH75925=22, HWSPARKY2_VTX_CH_BOSCAMECH85945=23, HWSPARKY2_VTX_CH_AIRWAVECH15740=24, HWSPARKY2_VTX_CH_AIRWAVECH25760=25, HWSPARKY2_VTX_CH_AIRWAVECH35780=26, HWSPARKY2_VTX_CH_AIRWAVECH45800=27, HWSPARKY2_VTX_CH_AIRWAVECH55820=28, HWSPARKY2_VTX_CH_AIRWAVECH65840=29, HWSPARKY2_VTX_CH_AIRWAVECH75860=30, HWSPARKY2_VTX_CH_AIRWAVECH85860=31 }  __attribute__((packed)) HwSparky2VTX_ChOptions;
/* Max value of any option in topmost parent VTX_Ch of field VTX_Ch */
#define HWSPARKY2_VTX_CH_GLOBAL_MAXOPTVAL 31
/* Max value of any option in field VTX_Ch */
#define HWSPARKY2_VTX_CH_MAXOPTVAL 31
/* Ensure field VTX_Ch contains valid data */
static inline bool HwSparky2VTX_ChIsValid( uint8_t CurrentVTX_Ch ) { return CurrentVTX_Ch < HWSPARKY2_VTX_CH_MAXOPTVAL; }
// Field Magnetometer information
/* Enumeration options for field Magnetometer */
typedef enum { HWSPARKY2_MAGNETOMETER_INTERNAL=0, HWSPARKY2_MAGNETOMETER_EXTERNALI2CFLEXIPORT=1, HWSPARKY2_MAGNETOMETER_EXTERNALAUXI2C=2 }  __attribute__((packed)) HwSparky2MagnetometerOptions;
/* Max value of any option in topmost parent Magnetometer of field Magnetometer */
#define HWSPARKY2_MAGNETOMETER_GLOBAL_MAXOPTVAL 2
/* Max value of any option in field Magnetometer */
#define HWSPARKY2_MAGNETOMETER_MAXOPTVAL 2
/* Ensure field Magnetometer contains valid data */
static inline bool HwSparky2MagnetometerIsValid( uint8_t CurrentMagnetometer ) { return CurrentMagnetometer < HWSPARKY2_MAGNETOMETER_MAXOPTVAL; }
// Field ExtMagOrientation information
/* Enumeration options for field ExtMagOrientation */
typedef enum { HWSPARKY2_EXTMAGORIENTATION_TOP0DEGCW=HWSHARED_MAGORIENTATION_TOP0DEGCW, HWSPARKY2_EXTMAGORIENTATION_TOP90DEGCW=HWSHARED_MAGORIENTATION_TOP90DEGCW, HWSPARKY2_EXTMAGORIENTATION_TOP180DEGCW=HWSHARED_MAGORIENTATION_TOP180DEGCW, HWSPARKY2_EXTMAGORIENTATION_TOP270DEGCW=HWSHARED_MAGORIENTATION_TOP270DEGCW, HWSPARKY2_EXTMAGORIENTATION_BOTTOM0DEGCW=HWSHARED_MAGORIENTATION_BOTTOM0DEGCW, HWSPARKY2_EXTMAGORIENTATION_BOTTOM90DEGCW=HWSHARED_MAGORIENTATION_BOTTOM90DEGCW, HWSPARKY2_EXTMAGORIENTATION_BOTTOM180DEGCW=HWSHARED_MAGORIENTATION_BOTTOM180DEGCW, HWSPARKY2_EXTMAGORIENTATION_BOTTOM270DEGCW=HWSHARED_MAGORIENTATION_BOTTOM270DEGCW, HWSPARKY2_EXTMAGORIENTATION_DONTSWITCHONCHILDENUMS=255 }  __attribute__((packed)) HwSparky2ExtMagOrientationOptions;
/* Max value of any option in topmost parent MagOrientation of field ExtMagOrientation */
#define HWSPARKY2_EXTMAGORIENTATION_GLOBAL_MAXOPTVAL 7
/* Max value of any option in field ExtMagOrientation */
#define HWSPARKY2_EXTMAGORIENTATION_MAXOPTVAL 7
/* Ensure field ExtMagOrientation contains valid data */
static inline bool HwSparky2ExtMagOrientationIsValid( uint8_t CurrentExtMagOrientation ) { return CurrentExtMagOrientation < HWSPARKY2_EXTMAGORIENTATION_MAXOPTVAL; }
// Field AdcDac information
/* Enumeration options for field AdcDac */
typedef enum { HWSPARKY2_ADCDAC_ADC=0, HWSPARKY2_ADCDAC_BEEP=1, HWSPARKY2_ADCDAC_FSKTELEM=2 }  __attribute__((packed)) HwSparky2AdcDacOptions;
/* Max value of any option in topmost parent AdcDac of field AdcDac */
#define HWSPARKY2_ADCDAC_GLOBAL_MAXOPTVAL 2
/* Max value of any option in field AdcDac */
#define HWSPARKY2_ADCDAC_MAXOPTVAL 2
/* Ensure field AdcDac contains valid data */
static inline bool HwSparky2AdcDacIsValid( uint8_t CurrentAdcDac ) { return CurrentAdcDac < HWSPARKY2_ADCDAC_MAXOPTVAL; }


// set/Get functions
extern void HwSparky2CoordIDSet( uint32_t *NewCoordID );
extern void HwSparky2CoordIDGet( uint32_t *NewCoordID );
extern void HwSparky2RcvrPortSet( uint8_t *NewRcvrPort );
extern void HwSparky2RcvrPortGet( uint8_t *NewRcvrPort );
extern void HwSparky2MainPortSet( uint8_t *NewMainPort );
extern void HwSparky2MainPortGet( uint8_t *NewMainPort );
extern void HwSparky2FlexiPortSet( uint8_t *NewFlexiPort );
extern void HwSparky2FlexiPortGet( uint8_t *NewFlexiPort );
extern void HwSparky2USB_HIDPortSet( uint8_t *NewUSB_HIDPort );
extern void HwSparky2USB_HIDPortGet( uint8_t *NewUSB_HIDPort );
extern void HwSparky2USB_VCPPortSet( uint8_t *NewUSB_VCPPort );
extern void HwSparky2USB_VCPPortGet( uint8_t *NewUSB_VCPPort );
extern void HwSparky2DSMxModeSet( uint8_t *NewDSMxMode );
extern void HwSparky2DSMxModeGet( uint8_t *NewDSMxMode );
extern void HwSparky2RadioSet( uint8_t *NewRadio );
extern void HwSparky2RadioGet( uint8_t *NewRadio );
extern void HwSparky2MaxRfSpeedSet( uint8_t *NewMaxRfSpeed );
extern void HwSparky2MaxRfSpeedGet( uint8_t *NewMaxRfSpeed );
extern void HwSparky2MaxRfPowerSet( uint8_t *NewMaxRfPower );
extern void HwSparky2MaxRfPowerGet( uint8_t *NewMaxRfPower );
extern void HwSparky2RfBandSet( uint8_t *NewRfBand );
extern void HwSparky2RfBandGet( uint8_t *NewRfBand );
extern void HwSparky2MinChannelSet( uint8_t *NewMinChannel );
extern void HwSparky2MinChannelGet( uint8_t *NewMinChannel );
extern void HwSparky2MaxChannelSet( uint8_t *NewMaxChannel );
extern void HwSparky2MaxChannelGet( uint8_t *NewMaxChannel );
extern void HwSparky2GyroRangeSet( uint8_t *NewGyroRange );
extern void HwSparky2GyroRangeGet( uint8_t *NewGyroRange );
extern void HwSparky2AccelRangeSet( uint8_t *NewAccelRange );
extern void HwSparky2AccelRangeGet( uint8_t *NewAccelRange );
extern void HwSparky2MPU9250RateSet( uint8_t *NewMPU9250Rate );
extern void HwSparky2MPU9250RateGet( uint8_t *NewMPU9250Rate );
extern void HwSparky2MPU9250GyroLPFSet( uint8_t *NewMPU9250GyroLPF );
extern void HwSparky2MPU9250GyroLPFGet( uint8_t *NewMPU9250GyroLPF );
extern void HwSparky2MPU9250AccelLPFSet( uint8_t *NewMPU9250AccelLPF );
extern void HwSparky2MPU9250AccelLPFGet( uint8_t *NewMPU9250AccelLPF );
extern void HwSparky2VTX_ChSet( uint8_t *NewVTX_Ch );
extern void HwSparky2VTX_ChGet( uint8_t *NewVTX_Ch );
extern void HwSparky2MagnetometerSet( uint8_t *NewMagnetometer );
extern void HwSparky2MagnetometerGet( uint8_t *NewMagnetometer );
extern void HwSparky2ExtMagOrientationSet( uint8_t *NewExtMagOrientation );
extern void HwSparky2ExtMagOrientationGet( uint8_t *NewExtMagOrientation );
extern void HwSparky2AdcDacSet( uint8_t *NewAdcDac );
extern void HwSparky2AdcDacGet( uint8_t *NewAdcDac );


#endif // HWSPARKY2_H

/**
 * @}
 * @}
 */
