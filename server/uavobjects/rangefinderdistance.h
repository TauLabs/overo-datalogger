/**
 ******************************************************************************
 * @addtogroup UAVObjects UAVObject set for this firmware
 * @{
 * @addtogroup RangefinderDistance RangefinderDistance
 * @brief The raw data from the rangefinder sensor.
 *
 *
 * @file       rangefinderdistance.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @author     Tau Labs, http://taulabs.org, Copyright (C) 2012-2015
 * @brief      Include files for the RangefinderDistance object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: rangefinderdistance.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef RANGEFINDERDISTANCE_H
#define RANGEFINDERDISTANCE_H

#include "pios_queue.h"
#include "uavoversion.h"



// Object constants
#define RANGEFINDERDISTANCE_OBJID 0x77F8CBAC
#define RANGEFINDERDISTANCE_ISSINGLEINST 1
#define RANGEFINDERDISTANCE_ISSETTINGS 0
#define RANGEFINDERDISTANCE_NUMBYTES 5

// Generic interface functions
int32_t RangefinderDistanceInitialize();
UAVObjHandle RangefinderDistanceHandle();
void RangefinderDistanceSetDefaults(UAVObjHandle obj, uint16_t instId);

// Object data
typedef struct {
    float Range;
    uint8_t RangingStatus;

} __attribute__((packed)) __attribute__((aligned(4))) RangefinderDistanceData;

// Typesafe Object access functions
/**
 * @function RangefinderDistanceGet(dataOut)
 * @brief Populate a RangefinderDistanceData object
 * @param[out] dataOut 
 */
static inline int32_t RangefinderDistanceGet(RangefinderDistanceData *dataOut) { return UAVObjGetData(RangefinderDistanceHandle(), dataOut); }

static inline int32_t RangefinderDistanceSet(const RangefinderDistanceData *dataIn) { return UAVObjSetData(RangefinderDistanceHandle(), dataIn); }

static inline int32_t RangefinderDistanceInstGet(uint16_t instId, RangefinderDistanceData *dataOut) { return UAVObjGetInstanceData(RangefinderDistanceHandle(), instId, dataOut); }

static inline int32_t RangefinderDistanceInstSet(uint16_t instId, const RangefinderDistanceData *dataIn) { return UAVObjSetInstanceData(RangefinderDistanceHandle(), instId, dataIn); }

static inline int32_t RangefinderDistanceConnectQueue(struct pios_queue *queue) { return UAVObjConnectQueue(RangefinderDistanceHandle(), queue, EV_MASK_ALL_UPDATES); }

static inline int32_t RangefinderDistanceConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(RangefinderDistanceHandle(), cb, EV_MASK_ALL_UPDATES); }

static inline uint16_t RangefinderDistanceCreateInstance() { return UAVObjCreateInstance(RangefinderDistanceHandle(), &RangefinderDistanceSetDefaults); }

static inline void RangefinderDistanceRequestUpdate() { UAVObjRequestUpdate(RangefinderDistanceHandle()); }

static inline void RangefinderDistanceRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(RangefinderDistanceHandle(), instId); }

static inline void RangefinderDistanceUpdated() { UAVObjUpdated(RangefinderDistanceHandle()); }

static inline void RangefinderDistanceInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(RangefinderDistanceHandle(), instId); }

static inline int32_t RangefinderDistanceGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(RangefinderDistanceHandle(), dataOut); }

static inline int32_t RangefinderDistanceSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(RangefinderDistanceHandle(), dataIn); }

static inline int8_t RangefinderDistanceReadOnly() { return UAVObjReadOnly(RangefinderDistanceHandle()); }

static inline uint16_t RangefinderDistanceGetNumInstances(){ return UAVObjGetNumInstances(RangefinderDistanceHandle()); }

static inline uint32_t RangefinderDistanceGetNumBytes(){ return UAVObjGetNumBytes(RangefinderDistanceHandle()); }

// Field information
// Field Range information
// Field RangingStatus information
/* Enumeration options for field RangingStatus */
typedef enum { RANGEFINDERDISTANCE_RANGINGSTATUS_OUTOFRANGE=0, RANGEFINDERDISTANCE_RANGINGSTATUS_INRANGE=1 }  __attribute__((packed)) RangefinderDistanceRangingStatusOptions;
/* Max value of any option in topmost parent RangingStatus of field RangingStatus */
#define RANGEFINDERDISTANCE_RANGINGSTATUS_GLOBAL_MAXOPTVAL 1
/* Max value of any option in field RangingStatus */
#define RANGEFINDERDISTANCE_RANGINGSTATUS_MAXOPTVAL 1
/* Ensure field RangingStatus contains valid data */
static inline bool RangefinderDistanceRangingStatusIsValid( uint8_t CurrentRangingStatus ) { return CurrentRangingStatus < RANGEFINDERDISTANCE_RANGINGSTATUS_MAXOPTVAL; }


// set/Get functions
extern void RangefinderDistanceRangeSet( float *NewRange );
extern void RangefinderDistanceRangeGet( float *NewRange );
extern void RangefinderDistanceRangingStatusSet( uint8_t *NewRangingStatus );
extern void RangefinderDistanceRangingStatusGet( uint8_t *NewRangingStatus );


#endif // RANGEFINDERDISTANCE_H

/**
 * @}
 * @}
 */
