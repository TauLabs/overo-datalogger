/**
 ******************************************************************************
 * @addtogroup UAVObjects UAVObject set for this firmware
 * @{
 * @addtogroup PositionActual PositionActual
 * @brief Contains the current position relative to @ref HomeLocation
 *
 *
 * @file       positionactual.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @author     Tau Labs, http://taulabs.org, Copyright (C) 2012-2013
 * @brief      Include files for the PositionActual object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: positionactual.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef POSITIONACTUAL_H
#define POSITIONACTUAL_H

// Object constants
#define POSITIONACTUAL_OBJID 0xFA9E2D42
#define POSITIONACTUAL_ISSINGLEINST 1
#define POSITIONACTUAL_ISSETTINGS 0
#define POSITIONACTUAL_NUMBYTES 12

// Generic interface functions
int32_t PositionActualInitialize();
UAVObjHandle PositionActualHandle();
void PositionActualSetDefaults(UAVObjHandle obj, uint16_t instId);

// Object data
typedef struct {
    float North;
    float East;
    float Down;

} __attribute__((packed)) __attribute__((aligned(4))) PositionActualData;

// Typesafe Object access functions
/**
 * @function PositionActualGet(dataOut)
 * @brief Populate a PositionActualData object
 * @param[out] dataOut 
 */
static inline int32_t PositionActualGet(PositionActualData *dataOut) { return UAVObjGetData(PositionActualHandle(), dataOut); }

static inline int32_t PositionActualSet(const PositionActualData *dataIn) { return UAVObjSetData(PositionActualHandle(), dataIn); }

static inline int32_t PositionActualInstGet(uint16_t instId, PositionActualData *dataOut) { return UAVObjGetInstanceData(PositionActualHandle(), instId, dataOut); }

static inline int32_t PositionActualInstSet(uint16_t instId, const PositionActualData *dataIn) { return UAVObjSetInstanceData(PositionActualHandle(), instId, dataIn); }

static inline int32_t PositionActualConnectQueue(xQueueHandle queue) { return UAVObjConnectQueue(PositionActualHandle(), queue, EV_MASK_ALL_UPDATES); }

static inline int32_t PositionActualConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(PositionActualHandle(), cb, EV_MASK_ALL_UPDATES); }

static inline uint16_t PositionActualCreateInstance() { return UAVObjCreateInstance(PositionActualHandle(), &PositionActualSetDefaults); }

static inline void PositionActualRequestUpdate() { UAVObjRequestUpdate(PositionActualHandle()); }

static inline void PositionActualRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(PositionActualHandle(), instId); }

static inline void PositionActualUpdated() { UAVObjUpdated(PositionActualHandle()); }

static inline void PositionActualInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(PositionActualHandle(), instId); }

static inline int32_t PositionActualGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(PositionActualHandle(), dataOut); }

static inline int32_t PositionActualSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(PositionActualHandle(), dataIn); }

static inline int8_t PositionActualReadOnly() { return UAVObjReadOnly(PositionActualHandle()); }

static inline uint16_t PositionActualGetNumInstances(){ return UAVObjGetNumInstances(PositionActualHandle()); }

static inline uint32_t PositionActualGetNumBytes(){ return UAVObjGetNumBytes(PositionActualHandle()); }

// Field information
// Field North information
// Field East information
// Field Down information


// set/Get functions
extern void PositionActualNorthSet( float *NewNorth );
extern void PositionActualNorthGet( float *NewNorth );
extern void PositionActualEastSet( float *NewEast );
extern void PositionActualEastGet( float *NewEast );
extern void PositionActualDownSet( float *NewDown );
extern void PositionActualDownGet( float *NewDown );


#endif // POSITIONACTUAL_H

/**
 * @}
 * @}
 */
